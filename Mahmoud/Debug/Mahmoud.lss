
Mahmoud.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00004664  000046f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800068  00800068  00004700  2**0
                  ALLOC
  3 .stab         00003d5c  00000000  00000000  00004700  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002111  00000000  00000000  0000845c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a56d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a85c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e924  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000eaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ed66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f5f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_6>
      1c:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__vector_7>
      20:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_8>
      24:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 38       	cpi	r26, 0x82	; 130
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e6       	ldi	r30, 0x64	; 100
      78:	f6 e4       	ldi	r31, 0x46	; 70
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a9 13 	call	0x2752	; 0x2752 <main>
      8a:	0c 94 30 23 	jmp	0x4660	; 0x4660 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 23 	jmp	0x462a	; 0x462a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 23 	jmp	0x460a	; 0x460a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 23 	jmp	0x460a	; 0x460a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 23 	jmp	0x462a	; 0x462a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 01 23 	jmp	0x4602	; 0x4602 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1d 23 	jmp	0x463a	; 0x463a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 05 23 	jmp	0x460a	; 0x460a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 05 23 	jmp	0x460a	; 0x460a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 05 23 	jmp	0x460a	; 0x460a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 21 23 	jmp	0x4642	; 0x4642 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 25 23 	jmp	0x464a	; 0x464a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <T1_Init>:
//}
//
///*************************************************/

void T1_Init(Timer1Modes Mode,ClockOptions Clock,CompareOutputMode State)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	29 97       	sbiw	r28, 0x09	; 9
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	switch(Mode)
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	39 87       	std	Y+9, r19	; 0x09
     cc0:	28 87       	std	Y+8, r18	; 0x08
     cc2:	88 85       	ldd	r24, Y+8	; 0x08
     cc4:	99 85       	ldd	r25, Y+9	; 0x09
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	91 05       	cpc	r25, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <T1_Init+0x30>
     ccc:	90 c0       	rjmp	.+288    	; 0xdee <T1_Init+0x150>
     cce:	28 85       	ldd	r18, Y+8	; 0x08
     cd0:	39 85       	ldd	r19, Y+9	; 0x09
     cd2:	23 30       	cpi	r18, 0x03	; 3
     cd4:	31 05       	cpc	r19, r1
     cd6:	64 f4       	brge	.+24     	; 0xcf0 <T1_Init+0x52>
     cd8:	88 85       	ldd	r24, Y+8	; 0x08
     cda:	99 85       	ldd	r25, Y+9	; 0x09
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	09 f4       	brne	.+2      	; 0xce2 <T1_Init+0x44>
     ce0:	4c c0       	rjmp	.+152    	; 0xd7a <T1_Init+0xdc>
     ce2:	28 85       	ldd	r18, Y+8	; 0x08
     ce4:	39 85       	ldd	r19, Y+9	; 0x09
     ce6:	21 30       	cpi	r18, 0x01	; 1
     ce8:	31 05       	cpc	r19, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <T1_Init+0x50>
     cec:	63 c0       	rjmp	.+198    	; 0xdb4 <T1_Init+0x116>
     cee:	9b c0       	rjmp	.+310    	; 0xe26 <T1_Init+0x188>
     cf0:	88 85       	ldd	r24, Y+8	; 0x08
     cf2:	99 85       	ldd	r25, Y+9	; 0x09
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	91 05       	cpc	r25, r1
     cf8:	19 f1       	breq	.+70     	; 0xd40 <T1_Init+0xa2>
     cfa:	28 85       	ldd	r18, Y+8	; 0x08
     cfc:	39 85       	ldd	r19, Y+9	; 0x09
     cfe:	24 30       	cpi	r18, 0x04	; 4
     d00:	31 05       	cpc	r19, r1
     d02:	09 f0       	breq	.+2      	; 0xd06 <T1_Init+0x68>
     d04:	90 c0       	rjmp	.+288    	; 0xe26 <T1_Init+0x188>
	{
	case FastPWM_Top_OCR1A:
		SetBit(T1_TCCR1A ,T1_WGM10);
     d06:	af e4       	ldi	r26, 0x4F	; 79
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ef e4       	ldi	r30, 0x4F	; 79
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	81 60       	ori	r24, 0x01	; 1
     d12:	8c 93       	st	X, r24
		SetBit(T1_TCCR1A ,T1_WGM11);
     d14:	af e4       	ldi	r26, 0x4F	; 79
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ef e4       	ldi	r30, 0x4F	; 79
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	8c 93       	st	X, r24
		SetBit(T1_TCCR1B ,T1_WGM12);
     d22:	ae e4       	ldi	r26, 0x4E	; 78
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ee e4       	ldi	r30, 0x4E	; 78
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	88 60       	ori	r24, 0x08	; 8
     d2e:	8c 93       	st	X, r24
		SetBit(T1_TCCR1B ,T1_WGM13);
     d30:	ae e4       	ldi	r26, 0x4E	; 78
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ee e4       	ldi	r30, 0x4E	; 78
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 61       	ori	r24, 0x10	; 16
     d3c:	8c 93       	st	X, r24
     d3e:	73 c0       	rjmp	.+230    	; 0xe26 <T1_Init+0x188>
		break;
	case FastPWM_Top_ICR1:
		ClearBit(T1_TCCR1A ,T1_WGM10);
     d40:	af e4       	ldi	r26, 0x4F	; 79
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ef e4       	ldi	r30, 0x4F	; 79
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8e 7f       	andi	r24, 0xFE	; 254
     d4c:	8c 93       	st	X, r24
		SetBit(T1_TCCR1A ,T1_WGM11);
     d4e:	af e4       	ldi	r26, 0x4F	; 79
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ef e4       	ldi	r30, 0x4F	; 79
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	82 60       	ori	r24, 0x02	; 2
     d5a:	8c 93       	st	X, r24
		SetBit(T1_TCCR1B ,T1_WGM12);
     d5c:	ae e4       	ldi	r26, 0x4E	; 78
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ee e4       	ldi	r30, 0x4E	; 78
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	88 60       	ori	r24, 0x08	; 8
     d68:	8c 93       	st	X, r24
		SetBit(T1_TCCR1B ,T1_WGM13);
     d6a:	ae e4       	ldi	r26, 0x4E	; 78
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ee e4       	ldi	r30, 0x4E	; 78
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 61       	ori	r24, 0x10	; 16
     d76:	8c 93       	st	X, r24
     d78:	56 c0       	rjmp	.+172    	; 0xe26 <T1_Init+0x188>
		break;
	case Normal:
		ClearBit(T1_TCCR1A ,T1_WGM10);
     d7a:	af e4       	ldi	r26, 0x4F	; 79
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	ef e4       	ldi	r30, 0x4F	; 79
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8e 7f       	andi	r24, 0xFE	; 254
     d86:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1A ,T1_WGM11);
     d88:	af e4       	ldi	r26, 0x4F	; 79
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ef e4       	ldi	r30, 0x4F	; 79
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8d 7f       	andi	r24, 0xFD	; 253
     d94:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1B ,T1_WGM12);
     d96:	ae e4       	ldi	r26, 0x4E	; 78
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	ee e4       	ldi	r30, 0x4E	; 78
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	87 7f       	andi	r24, 0xF7	; 247
     da2:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1B ,T1_WGM13);
     da4:	ae e4       	ldi	r26, 0x4E	; 78
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	ee e4       	ldi	r30, 0x4E	; 78
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8f 7e       	andi	r24, 0xEF	; 239
     db0:	8c 93       	st	X, r24
     db2:	39 c0       	rjmp	.+114    	; 0xe26 <T1_Init+0x188>
		break;
	case CTC_Top_OCR1A:
		ClearBit(T1_TCCR1A ,T1_WGM10);
     db4:	af e4       	ldi	r26, 0x4F	; 79
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	ef e4       	ldi	r30, 0x4F	; 79
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8e 7f       	andi	r24, 0xFE	; 254
     dc0:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1A ,T1_WGM11);
     dc2:	af e4       	ldi	r26, 0x4F	; 79
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	ef e4       	ldi	r30, 0x4F	; 79
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8d 7f       	andi	r24, 0xFD	; 253
     dce:	8c 93       	st	X, r24
		SetBit(T1_TCCR1B ,T1_WGM12);
     dd0:	ae e4       	ldi	r26, 0x4E	; 78
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ee e4       	ldi	r30, 0x4E	; 78
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1B ,T1_WGM13);
     dde:	ae e4       	ldi	r26, 0x4E	; 78
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ee e4       	ldi	r30, 0x4E	; 78
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8f 7e       	andi	r24, 0xEF	; 239
     dea:	8c 93       	st	X, r24
     dec:	1c c0       	rjmp	.+56     	; 0xe26 <T1_Init+0x188>
		break;
	case CTC_Top_ICR1:
		ClearBit(T1_TCCR1A ,T1_WGM10);
     dee:	af e4       	ldi	r26, 0x4F	; 79
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ef e4       	ldi	r30, 0x4F	; 79
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8e 7f       	andi	r24, 0xFE	; 254
     dfa:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1A ,T1_WGM11);
     dfc:	af e4       	ldi	r26, 0x4F	; 79
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ef e4       	ldi	r30, 0x4F	; 79
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8d 7f       	andi	r24, 0xFD	; 253
     e08:	8c 93       	st	X, r24
		SetBit(T1_TCCR1B ,T1_WGM12);
     e0a:	ae e4       	ldi	r26, 0x4E	; 78
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	ee e4       	ldi	r30, 0x4E	; 78
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	88 60       	ori	r24, 0x08	; 8
     e16:	8c 93       	st	X, r24
		SetBit(T1_TCCR1B ,T1_WGM13);
     e18:	ae e4       	ldi	r26, 0x4E	; 78
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	ee e4       	ldi	r30, 0x4E	; 78
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 61       	ori	r24, 0x10	; 16
     e24:	8c 93       	st	X, r24
		break;
	}
	switch(Clock)
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	3f 83       	std	Y+7, r19	; 0x07
     e2e:	2e 83       	std	Y+6, r18	; 0x06
     e30:	8e 81       	ldd	r24, Y+6	; 0x06
     e32:	9f 81       	ldd	r25, Y+7	; 0x07
     e34:	83 30       	cpi	r24, 0x03	; 3
     e36:	91 05       	cpc	r25, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <T1_Init+0x19e>
     e3a:	59 c0       	rjmp	.+178    	; 0xeee <T1_Init+0x250>
     e3c:	2e 81       	ldd	r18, Y+6	; 0x06
     e3e:	3f 81       	ldd	r19, Y+7	; 0x07
     e40:	24 30       	cpi	r18, 0x04	; 4
     e42:	31 05       	cpc	r19, r1
     e44:	7c f4       	brge	.+30     	; 0xe64 <T1_Init+0x1c6>
     e46:	8e 81       	ldd	r24, Y+6	; 0x06
     e48:	9f 81       	ldd	r25, Y+7	; 0x07
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	91 05       	cpc	r25, r1
     e4e:	89 f1       	breq	.+98     	; 0xeb2 <T1_Init+0x214>
     e50:	2e 81       	ldd	r18, Y+6	; 0x06
     e52:	3f 81       	ldd	r19, Y+7	; 0x07
     e54:	22 30       	cpi	r18, 0x02	; 2
     e56:	31 05       	cpc	r19, r1
     e58:	dc f5       	brge	.+118    	; 0xed0 <T1_Init+0x232>
     e5a:	8e 81       	ldd	r24, Y+6	; 0x06
     e5c:	9f 81       	ldd	r25, Y+7	; 0x07
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	d1 f0       	breq	.+52     	; 0xe96 <T1_Init+0x1f8>
     e62:	8f c0       	rjmp	.+286    	; 0xf82 <T1_Init+0x2e4>
     e64:	2e 81       	ldd	r18, Y+6	; 0x06
     e66:	3f 81       	ldd	r19, Y+7	; 0x07
     e68:	25 30       	cpi	r18, 0x05	; 5
     e6a:	31 05       	cpc	r19, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <T1_Init+0x1d2>
     e6e:	5d c0       	rjmp	.+186    	; 0xf2a <T1_Init+0x28c>
     e70:	8e 81       	ldd	r24, Y+6	; 0x06
     e72:	9f 81       	ldd	r25, Y+7	; 0x07
     e74:	85 30       	cpi	r24, 0x05	; 5
     e76:	91 05       	cpc	r25, r1
     e78:	0c f4       	brge	.+2      	; 0xe7c <T1_Init+0x1de>
     e7a:	48 c0       	rjmp	.+144    	; 0xf0c <T1_Init+0x26e>
     e7c:	2e 81       	ldd	r18, Y+6	; 0x06
     e7e:	3f 81       	ldd	r19, Y+7	; 0x07
     e80:	26 30       	cpi	r18, 0x06	; 6
     e82:	31 05       	cpc	r19, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <T1_Init+0x1ea>
     e86:	60 c0       	rjmp	.+192    	; 0xf48 <T1_Init+0x2aa>
     e88:	8e 81       	ldd	r24, Y+6	; 0x06
     e8a:	9f 81       	ldd	r25, Y+7	; 0x07
     e8c:	87 30       	cpi	r24, 0x07	; 7
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <T1_Init+0x1f6>
     e92:	69 c0       	rjmp	.+210    	; 0xf66 <T1_Init+0x2c8>
     e94:	76 c0       	rjmp	.+236    	; 0xf82 <T1_Init+0x2e4>
	{
	case T1_Off:
		T1_TCCR1B &=0b11111000;
     e96:	ae e4       	ldi	r26, 0x4E	; 78
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	ee e4       	ldi	r30, 0x4E	; 78
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	88 7f       	andi	r24, 0xF8	; 248
     ea2:	8c 93       	st	X, r24
		T1_TCCR1B |=T1_Off;
     ea4:	ae e4       	ldi	r26, 0x4E	; 78
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ee e4       	ldi	r30, 0x4E	; 78
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8c 93       	st	X, r24
     eb0:	68 c0       	rjmp	.+208    	; 0xf82 <T1_Init+0x2e4>
		break;
	case T1_Prescaller1:
		T1_TCCR1B &=0b11111000;
     eb2:	ae e4       	ldi	r26, 0x4E	; 78
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ee e4       	ldi	r30, 0x4E	; 78
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 7f       	andi	r24, 0xF8	; 248
     ebe:	8c 93       	st	X, r24
		T1_TCCR1B |=T1_Prescaller1;
     ec0:	ae e4       	ldi	r26, 0x4E	; 78
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ee e4       	ldi	r30, 0x4E	; 78
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	8c 93       	st	X, r24
     ece:	59 c0       	rjmp	.+178    	; 0xf82 <T1_Init+0x2e4>
		break;
	case T1_Prescaller8:
		T1_TCCR1B &=0b11111000;
     ed0:	ae e4       	ldi	r26, 0x4E	; 78
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ee e4       	ldi	r30, 0x4E	; 78
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	88 7f       	andi	r24, 0xF8	; 248
     edc:	8c 93       	st	X, r24
		T1_TCCR1B |=T1_Prescaller8;
     ede:	ae e4       	ldi	r26, 0x4E	; 78
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ee e4       	ldi	r30, 0x4E	; 78
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 60       	ori	r24, 0x02	; 2
     eea:	8c 93       	st	X, r24
     eec:	4a c0       	rjmp	.+148    	; 0xf82 <T1_Init+0x2e4>
		break;
	case T1_Prescaller64:
		T1_TCCR1B &=0b11111000;
     eee:	ae e4       	ldi	r26, 0x4E	; 78
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ee e4       	ldi	r30, 0x4E	; 78
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 7f       	andi	r24, 0xF8	; 248
     efa:	8c 93       	st	X, r24
		T1_TCCR1B |=T1_Prescaller64;
     efc:	ae e4       	ldi	r26, 0x4E	; 78
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ee e4       	ldi	r30, 0x4E	; 78
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	83 60       	ori	r24, 0x03	; 3
     f08:	8c 93       	st	X, r24
     f0a:	3b c0       	rjmp	.+118    	; 0xf82 <T1_Init+0x2e4>
		break;
	case T1_Prescaller256:
		T1_TCCR1B &=0b11111000;
     f0c:	ae e4       	ldi	r26, 0x4E	; 78
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ee e4       	ldi	r30, 0x4E	; 78
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 7f       	andi	r24, 0xF8	; 248
     f18:	8c 93       	st	X, r24
		T1_TCCR1B |=T1_Prescaller256;
     f1a:	ae e4       	ldi	r26, 0x4E	; 78
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ee e4       	ldi	r30, 0x4E	; 78
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	84 60       	ori	r24, 0x04	; 4
     f26:	8c 93       	st	X, r24
     f28:	2c c0       	rjmp	.+88     	; 0xf82 <T1_Init+0x2e4>
		break;
	case T1_Prescaller1024:
		T1_TCCR1B &=0b11111000;
     f2a:	ae e4       	ldi	r26, 0x4E	; 78
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ee e4       	ldi	r30, 0x4E	; 78
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 7f       	andi	r24, 0xF8	; 248
     f36:	8c 93       	st	X, r24
		T1_TCCR1B |=T1_Prescaller1024;
     f38:	ae e4       	ldi	r26, 0x4E	; 78
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ee e4       	ldi	r30, 0x4E	; 78
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	85 60       	ori	r24, 0x05	; 5
     f44:	8c 93       	st	X, r24
     f46:	1d c0       	rjmp	.+58     	; 0xf82 <T1_Init+0x2e4>
		break;
	case T1_CounterFalling:
		T1_TCCR1B &=0b11111000;
     f48:	ae e4       	ldi	r26, 0x4E	; 78
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ee e4       	ldi	r30, 0x4E	; 78
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 7f       	andi	r24, 0xF8	; 248
     f54:	8c 93       	st	X, r24
		T1_TCCR1B |=T1_CounterFalling;
     f56:	ae e4       	ldi	r26, 0x4E	; 78
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ee e4       	ldi	r30, 0x4E	; 78
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	86 60       	ori	r24, 0x06	; 6
     f62:	8c 93       	st	X, r24
     f64:	0e c0       	rjmp	.+28     	; 0xf82 <T1_Init+0x2e4>
		break;
	case T1_CounterRising:
		T1_TCCR1B &=0b11111000;
     f66:	ae e4       	ldi	r26, 0x4E	; 78
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ee e4       	ldi	r30, 0x4E	; 78
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	88 7f       	andi	r24, 0xF8	; 248
     f72:	8c 93       	st	X, r24
		T1_TCCR1B |=T1_CounterRising;
     f74:	ae e4       	ldi	r26, 0x4E	; 78
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ee e4       	ldi	r30, 0x4E	; 78
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	87 60       	ori	r24, 0x07	; 7
     f80:	8c 93       	st	X, r24
		break;
	}
	switch (State)
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	3d 83       	std	Y+5, r19	; 0x05
     f8a:	2c 83       	std	Y+4, r18	; 0x04
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	41 f1       	breq	.+80     	; 0xfe6 <T1_Init+0x348>
     f96:	2c 81       	ldd	r18, Y+4	; 0x04
     f98:	3d 81       	ldd	r19, Y+5	; 0x05
     f9a:	22 30       	cpi	r18, 0x02	; 2
     f9c:	31 05       	cpc	r19, r1
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <T1_Init+0x304>
     fa0:	3f c0       	rjmp	.+126    	; 0x1020 <T1_Init+0x382>
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	09 f0       	breq	.+2      	; 0xfac <T1_Init+0x30e>
     faa:	56 c0       	rjmp	.+172    	; 0x1058 <T1_Init+0x3ba>
	{
	case disconnected:
		ClearBit(T1_TCCR1A,T1_COM1A0);
     fac:	af e4       	ldi	r26, 0x4F	; 79
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ef e4       	ldi	r30, 0x4F	; 79
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1A,T1_COM1A1);
     fba:	af e4       	ldi	r26, 0x4F	; 79
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ef e4       	ldi	r30, 0x4F	; 79
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 77       	andi	r24, 0x7F	; 127
     fc6:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1A,T1_COM1B0);
     fc8:	af e4       	ldi	r26, 0x4F	; 79
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ef e4       	ldi	r30, 0x4F	; 79
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 7e       	andi	r24, 0xEF	; 239
     fd4:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1A,T1_COM1B1);
     fd6:	af e4       	ldi	r26, 0x4F	; 79
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ef e4       	ldi	r30, 0x4F	; 79
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8f 7d       	andi	r24, 0xDF	; 223
     fe2:	8c 93       	st	X, r24
     fe4:	39 c0       	rjmp	.+114    	; 0x1058 <T1_Init+0x3ba>

		break;
	case noninverting:
		ClearBit(T1_TCCR1A,T1_COM1A0);
     fe6:	af e4       	ldi	r26, 0x4F	; 79
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ef e4       	ldi	r30, 0x4F	; 79
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 7b       	andi	r24, 0xBF	; 191
     ff2:	8c 93       	st	X, r24
		SetBit(T1_TCCR1A,T1_COM1A1);
     ff4:	af e4       	ldi	r26, 0x4F	; 79
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	ef e4       	ldi	r30, 0x4F	; 79
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	8c 93       	st	X, r24
		ClearBit(T1_TCCR1A,T1_COM1B0);
    1002:	af e4       	ldi	r26, 0x4F	; 79
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ef e4       	ldi	r30, 0x4F	; 79
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8f 7e       	andi	r24, 0xEF	; 239
    100e:	8c 93       	st	X, r24
		SetBit(T1_TCCR1A,T1_COM1B1);
    1010:	af e4       	ldi	r26, 0x4F	; 79
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ef e4       	ldi	r30, 0x4F	; 79
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 62       	ori	r24, 0x20	; 32
    101c:	8c 93       	st	X, r24
    101e:	1c c0       	rjmp	.+56     	; 0x1058 <T1_Init+0x3ba>

		break;
	case inverting:
		SetBit(T1_TCCR1A,T1_COM1A0);
    1020:	af e4       	ldi	r26, 0x4F	; 79
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ef e4       	ldi	r30, 0x4F	; 79
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	80 64       	ori	r24, 0x40	; 64
    102c:	8c 93       	st	X, r24
		SetBit(T1_TCCR1A,T1_COM1A1);
    102e:	af e4       	ldi	r26, 0x4F	; 79
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ef e4       	ldi	r30, 0x4F	; 79
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	8c 93       	st	X, r24
		SetBit(T1_TCCR1A,T1_COM1B0);
    103c:	af e4       	ldi	r26, 0x4F	; 79
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ef e4       	ldi	r30, 0x4F	; 79
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	80 61       	ori	r24, 0x10	; 16
    1048:	8c 93       	st	X, r24
		SetBit(T1_TCCR1A,T1_COM1B1);
    104a:	af e4       	ldi	r26, 0x4F	; 79
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ef e4       	ldi	r30, 0x4F	; 79
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 62       	ori	r24, 0x20	; 32
    1056:	8c 93       	st	X, r24

		break;

	}
}
    1058:	29 96       	adiw	r28, 0x09	; 9
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <T1_OutputCompareInterruptEnable>:
void T1_OutputCompareInterruptEnable(ComperUnit Unit)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <T1_OutputCompareInterruptEnable+0x6>
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	89 83       	std	Y+1, r24	; 0x01
	switch(Unit)
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3b 83       	std	Y+3, r19	; 0x03
    1080:	2a 83       	std	Y+2, r18	; 0x02
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	91 05       	cpc	r25, r1
    108a:	89 f0       	breq	.+34     	; 0x10ae <T1_OutputCompareInterruptEnable+0x44>
    108c:	2a 81       	ldd	r18, Y+2	; 0x02
    108e:	3b 81       	ldd	r19, Y+3	; 0x03
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	a1 f0       	breq	.+40     	; 0x10be <T1_OutputCompareInterruptEnable+0x54>
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	9b 81       	ldd	r25, Y+3	; 0x03
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	f1 f4       	brne	.+60     	; 0x10da <T1_OutputCompareInterruptEnable+0x70>
	{
	case UnitA:
		SetBit(T1_TIMSK,T1_OCIE1A);
    109e:	a9 e5       	ldi	r26, 0x59	; 89
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e9 e5       	ldi	r30, 0x59	; 89
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 61       	ori	r24, 0x10	; 16
    10aa:	8c 93       	st	X, r24
    10ac:	16 c0       	rjmp	.+44     	; 0x10da <T1_OutputCompareInterruptEnable+0x70>
		break;
	case UnitB:
		SetBit(T1_TIMSK,T1_OCIE1B);
    10ae:	a9 e5       	ldi	r26, 0x59	; 89
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e9 e5       	ldi	r30, 0x59	; 89
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	88 60       	ori	r24, 0x08	; 8
    10ba:	8c 93       	st	X, r24
    10bc:	0e c0       	rjmp	.+28     	; 0x10da <T1_OutputCompareInterruptEnable+0x70>
		break;
	case Both:
		SetBit(T1_TIMSK,T1_OCIE1A);
    10be:	a9 e5       	ldi	r26, 0x59	; 89
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e9 e5       	ldi	r30, 0x59	; 89
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	80 61       	ori	r24, 0x10	; 16
    10ca:	8c 93       	st	X, r24
		SetBit(T1_TIMSK,T1_OCIE1B);
    10cc:	a9 e5       	ldi	r26, 0x59	; 89
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e9 e5       	ldi	r30, 0x59	; 89
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 60       	ori	r24, 0x08	; 8
    10d8:	8c 93       	st	X, r24
		break;
	}
}
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <T1_OutputCompareInterruptDisable>:

void T1_OutputCompareInterruptDisable(ComperUnit Unit)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <T1_OutputCompareInterruptDisable+0x6>
    10ec:	0f 92       	push	r0
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	89 83       	std	Y+1, r24	; 0x01
	switch(Unit)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3b 83       	std	Y+3, r19	; 0x03
    10fc:	2a 83       	std	Y+2, r18	; 0x02
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	89 f0       	breq	.+34     	; 0x112a <T1_OutputCompareInterruptDisable+0x44>
    1108:	2a 81       	ldd	r18, Y+2	; 0x02
    110a:	3b 81       	ldd	r19, Y+3	; 0x03
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	a1 f0       	breq	.+40     	; 0x113a <T1_OutputCompareInterruptDisable+0x54>
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	9b 81       	ldd	r25, Y+3	; 0x03
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	f1 f4       	brne	.+60     	; 0x1156 <T1_OutputCompareInterruptDisable+0x70>
	{
	case UnitA:
		ClearBit(T1_TIMSK,T1_OCIE1A);
    111a:	a9 e5       	ldi	r26, 0x59	; 89
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e9 e5       	ldi	r30, 0x59	; 89
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 7e       	andi	r24, 0xEF	; 239
    1126:	8c 93       	st	X, r24
    1128:	16 c0       	rjmp	.+44     	; 0x1156 <T1_OutputCompareInterruptDisable+0x70>
		break;
	case UnitB:
		ClearBit(T1_TIMSK,T1_OCIE1B);
    112a:	a9 e5       	ldi	r26, 0x59	; 89
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e9 e5       	ldi	r30, 0x59	; 89
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	87 7f       	andi	r24, 0xF7	; 247
    1136:	8c 93       	st	X, r24
    1138:	0e c0       	rjmp	.+28     	; 0x1156 <T1_OutputCompareInterruptDisable+0x70>
		break;
	case Both:
		ClearBit(T1_TIMSK,T1_OCIE1A);
    113a:	a9 e5       	ldi	r26, 0x59	; 89
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e9 e5       	ldi	r30, 0x59	; 89
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8f 7e       	andi	r24, 0xEF	; 239
    1146:	8c 93       	st	X, r24
		ClearBit(T1_TIMSK,T1_OCIE1B);
    1148:	a9 e5       	ldi	r26, 0x59	; 89
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e9 e5       	ldi	r30, 0x59	; 89
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	87 7f       	andi	r24, 0xF7	; 247
    1154:	8c 93       	st	X, r24
		break;
	}
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <T1_Interrupt_Enable>:

void T1_Interrupt_Enable()
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	SetBit(T1_TIMSK,T1_TOIE1);
    116a:	a9 e5       	ldi	r26, 0x59	; 89
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e9 e5       	ldi	r30, 0x59	; 89
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	84 60       	ori	r24, 0x04	; 4
    1176:	8c 93       	st	X, r24
}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <T1_Interrupt_Disable>:
void T1_Interrupt_Disable()
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	ClearBit(T1_TIMSK,T1_TOIE1);
    1186:	a9 e5       	ldi	r26, 0x59	; 89
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e9 e5       	ldi	r30, 0x59	; 89
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8b 7f       	andi	r24, 0xFB	; 251
    1192:	8c 93       	st	X, r24
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <T1_SetCallBack>:
void T1_SetCallBack(void (*tmr1_ptf)(void))
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <T1_SetCallBack+0x6>
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
	TMR1_InterriptOveFlow = tmr1_ptf;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	90 93 70 00 	sts	0x0070, r25
    11b0:	80 93 6f 00 	sts	0x006F, r24
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <T1_ICU_SetCallBack>:


void T1_ICU_SetCallBack(void (*(TMR1_ICU)) (void))
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <T1_ICU_SetCallBack+0x6>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
	TMR1_InterrupICU=TMR1_ICU;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	90 93 72 00 	sts	0x0072, r25
    11d4:	80 93 71 00 	sts	0x0071, r24
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <T1_SetCallBack_COMPA>:

void T1_SetCallBack_COMPA(void (*tmr1_ptf)(void))
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <T1_SetCallBack_COMPA+0x6>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
	TMR1_InterriptComA=tmr1_ptf;
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	90 93 74 00 	sts	0x0074, r25
    11f8:	80 93 73 00 	sts	0x0073, r24
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <T1_InputCpetureEdge>:
void T1_InputCpetureEdge(Edge_t _edge)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	0f 92       	push	r0
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	89 83       	std	Y+1, r24	; 0x01
	if(FALLING_EDGE ==_edge)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	88 23       	and	r24, r24
    1216:	41 f4       	brne	.+16     	; 0x1228 <T1_InputCpetureEdge+0x22>
	{
		ClearBit(T1_TCCR1B,T1_ICES1);
    1218:	ae e4       	ldi	r26, 0x4E	; 78
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	ee e4       	ldi	r30, 0x4E	; 78
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8f 7b       	andi	r24, 0xBF	; 191
    1224:	8c 93       	st	X, r24
    1226:	0a c0       	rjmp	.+20     	; 0x123c <T1_InputCpetureEdge+0x36>
	}
	else if(RISING_EDGE ==_edge)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	39 f4       	brne	.+14     	; 0x123c <T1_InputCpetureEdge+0x36>
	{
		SetBit(T1_TCCR1B,T1_ICES1);
    122e:	ae e4       	ldi	r26, 0x4E	; 78
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ee e4       	ldi	r30, 0x4E	; 78
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 64       	ori	r24, 0x40	; 64
    123a:	8c 93       	st	X, r24
	}
}
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <T1_ICU_InterruptEnable>:
void T1_ICU_InterruptEnable()
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
	SetBit(T1_TIMSK,T1_TICIE1);
    124c:	a9 e5       	ldi	r26, 0x59	; 89
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e9 e5       	ldi	r30, 0x59	; 89
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 62       	ori	r24, 0x20	; 32
    1258:	8c 93       	st	X, r24
}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <T1_ICU_InterruptDisnable>:
void T1_ICU_InterruptDisnable()
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	ClearBit(T1_TIMSK,T1_TICIE1);
    1268:	a9 e5       	ldi	r26, 0x59	; 89
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e9 e5       	ldi	r30, 0x59	; 89
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8f 7d       	andi	r24, 0xDF	; 223
    1274:	8c 93       	st	X, r24
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <Func_ICU>:

static void Func_ICU()
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	if(flag==0)
    1284:	80 91 68 00 	lds	r24, 0x0068
    1288:	88 23       	and	r24, r24
    128a:	79 f4       	brne	.+30     	; 0x12aa <Func_ICU+0x2e>
	{
		t1=T1_ICR1;
    128c:	e6 e4       	ldi	r30, 0x46	; 70
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	90 93 6a 00 	sts	0x006A, r25
    1298:	80 93 69 00 	sts	0x0069, r24
		T1_InputCpetureEdge(FALLING_EDGE);
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	0e 94 03 09 	call	0x1206	; 0x1206 <T1_InputCpetureEdge>
		flag=1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 68 00 	sts	0x0068, r24
    12a8:	24 c0       	rjmp	.+72     	; 0x12f2 <Func_ICU+0x76>

	}
	else if(flag==1)
    12aa:	80 91 68 00 	lds	r24, 0x0068
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	79 f4       	brne	.+30     	; 0x12d0 <Func_ICU+0x54>
	{
		t2=T1_ICR1;
    12b2:	e6 e4       	ldi	r30, 0x46	; 70
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	90 93 6c 00 	sts	0x006C, r25
    12be:	80 93 6b 00 	sts	0x006B, r24
		T1_InputCpetureEdge(RISING_EDGE);
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	0e 94 03 09 	call	0x1206	; 0x1206 <T1_InputCpetureEdge>
		flag=2;
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	80 93 68 00 	sts	0x0068, r24
    12ce:	11 c0       	rjmp	.+34     	; 0x12f2 <Func_ICU+0x76>
	}
	else if(flag==2)
    12d0:	80 91 68 00 	lds	r24, 0x0068
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	69 f4       	brne	.+26     	; 0x12f2 <Func_ICU+0x76>
	{
		t3=T1_ICR1;
    12d8:	e6 e4       	ldi	r30, 0x46	; 70
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
    12e0:	90 93 6e 00 	sts	0x006E, r25
    12e4:	80 93 6d 00 	sts	0x006D, r24
		T1_ICU_InterruptDisnable();
    12e8:	0e 94 30 09 	call	0x1260	; 0x1260 <T1_ICU_InterruptDisnable>
		flag=3;
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	80 93 68 00 	sts	0x0068, r24
	}
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <__vector_9>:
/**********************ISR For TMR1 For OVF**************************/
void __vector_9(void)
{
    12f8:	1f 92       	push	r1
    12fa:	0f 92       	push	r0
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	0f 92       	push	r0
    1300:	11 24       	eor	r1, r1
    1302:	2f 93       	push	r18
    1304:	3f 93       	push	r19
    1306:	4f 93       	push	r20
    1308:	5f 93       	push	r21
    130a:	6f 93       	push	r22
    130c:	7f 93       	push	r23
    130e:	8f 93       	push	r24
    1310:	9f 93       	push	r25
    1312:	af 93       	push	r26
    1314:	bf 93       	push	r27
    1316:	ef 93       	push	r30
    1318:	ff 93       	push	r31
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_InterriptOveFlow)
    1322:	80 91 6f 00 	lds	r24, 0x006F
    1326:	90 91 70 00 	lds	r25, 0x0070
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	29 f0       	breq	.+10     	; 0x1338 <__vector_9+0x40>
	{
		TMR1_InterriptOveFlow();
    132e:	e0 91 6f 00 	lds	r30, 0x006F
    1332:	f0 91 70 00 	lds	r31, 0x0070
    1336:	09 95       	icall
	}

}
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	ff 91       	pop	r31
    133e:	ef 91       	pop	r30
    1340:	bf 91       	pop	r27
    1342:	af 91       	pop	r26
    1344:	9f 91       	pop	r25
    1346:	8f 91       	pop	r24
    1348:	7f 91       	pop	r23
    134a:	6f 91       	pop	r22
    134c:	5f 91       	pop	r21
    134e:	4f 91       	pop	r20
    1350:	3f 91       	pop	r19
    1352:	2f 91       	pop	r18
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <__vector_6>:
/**********************ISR For TMR1 For ICU****************************/
void __vector_6(void)
{
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	2f 93       	push	r18
    136a:	3f 93       	push	r19
    136c:	4f 93       	push	r20
    136e:	5f 93       	push	r21
    1370:	6f 93       	push	r22
    1372:	7f 93       	push	r23
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	af 93       	push	r26
    137a:	bf 93       	push	r27
    137c:	ef 93       	push	r30
    137e:	ff 93       	push	r31
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_InterrupICU)
    1388:	80 91 71 00 	lds	r24, 0x0071
    138c:	90 91 72 00 	lds	r25, 0x0072
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	29 f0       	breq	.+10     	; 0x139e <__vector_6+0x40>
	{
		TMR1_InterrupICU();
    1394:	e0 91 71 00 	lds	r30, 0x0071
    1398:	f0 91 72 00 	lds	r31, 0x0072
    139c:	09 95       	icall
	}

}
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	ff 91       	pop	r31
    13a4:	ef 91       	pop	r30
    13a6:	bf 91       	pop	r27
    13a8:	af 91       	pop	r26
    13aa:	9f 91       	pop	r25
    13ac:	8f 91       	pop	r24
    13ae:	7f 91       	pop	r23
    13b0:	6f 91       	pop	r22
    13b2:	5f 91       	pop	r21
    13b4:	4f 91       	pop	r20
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <__vector_8>:
/**********************ISR For TMR1 For COMPB**************************/
void __vector_8(void)
{
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	6f 93       	push	r22
    13d8:	7f 93       	push	r23
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	af 93       	push	r26
    13e0:	bf 93       	push	r27
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_InterriptComB)
    13ee:	80 91 75 00 	lds	r24, 0x0075
    13f2:	90 91 76 00 	lds	r25, 0x0076
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	29 f0       	breq	.+10     	; 0x1404 <__vector_8+0x40>
	{
		TMR1_InterriptComB();
    13fa:	e0 91 75 00 	lds	r30, 0x0075
    13fe:	f0 91 76 00 	lds	r31, 0x0076
    1402:	09 95       	icall
	}
}
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <__vector_7>:
/**********************ISR For TMR1 For COMPA**************************/
void __vector_7(void)
{
    142a:	1f 92       	push	r1
    142c:	0f 92       	push	r0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	0f 92       	push	r0
    1432:	11 24       	eor	r1, r1
    1434:	2f 93       	push	r18
    1436:	3f 93       	push	r19
    1438:	4f 93       	push	r20
    143a:	5f 93       	push	r21
    143c:	6f 93       	push	r22
    143e:	7f 93       	push	r23
    1440:	8f 93       	push	r24
    1442:	9f 93       	push	r25
    1444:	af 93       	push	r26
    1446:	bf 93       	push	r27
    1448:	ef 93       	push	r30
    144a:	ff 93       	push	r31
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_InterriptComA)
    1454:	80 91 73 00 	lds	r24, 0x0073
    1458:	90 91 74 00 	lds	r25, 0x0074
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	29 f0       	breq	.+10     	; 0x146a <__vector_7+0x40>
	{
		TMR1_InterriptComA();
    1460:	e0 91 73 00 	lds	r30, 0x0073
    1464:	f0 91 74 00 	lds	r31, 0x0074
    1468:	09 95       	icall
	}

}
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	ff 91       	pop	r31
    1470:	ef 91       	pop	r30
    1472:	bf 91       	pop	r27
    1474:	af 91       	pop	r26
    1476:	9f 91       	pop	r25
    1478:	8f 91       	pop	r24
    147a:	7f 91       	pop	r23
    147c:	6f 91       	pop	r22
    147e:	5f 91       	pop	r21
    1480:	4f 91       	pop	r20
    1482:	3f 91       	pop	r19
    1484:	2f 91       	pop	r18
    1486:	0f 90       	pop	r0
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	0f 90       	pop	r0
    148c:	1f 90       	pop	r1
    148e:	18 95       	reti

00001490 <GIE_Enable>:




void GIE_Enable()
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG,GIE_Pin);
    1498:	af e5       	ldi	r26, 0x5F	; 95
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	ef e5       	ldi	r30, 0x5F	; 95
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	80 68       	ori	r24, 0x80	; 128
    14a4:	8c 93       	st	X, r24
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <GIE_Disable>:
void GIE_Disable()
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
	ClearBit(SREG,GIE_Pin);
    14b4:	af e5       	ldi	r26, 0x5F	; 95
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ef e5       	ldi	r30, 0x5F	; 95
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8f 77       	andi	r24, 0x7F	; 127
    14c0:	8c 93       	st	X, r24
}
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <EXTI0_Init>:
 *      Author: DELL
 */
#include "../Header/EXTI_Interface.h"

void EXTI0_Init(u8 Sens_Control)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
	if(Sens_Control == Falling)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	79 f4       	brne	.+30     	; 0x14f8 <EXTI0_Init+0x30>
	{
		ClearBit(EXTI_MCUCR , ISC00);
    14da:	a5 e5       	ldi	r26, 0x55	; 85
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e5 e5       	ldi	r30, 0x55	; 85
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	8e 7f       	andi	r24, 0xFE	; 254
    14e6:	8c 93       	st	X, r24
		SetBit(EXTI_MCUCR , ISC01);
    14e8:	a5 e5       	ldi	r26, 0x55	; 85
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e5 e5       	ldi	r30, 0x55	; 85
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	82 60       	ori	r24, 0x02	; 2
    14f4:	8c 93       	st	X, r24
    14f6:	35 c0       	rjmp	.+106    	; 0x1562 <EXTI0_Init+0x9a>

	}
	else if (Sens_Control == Rising)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	79 f4       	brne	.+30     	; 0x151c <EXTI0_Init+0x54>
	{
		SetBit(EXTI_MCUCR , ISC00);
    14fe:	a5 e5       	ldi	r26, 0x55	; 85
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e5       	ldi	r30, 0x55	; 85
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	81 60       	ori	r24, 0x01	; 1
    150a:	8c 93       	st	X, r24
		SetBit(EXTI_MCUCR , ISC01);
    150c:	a5 e5       	ldi	r26, 0x55	; 85
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e5       	ldi	r30, 0x55	; 85
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	82 60       	ori	r24, 0x02	; 2
    1518:	8c 93       	st	X, r24
    151a:	23 c0       	rjmp	.+70     	; 0x1562 <EXTI0_Init+0x9a>
	}
	else if (Sens_Control == Low_Level)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	79 f4       	brne	.+30     	; 0x1540 <EXTI0_Init+0x78>
	{
		ClearBit(EXTI_MCUCR , ISC00);
    1522:	a5 e5       	ldi	r26, 0x55	; 85
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e5       	ldi	r30, 0x55	; 85
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8e 7f       	andi	r24, 0xFE	; 254
    152e:	8c 93       	st	X, r24
		ClearBit(EXTI_MCUCR , ISC01);
    1530:	a5 e5       	ldi	r26, 0x55	; 85
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e5       	ldi	r30, 0x55	; 85
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8d 7f       	andi	r24, 0xFD	; 253
    153c:	8c 93       	st	X, r24
    153e:	11 c0       	rjmp	.+34     	; 0x1562 <EXTI0_Init+0x9a>
	}
	else if (Sens_Control == AnyLogic)
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	71 f4       	brne	.+28     	; 0x1562 <EXTI0_Init+0x9a>
	{
		SetBit(EXTI_MCUCR , ISC00);
    1546:	a5 e5       	ldi	r26, 0x55	; 85
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e5       	ldi	r30, 0x55	; 85
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	81 60       	ori	r24, 0x01	; 1
    1552:	8c 93       	st	X, r24
		ClearBit(EXTI_MCUCR , ISC01);
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8d 7f       	andi	r24, 0xFD	; 253
    1560:	8c 93       	st	X, r24
	}

	// Enable INT0


	SetBit(EXTI_GICR,INT0);
    1562:	ab e5       	ldi	r26, 0x5B	; 91
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	eb e5       	ldi	r30, 0x5B	; 91
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	80 64       	ori	r24, 0x40	; 64
    156e:	8c 93       	st	X, r24

}
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <EXTI1_Init>:
/**********************************************************/
void EXTI1_Init(u8 Sens_Control )
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	0f 92       	push	r0
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	89 83       	std	Y+1, r24	; 0x01
	if(Sens_Control == Falling)
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	79 f4       	brne	.+30     	; 0x15a8 <EXTI1_Init+0x30>
	{
		ClearBit(EXTI_MCUCR , ISC10);
    158a:	a5 e5       	ldi	r26, 0x55	; 85
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e5 e5       	ldi	r30, 0x55	; 85
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8b 7f       	andi	r24, 0xFB	; 251
    1596:	8c 93       	st	X, r24
		SetBit(EXTI_MCUCR , ISC11);
    1598:	a5 e5       	ldi	r26, 0x55	; 85
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e5 e5       	ldi	r30, 0x55	; 85
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	88 60       	ori	r24, 0x08	; 8
    15a4:	8c 93       	st	X, r24
    15a6:	35 c0       	rjmp	.+106    	; 0x1612 <EXTI1_Init+0x9a>

	}
	else if (Sens_Control == Rising)
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	79 f4       	brne	.+30     	; 0x15cc <EXTI1_Init+0x54>
	{
		SetBit(EXTI_MCUCR , ISC10);
    15ae:	a5 e5       	ldi	r26, 0x55	; 85
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e5 e5       	ldi	r30, 0x55	; 85
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	8c 93       	st	X, r24
		SetBit(EXTI_MCUCR , ISC11);
    15bc:	a5 e5       	ldi	r26, 0x55	; 85
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e5 e5       	ldi	r30, 0x55	; 85
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	8c 93       	st	X, r24
    15ca:	23 c0       	rjmp	.+70     	; 0x1612 <EXTI1_Init+0x9a>
	}
	else if (Sens_Control == Low_Level)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	79 f4       	brne	.+30     	; 0x15f0 <EXTI1_Init+0x78>
	{
		ClearBit(EXTI_MCUCR , ISC11);
    15d2:	a5 e5       	ldi	r26, 0x55	; 85
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e5       	ldi	r30, 0x55	; 85
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	87 7f       	andi	r24, 0xF7	; 247
    15de:	8c 93       	st	X, r24
		ClearBit(EXTI_MCUCR , ISC10);
    15e0:	a5 e5       	ldi	r26, 0x55	; 85
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e5       	ldi	r30, 0x55	; 85
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8b 7f       	andi	r24, 0xFB	; 251
    15ec:	8c 93       	st	X, r24
    15ee:	11 c0       	rjmp	.+34     	; 0x1612 <EXTI1_Init+0x9a>
	}
	else if (Sens_Control == AnyLogic)
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	84 30       	cpi	r24, 0x04	; 4
    15f4:	71 f4       	brne	.+28     	; 0x1612 <EXTI1_Init+0x9a>
	{
		SetBit(EXTI_MCUCR , ISC10);
    15f6:	a5 e5       	ldi	r26, 0x55	; 85
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e5       	ldi	r30, 0x55	; 85
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	84 60       	ori	r24, 0x04	; 4
    1602:	8c 93       	st	X, r24
		ClearBit(EXTI_MCUCR , ISC11);
    1604:	a5 e5       	ldi	r26, 0x55	; 85
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e5 e5       	ldi	r30, 0x55	; 85
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	87 7f       	andi	r24, 0xF7	; 247
    1610:	8c 93       	st	X, r24
	}

	//Enable INT1
	SetBit(EXTI_GICR,INT1);
    1612:	ab e5       	ldi	r26, 0x5B	; 91
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	eb e5       	ldi	r30, 0x5B	; 91
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 68       	ori	r24, 0x80	; 128
    161e:	8c 93       	st	X, r24
}
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <EXTI2_Init>:

void EXTI2_Init(u8 Sens_Control )
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
	if(Sens_Control == Falling)
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	41 f4       	brne	.+16     	; 0x164a <EXTI2_Init+0x22>
	{
		ClearBit(EXTI_MCUCR , ISC2);
    163a:	a5 e5       	ldi	r26, 0x55	; 85
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e5 e5       	ldi	r30, 0x55	; 85
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8f 7b       	andi	r24, 0xBF	; 191
    1646:	8c 93       	st	X, r24
    1648:	0a c0       	rjmp	.+20     	; 0x165e <EXTI2_Init+0x36>
	}
	else if (Sens_Control == Rising)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	82 30       	cpi	r24, 0x02	; 2
    164e:	39 f4       	brne	.+14     	; 0x165e <EXTI2_Init+0x36>
	{
		SetBit(EXTI_MCUCR , ISC2);
    1650:	a5 e5       	ldi	r26, 0x55	; 85
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e5 e5       	ldi	r30, 0x55	; 85
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	80 64       	ori	r24, 0x40	; 64
    165c:	8c 93       	st	X, r24
	}
	//Enable INT2
	SetBit(EXTI_GICR,INT2);
    165e:	ab e5       	ldi	r26, 0x5B	; 91
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	eb e5       	ldi	r30, 0x5B	; 91
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	80 62       	ori	r24, 0x20	; 32
    166a:	8c 93       	st	X, r24
}
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <DIO_SelectDirectionForPin>:
#include "util/delay.h"
#include "../../../Common/StdType.h"
#include "../Header/DIO_Interface.h"

void DIO_SelectDirectionForPin(u8 GroupName,u8 PinNumber,u8 DirectionState)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	27 97       	sbiw	r28, 0x07	; 7
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	6a 83       	std	Y+2, r22	; 0x02
    168c:	4b 83       	std	Y+3, r20	; 0x03
	if(GroupName<=Group_D && GroupName>=Group_A)
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	85 30       	cpi	r24, 0x05	; 5
    1692:	08 f0       	brcs	.+2      	; 0x1696 <DIO_SelectDirectionForPin+0x22>
    1694:	f4 c0       	rjmp	.+488    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	88 23       	and	r24, r24
    169a:	09 f4       	brne	.+2      	; 0x169e <DIO_SelectDirectionForPin+0x2a>
    169c:	f0 c0       	rjmp	.+480    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
	{

		if(PinNumber<=Pin7 && PinNumber>=Pin0)
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	88 30       	cpi	r24, 0x08	; 8
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <DIO_SelectDirectionForPin+0x32>
    16a4:	ec c0       	rjmp	.+472    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
		{


			if(DirectionState==Input)
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	88 23       	and	r24, r24
    16aa:	09 f0       	breq	.+2      	; 0x16ae <DIO_SelectDirectionForPin+0x3a>
    16ac:	75 c0       	rjmp	.+234    	; 0x1798 <DIO_SelectDirectionForPin+0x124>
			{
				switch(GroupName)
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	3f 83       	std	Y+7, r19	; 0x07
    16b6:	2e 83       	std	Y+6, r18	; 0x06
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	9f 81       	ldd	r25, Y+7	; 0x07
    16bc:	82 30       	cpi	r24, 0x02	; 2
    16be:	91 05       	cpc	r25, r1
    16c0:	61 f1       	breq	.+88     	; 0x171a <DIO_SelectDirectionForPin+0xa6>
    16c2:	2e 81       	ldd	r18, Y+6	; 0x06
    16c4:	3f 81       	ldd	r19, Y+7	; 0x07
    16c6:	23 30       	cpi	r18, 0x03	; 3
    16c8:	31 05       	cpc	r19, r1
    16ca:	34 f4       	brge	.+12     	; 0x16d8 <DIO_SelectDirectionForPin+0x64>
    16cc:	8e 81       	ldd	r24, Y+6	; 0x06
    16ce:	9f 81       	ldd	r25, Y+7	; 0x07
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	91 05       	cpc	r25, r1
    16d4:	69 f0       	breq	.+26     	; 0x16f0 <DIO_SelectDirectionForPin+0x7c>
    16d6:	d3 c0       	rjmp	.+422    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
    16d8:	2e 81       	ldd	r18, Y+6	; 0x06
    16da:	3f 81       	ldd	r19, Y+7	; 0x07
    16dc:	23 30       	cpi	r18, 0x03	; 3
    16de:	31 05       	cpc	r19, r1
    16e0:	89 f1       	breq	.+98     	; 0x1744 <DIO_SelectDirectionForPin+0xd0>
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	9f 81       	ldd	r25, Y+7	; 0x07
    16e6:	84 30       	cpi	r24, 0x04	; 4
    16e8:	91 05       	cpc	r25, r1
    16ea:	09 f4       	brne	.+2      	; 0x16ee <DIO_SelectDirectionForPin+0x7a>
    16ec:	40 c0       	rjmp	.+128    	; 0x176e <DIO_SelectDirectionForPin+0xfa>
    16ee:	c7 c0       	rjmp	.+398    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
				{
				case Group_A: ClearBit(DIO_DDRA,PinNumber); break;
    16f0:	aa e3       	ldi	r26, 0x3A	; 58
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ea e3       	ldi	r30, 0x3A	; 58
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_SelectDirectionForPin+0x9a>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_SelectDirectionForPin+0x96>
    1712:	80 95       	com	r24
    1714:	84 23       	and	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	b2 c0       	rjmp	.+356    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
				case Group_B: ClearBit(DIO_DDRB,PinNumber); break;
    171a:	a7 e3       	ldi	r26, 0x37	; 55
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e7 e3       	ldi	r30, 0x37	; 55
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_SelectDirectionForPin+0xc4>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_SelectDirectionForPin+0xc0>
    173c:	80 95       	com	r24
    173e:	84 23       	and	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	9d c0       	rjmp	.+314    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
				case Group_C: ClearBit(DIO_DDRC,PinNumber); break;
    1744:	a4 e3       	ldi	r26, 0x34	; 52
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e4 e3       	ldi	r30, 0x34	; 52
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_SelectDirectionForPin+0xee>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_SelectDirectionForPin+0xea>
    1766:	80 95       	com	r24
    1768:	84 23       	and	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	88 c0       	rjmp	.+272    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
				case Group_D: ClearBit(DIO_DDRD,PinNumber); break;
    176e:	a1 e3       	ldi	r26, 0x31	; 49
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e1 e3       	ldi	r30, 0x31	; 49
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <DIO_SelectDirectionForPin+0x118>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <DIO_SelectDirectionForPin+0x114>
    1790:	80 95       	com	r24
    1792:	84 23       	and	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	73 c0       	rjmp	.+230    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
				}
			}

			else if(DirectionState==Output)
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	09 f0       	breq	.+2      	; 0x17a0 <DIO_SelectDirectionForPin+0x12c>
    179e:	6f c0       	rjmp	.+222    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
			{

				switch(GroupName)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3d 83       	std	Y+5, r19	; 0x05
    17a8:	2c 83       	std	Y+4, r18	; 0x04
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	91 05       	cpc	r25, r1
    17b2:	51 f1       	breq	.+84     	; 0x1808 <DIO_SelectDirectionForPin+0x194>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	23 30       	cpi	r18, 0x03	; 3
    17ba:	31 05       	cpc	r19, r1
    17bc:	34 f4       	brge	.+12     	; 0x17ca <DIO_SelectDirectionForPin+0x156>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	91 05       	cpc	r25, r1
    17c6:	61 f0       	breq	.+24     	; 0x17e0 <DIO_SelectDirectionForPin+0x16c>
    17c8:	5a c0       	rjmp	.+180    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	3d 81       	ldd	r19, Y+5	; 0x05
    17ce:	23 30       	cpi	r18, 0x03	; 3
    17d0:	31 05       	cpc	r19, r1
    17d2:	71 f1       	breq	.+92     	; 0x1830 <DIO_SelectDirectionForPin+0x1bc>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	91 05       	cpc	r25, r1
    17dc:	e9 f1       	breq	.+122    	; 0x1858 <DIO_SelectDirectionForPin+0x1e4>
    17de:	4f c0       	rjmp	.+158    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
				{
				case Group_A: SetBit(DIO_DDRA,PinNumber); break;
    17e0:	aa e3       	ldi	r26, 0x3A	; 58
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	ea e3       	ldi	r30, 0x3A	; 58
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_SelectDirectionForPin+0x18a>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_SelectDirectionForPin+0x186>
    1802:	84 2b       	or	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	3b c0       	rjmp	.+118    	; 0x187e <DIO_SelectDirectionForPin+0x20a>
				case Group_B: SetBit(DIO_DDRB,PinNumber); break;
    1808:	a7 e3       	ldi	r26, 0x37	; 55
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e7 e3       	ldi	r30, 0x37	; 55
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_SelectDirectionForPin+0x1b2>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_SelectDirectionForPin+0x1ae>
    182a:	84 2b       	or	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	27 c0       	rjmp	.+78     	; 0x187e <DIO_SelectDirectionForPin+0x20a>
				case Group_C: SetBit(DIO_DDRC,PinNumber); break;
    1830:	a4 e3       	ldi	r26, 0x34	; 52
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e4 e3       	ldi	r30, 0x34	; 52
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_SelectDirectionForPin+0x1da>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_SelectDirectionForPin+0x1d6>
    1852:	84 2b       	or	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	13 c0       	rjmp	.+38     	; 0x187e <DIO_SelectDirectionForPin+0x20a>
				case Group_D: SetBit(DIO_DDRD,PinNumber); break;
    1858:	a1 e3       	ldi	r26, 0x31	; 49
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e1 e3       	ldi	r30, 0x31	; 49
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <DIO_SelectDirectionForPin+0x202>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <DIO_SelectDirectionForPin+0x1fe>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
		}


	}

}
    187e:	27 96       	adiw	r28, 0x07	; 7
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <DIO_SelectOutputStateForPin>:
/***************************************************************************************/


void DIO_SelectOutputStateForPin(u8 GroupName,u8 PinNumber,u8 OutputState)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	27 97       	sbiw	r28, 0x07	; 7
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	6a 83       	std	Y+2, r22	; 0x02
    18a8:	4b 83       	std	Y+3, r20	; 0x03
	if(GroupName<=Group_D && GroupName>=Group_A)
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	85 30       	cpi	r24, 0x05	; 5
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <DIO_SelectOutputStateForPin+0x22>
    18b0:	f4 c0       	rjmp	.+488    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	88 23       	and	r24, r24
    18b6:	09 f4       	brne	.+2      	; 0x18ba <DIO_SelectOutputStateForPin+0x2a>
    18b8:	f0 c0       	rjmp	.+480    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
	{

		if(PinNumber<=Pin7 && PinNumber>=Pin0)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	88 30       	cpi	r24, 0x08	; 8
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <DIO_SelectOutputStateForPin+0x32>
    18c0:	ec c0       	rjmp	.+472    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
		{
			if(OutputState==High)
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	09 f0       	breq	.+2      	; 0x18ca <DIO_SelectOutputStateForPin+0x3a>
    18c8:	70 c0       	rjmp	.+224    	; 0x19aa <DIO_SelectOutputStateForPin+0x11a>
			{
				switch(GroupName)
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	3f 83       	std	Y+7, r19	; 0x07
    18d2:	2e 83       	std	Y+6, r18	; 0x06
    18d4:	8e 81       	ldd	r24, Y+6	; 0x06
    18d6:	9f 81       	ldd	r25, Y+7	; 0x07
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	91 05       	cpc	r25, r1
    18dc:	51 f1       	breq	.+84     	; 0x1932 <DIO_SelectOutputStateForPin+0xa2>
    18de:	2e 81       	ldd	r18, Y+6	; 0x06
    18e0:	3f 81       	ldd	r19, Y+7	; 0x07
    18e2:	23 30       	cpi	r18, 0x03	; 3
    18e4:	31 05       	cpc	r19, r1
    18e6:	34 f4       	brge	.+12     	; 0x18f4 <DIO_SelectOutputStateForPin+0x64>
    18e8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ea:	9f 81       	ldd	r25, Y+7	; 0x07
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	91 05       	cpc	r25, r1
    18f0:	61 f0       	breq	.+24     	; 0x190a <DIO_SelectOutputStateForPin+0x7a>
    18f2:	d3 c0       	rjmp	.+422    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
    18f4:	2e 81       	ldd	r18, Y+6	; 0x06
    18f6:	3f 81       	ldd	r19, Y+7	; 0x07
    18f8:	23 30       	cpi	r18, 0x03	; 3
    18fa:	31 05       	cpc	r19, r1
    18fc:	71 f1       	breq	.+92     	; 0x195a <DIO_SelectOutputStateForPin+0xca>
    18fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1900:	9f 81       	ldd	r25, Y+7	; 0x07
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	91 05       	cpc	r25, r1
    1906:	e9 f1       	breq	.+122    	; 0x1982 <DIO_SelectOutputStateForPin+0xf2>
    1908:	c8 c0       	rjmp	.+400    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
				{
				case Group_A: SetBit(DIO_PORTA,PinNumber); break;
    190a:	ab e3       	ldi	r26, 0x3B	; 59
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	eb e3       	ldi	r30, 0x3B	; 59
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_SelectOutputStateForPin+0x98>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_SelectOutputStateForPin+0x94>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	b4 c0       	rjmp	.+360    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
				case Group_B: SetBit(DIO_PORTB,PinNumber); break;
    1932:	a8 e3       	ldi	r26, 0x38	; 56
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e8 e3       	ldi	r30, 0x38	; 56
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <DIO_SelectOutputStateForPin+0xc0>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <DIO_SelectOutputStateForPin+0xbc>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	a0 c0       	rjmp	.+320    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
				case Group_C: SetBit(DIO_PORTC,PinNumber); break;
    195a:	a5 e3       	ldi	r26, 0x35	; 53
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e5 e3       	ldi	r30, 0x35	; 53
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_SelectOutputStateForPin+0xe8>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_SelectOutputStateForPin+0xe4>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	8c c0       	rjmp	.+280    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
				case Group_D: SetBit(DIO_PORTD,PinNumber); break;
    1982:	a2 e3       	ldi	r26, 0x32	; 50
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e2 e3       	ldi	r30, 0x32	; 50
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <DIO_SelectOutputStateForPin+0x110>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <DIO_SelectOutputStateForPin+0x10c>
    19a4:	84 2b       	or	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	78 c0       	rjmp	.+240    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
				}

			}
			else if(OutputState==Low)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	88 23       	and	r24, r24
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <DIO_SelectOutputStateForPin+0x122>
    19b0:	74 c0       	rjmp	.+232    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
			{
				switch(GroupName)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3d 83       	std	Y+5, r19	; 0x05
    19ba:	2c 83       	std	Y+4, r18	; 0x04
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	9d 81       	ldd	r25, Y+5	; 0x05
    19c0:	82 30       	cpi	r24, 0x02	; 2
    19c2:	91 05       	cpc	r25, r1
    19c4:	61 f1       	breq	.+88     	; 0x1a1e <DIO_SelectOutputStateForPin+0x18e>
    19c6:	2c 81       	ldd	r18, Y+4	; 0x04
    19c8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ca:	23 30       	cpi	r18, 0x03	; 3
    19cc:	31 05       	cpc	r19, r1
    19ce:	34 f4       	brge	.+12     	; 0x19dc <DIO_SelectOutputStateForPin+0x14c>
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	9d 81       	ldd	r25, Y+5	; 0x05
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	91 05       	cpc	r25, r1
    19d8:	69 f0       	breq	.+26     	; 0x19f4 <DIO_SelectOutputStateForPin+0x164>
    19da:	5f c0       	rjmp	.+190    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
    19dc:	2c 81       	ldd	r18, Y+4	; 0x04
    19de:	3d 81       	ldd	r19, Y+5	; 0x05
    19e0:	23 30       	cpi	r18, 0x03	; 3
    19e2:	31 05       	cpc	r19, r1
    19e4:	89 f1       	breq	.+98     	; 0x1a48 <DIO_SelectOutputStateForPin+0x1b8>
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ea:	84 30       	cpi	r24, 0x04	; 4
    19ec:	91 05       	cpc	r25, r1
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <DIO_SelectOutputStateForPin+0x162>
    19f0:	40 c0       	rjmp	.+128    	; 0x1a72 <DIO_SelectOutputStateForPin+0x1e2>
    19f2:	53 c0       	rjmp	.+166    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
				{
				case Group_A: ClearBit(DIO_PORTA,PinNumber); break;
    19f4:	ab e3       	ldi	r26, 0x3B	; 59
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	eb e3       	ldi	r30, 0x3B	; 59
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <DIO_SelectOutputStateForPin+0x182>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <DIO_SelectOutputStateForPin+0x17e>
    1a16:	80 95       	com	r24
    1a18:	84 23       	and	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	3e c0       	rjmp	.+124    	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
				case Group_B: ClearBit(DIO_PORTB,PinNumber); break;
    1a1e:	a8 e3       	ldi	r26, 0x38	; 56
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e8 e3       	ldi	r30, 0x38	; 56
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_SelectOutputStateForPin+0x1ac>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_SelectOutputStateForPin+0x1a8>
    1a40:	80 95       	com	r24
    1a42:	84 23       	and	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	29 c0       	rjmp	.+82     	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
				case Group_C: ClearBit(DIO_PORTC,PinNumber); break;
    1a48:	a5 e3       	ldi	r26, 0x35	; 53
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e5 e3       	ldi	r30, 0x35	; 53
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_SelectOutputStateForPin+0x1d6>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_SelectOutputStateForPin+0x1d2>
    1a6a:	80 95       	com	r24
    1a6c:	84 23       	and	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <DIO_SelectOutputStateForPin+0x20a>
				case Group_D: ClearBit(DIO_PORTD,PinNumber); break;
    1a72:	a2 e3       	ldi	r26, 0x32	; 50
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e2 e3       	ldi	r30, 0x32	; 50
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <DIO_SelectOutputStateForPin+0x200>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <DIO_SelectOutputStateForPin+0x1fc>
    1a94:	80 95       	com	r24
    1a96:	84 23       	and	r24, r20
    1a98:	8c 93       	st	X, r24
			}
		}

	}

}
    1a9a:	27 96       	adiw	r28, 0x07	; 7
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <DIO_ReadInputValueForPin>:
/*****************************************************************************************/



void DIO_ReadInputValueForPin(u8 GroupName,u8 PinNumber,u8* InputValue)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <DIO_ReadInputValueForPin+0x6>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <DIO_ReadInputValueForPin+0x8>
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <DIO_ReadInputValueForPin+0xa>
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	6a 83       	std	Y+2, r22	; 0x02
    1abe:	5c 83       	std	Y+4, r21	; 0x04
    1ac0:	4b 83       	std	Y+3, r20	; 0x03
	if(GroupName<=Group_D && GroupName>=Group_A)
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	85 30       	cpi	r24, 0x05	; 5
    1ac6:	08 f0       	brcs	.+2      	; 0x1aca <DIO_ReadInputValueForPin+0x1e>
    1ac8:	7d c0       	rjmp	.+250    	; 0x1bc4 <DIO_ReadInputValueForPin+0x118>
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	88 23       	and	r24, r24
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <DIO_ReadInputValueForPin+0x26>
    1ad0:	79 c0       	rjmp	.+242    	; 0x1bc4 <DIO_ReadInputValueForPin+0x118>
	{
		if(PinNumber<=Pin7 && PinNumber>=Pin0)
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	88 30       	cpi	r24, 0x08	; 8
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <DIO_ReadInputValueForPin+0x2e>
    1ad8:	75 c0       	rjmp	.+234    	; 0x1bc4 <DIO_ReadInputValueForPin+0x118>
		{
			if(InputValue!=NULL)
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <DIO_ReadInputValueForPin+0x38>
    1ae2:	70 c0       	rjmp	.+224    	; 0x1bc4 <DIO_ReadInputValueForPin+0x118>
			{
				switch(GroupName)
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	3e 83       	std	Y+6, r19	; 0x06
    1aec:	2d 83       	std	Y+5, r18	; 0x05
    1aee:	4d 81       	ldd	r20, Y+5	; 0x05
    1af0:	5e 81       	ldd	r21, Y+6	; 0x06
    1af2:	42 30       	cpi	r20, 0x02	; 2
    1af4:	51 05       	cpc	r21, r1
    1af6:	59 f1       	breq	.+86     	; 0x1b4e <DIO_ReadInputValueForPin+0xa2>
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	91 05       	cpc	r25, r1
    1b00:	34 f4       	brge	.+12     	; 0x1b0e <DIO_ReadInputValueForPin+0x62>
    1b02:	2d 81       	ldd	r18, Y+5	; 0x05
    1b04:	3e 81       	ldd	r19, Y+6	; 0x06
    1b06:	21 30       	cpi	r18, 0x01	; 1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	69 f0       	breq	.+26     	; 0x1b26 <DIO_ReadInputValueForPin+0x7a>
    1b0c:	5b c0       	rjmp	.+182    	; 0x1bc4 <DIO_ReadInputValueForPin+0x118>
    1b0e:	4d 81       	ldd	r20, Y+5	; 0x05
    1b10:	5e 81       	ldd	r21, Y+6	; 0x06
    1b12:	43 30       	cpi	r20, 0x03	; 3
    1b14:	51 05       	cpc	r21, r1
    1b16:	79 f1       	breq	.+94     	; 0x1b76 <DIO_ReadInputValueForPin+0xca>
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	91 05       	cpc	r25, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <DIO_ReadInputValueForPin+0x78>
    1b22:	3d c0       	rjmp	.+122    	; 0x1b9e <DIO_ReadInputValueForPin+0xf2>
    1b24:	4f c0       	rjmp	.+158    	; 0x1bc4 <DIO_ReadInputValueForPin+0x118>
				{
				case Group_A: *InputValue=GetBit(DIO_PINA,PinNumber); break;
    1b26:	e9 e3       	ldi	r30, 0x39	; 57
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a9 01       	movw	r20, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <DIO_ReadInputValueForPin+0x92>
    1b3a:	55 95       	asr	r21
    1b3c:	47 95       	ror	r20
    1b3e:	8a 95       	dec	r24
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <DIO_ReadInputValueForPin+0x8e>
    1b42:	ca 01       	movw	r24, r20
    1b44:	81 70       	andi	r24, 0x01	; 1
    1b46:	eb 81       	ldd	r30, Y+3	; 0x03
    1b48:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4a:	80 83       	st	Z, r24
    1b4c:	3b c0       	rjmp	.+118    	; 0x1bc4 <DIO_ReadInputValueForPin+0x118>
				case Group_B: *InputValue=GetBit(DIO_PINB,PinNumber); break;
    1b4e:	e6 e3       	ldi	r30, 0x36	; 54
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a9 01       	movw	r20, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <DIO_ReadInputValueForPin+0xba>
    1b62:	55 95       	asr	r21
    1b64:	47 95       	ror	r20
    1b66:	8a 95       	dec	r24
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <DIO_ReadInputValueForPin+0xb6>
    1b6a:	ca 01       	movw	r24, r20
    1b6c:	81 70       	andi	r24, 0x01	; 1
    1b6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b70:	fc 81       	ldd	r31, Y+4	; 0x04
    1b72:	80 83       	st	Z, r24
    1b74:	27 c0       	rjmp	.+78     	; 0x1bc4 <DIO_ReadInputValueForPin+0x118>
				case Group_C: *InputValue=GetBit(DIO_PINC,PinNumber); break;
    1b76:	e3 e3       	ldi	r30, 0x33	; 51
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a9 01       	movw	r20, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_ReadInputValueForPin+0xe2>
    1b8a:	55 95       	asr	r21
    1b8c:	47 95       	ror	r20
    1b8e:	8a 95       	dec	r24
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_ReadInputValueForPin+0xde>
    1b92:	ca 01       	movw	r24, r20
    1b94:	81 70       	andi	r24, 0x01	; 1
    1b96:	eb 81       	ldd	r30, Y+3	; 0x03
    1b98:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9a:	80 83       	st	Z, r24
    1b9c:	13 c0       	rjmp	.+38     	; 0x1bc4 <DIO_ReadInputValueForPin+0x118>
				case Group_D: *InputValue=GetBit(DIO_PIND,PinNumber); break;
    1b9e:	e0 e3       	ldi	r30, 0x30	; 48
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	88 2f       	mov	r24, r24
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a9 01       	movw	r20, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <DIO_ReadInputValueForPin+0x10a>
    1bb2:	55 95       	asr	r21
    1bb4:	47 95       	ror	r20
    1bb6:	8a 95       	dec	r24
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <DIO_ReadInputValueForPin+0x106>
    1bba:	ca 01       	movw	r24, r20
    1bbc:	81 70       	andi	r24, 0x01	; 1
    1bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc2:	80 83       	st	Z, r24
		}

	}


}
    1bc4:	26 96       	adiw	r28, 0x06	; 6
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <DIO_SelectDirectionForGroup>:

/**************************************************************************************/


void DIO_SelectDirectionForGroup(u8 GroupName,u8 DirectionState)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <DIO_SelectDirectionForGroup+0x6>
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <DIO_SelectDirectionForGroup+0x8>
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	6a 83       	std	Y+2, r22	; 0x02
	if(GroupName<=Group_D && GroupName>=Group_A)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	85 30       	cpi	r24, 0x05	; 5
    1bea:	b0 f5       	brcc	.+108    	; 0x1c58 <DIO_SelectDirectionForGroup+0x82>
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	88 23       	and	r24, r24
    1bf0:	99 f1       	breq	.+102    	; 0x1c58 <DIO_SelectDirectionForGroup+0x82>
	{
		if(DirectionState<=255 && DirectionState>=0)
		{
			switch(GroupName)
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	3c 83       	std	Y+4, r19	; 0x04
    1bfa:	2b 83       	std	Y+3, r18	; 0x03
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	82 30       	cpi	r24, 0x02	; 2
    1c02:	91 05       	cpc	r25, r1
    1c04:	d9 f0       	breq	.+54     	; 0x1c3c <DIO_SelectDirectionForGroup+0x66>
    1c06:	2b 81       	ldd	r18, Y+3	; 0x03
    1c08:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0a:	23 30       	cpi	r18, 0x03	; 3
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	34 f4       	brge	.+12     	; 0x1c1c <DIO_SelectDirectionForGroup+0x46>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	91 05       	cpc	r25, r1
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <DIO_SelectDirectionForGroup+0x5c>
    1c1a:	1e c0       	rjmp	.+60     	; 0x1c58 <DIO_SelectDirectionForGroup+0x82>
    1c1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c20:	23 30       	cpi	r18, 0x03	; 3
    1c22:	31 05       	cpc	r19, r1
    1c24:	81 f0       	breq	.+32     	; 0x1c46 <DIO_SelectDirectionForGroup+0x70>
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	84 30       	cpi	r24, 0x04	; 4
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <DIO_SelectDirectionForGroup+0x7a>
    1c30:	13 c0       	rjmp	.+38     	; 0x1c58 <DIO_SelectDirectionForGroup+0x82>
			{
			case Group_A: DIO_DDRA=DirectionState;break;
    1c32:	ea e3       	ldi	r30, 0x3A	; 58
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	80 83       	st	Z, r24
    1c3a:	0e c0       	rjmp	.+28     	; 0x1c58 <DIO_SelectDirectionForGroup+0x82>
			case Group_B: DIO_DDRB=DirectionState;break;
    1c3c:	e7 e3       	ldi	r30, 0x37	; 55
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	80 83       	st	Z, r24
    1c44:	09 c0       	rjmp	.+18     	; 0x1c58 <DIO_SelectDirectionForGroup+0x82>
			case Group_C: DIO_DDRC=DirectionState;break;
    1c46:	e4 e3       	ldi	r30, 0x34	; 52
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	80 83       	st	Z, r24
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <DIO_SelectDirectionForGroup+0x82>
			case Group_D: DIO_DDRD=DirectionState;break;
    1c50:	e1 e3       	ldi	r30, 0x31	; 49
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	80 83       	st	Z, r24
			}
		}
	}
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <DIO_SelectOutputStateForGroup>:
/**************************************************************************************/

void DIO_SelectOutputStateForGroup(u8 GroupName,u8 OutputState)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <DIO_SelectOutputStateForGroup+0x6>
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <DIO_SelectOutputStateForGroup+0x8>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	6a 83       	std	Y+2, r22	; 0x02
	if(GroupName<=Group_D && GroupName>=Group_A)
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	85 30       	cpi	r24, 0x05	; 5
    1c7a:	b0 f5       	brcc	.+108    	; 0x1ce8 <DIO_SelectOutputStateForGroup+0x82>
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	88 23       	and	r24, r24
    1c80:	99 f1       	breq	.+102    	; 0x1ce8 <DIO_SelectOutputStateForGroup+0x82>
	{
		if(OutputState<=255 && OutputState>=0)
		{
			switch(GroupName)
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	3c 83       	std	Y+4, r19	; 0x04
    1c8a:	2b 83       	std	Y+3, r18	; 0x03
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	82 30       	cpi	r24, 0x02	; 2
    1c92:	91 05       	cpc	r25, r1
    1c94:	d9 f0       	breq	.+54     	; 0x1ccc <DIO_SelectOutputStateForGroup+0x66>
    1c96:	2b 81       	ldd	r18, Y+3	; 0x03
    1c98:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9a:	23 30       	cpi	r18, 0x03	; 3
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	34 f4       	brge	.+12     	; 0x1cac <DIO_SelectOutputStateForGroup+0x46>
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	61 f0       	breq	.+24     	; 0x1cc2 <DIO_SelectOutputStateForGroup+0x5c>
    1caa:	1e c0       	rjmp	.+60     	; 0x1ce8 <DIO_SelectOutputStateForGroup+0x82>
    1cac:	2b 81       	ldd	r18, Y+3	; 0x03
    1cae:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb0:	23 30       	cpi	r18, 0x03	; 3
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	81 f0       	breq	.+32     	; 0x1cd6 <DIO_SelectOutputStateForGroup+0x70>
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	81 f0       	breq	.+32     	; 0x1ce0 <DIO_SelectOutputStateForGroup+0x7a>
    1cc0:	13 c0       	rjmp	.+38     	; 0x1ce8 <DIO_SelectOutputStateForGroup+0x82>
			{
			case Group_A: DIO_PORTA=OutputState;break;
    1cc2:	eb e3       	ldi	r30, 0x3B	; 59
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	80 83       	st	Z, r24
    1cca:	0e c0       	rjmp	.+28     	; 0x1ce8 <DIO_SelectOutputStateForGroup+0x82>
			case Group_B: DIO_PORTB=OutputState;break;
    1ccc:	e8 e3       	ldi	r30, 0x38	; 56
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	80 83       	st	Z, r24
    1cd4:	09 c0       	rjmp	.+18     	; 0x1ce8 <DIO_SelectOutputStateForGroup+0x82>
			case Group_C: DIO_PORTC=OutputState;break;
    1cd6:	e5 e3       	ldi	r30, 0x35	; 53
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	80 83       	st	Z, r24
    1cde:	04 c0       	rjmp	.+8      	; 0x1ce8 <DIO_SelectOutputStateForGroup+0x82>
			case Group_D: DIO_PORTD=OutputState;break;
    1ce0:	e2 e3       	ldi	r30, 0x32	; 50
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	80 83       	st	Z, r24
			}
		}
	}
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <DIO_ReadInputValueForGroup>:

/****************************************************************************************/

void DIO_ReadInputValueForGroup(u8 GroupName,u8* InputValue)
{
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <DIO_ReadInputValueForGroup+0x6>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <DIO_ReadInputValueForGroup+0x8>
    1cfe:	0f 92       	push	r0
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	7b 83       	std	Y+3, r23	; 0x03
    1d08:	6a 83       	std	Y+2, r22	; 0x02
	if(GroupName<=Group_D && GroupName>=Group_A)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	85 30       	cpi	r24, 0x05	; 5
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <DIO_ReadInputValueForGroup+0x1c>
    1d10:	43 c0       	rjmp	.+134    	; 0x1d98 <DIO_ReadInputValueForGroup+0xa2>
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	88 23       	and	r24, r24
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <DIO_ReadInputValueForGroup+0x24>
    1d18:	3f c0       	rjmp	.+126    	; 0x1d98 <DIO_ReadInputValueForGroup+0xa2>
	{
		if(InputValue!=NULL)
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	d9 f1       	breq	.+118    	; 0x1d98 <DIO_ReadInputValueForGroup+0xa2>
		{
			switch(GroupName)
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	3d 83       	std	Y+5, r19	; 0x05
    1d2a:	2c 83       	std	Y+4, r18	; 0x04
    1d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	91 05       	cpc	r25, r1
    1d34:	e9 f0       	breq	.+58     	; 0x1d70 <DIO_ReadInputValueForGroup+0x7a>
    1d36:	2c 81       	ldd	r18, Y+4	; 0x04
    1d38:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3a:	23 30       	cpi	r18, 0x03	; 3
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	34 f4       	brge	.+12     	; 0x1d4c <DIO_ReadInputValueForGroup+0x56>
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	9d 81       	ldd	r25, Y+5	; 0x05
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	91 05       	cpc	r25, r1
    1d48:	61 f0       	breq	.+24     	; 0x1d62 <DIO_ReadInputValueForGroup+0x6c>
    1d4a:	26 c0       	rjmp	.+76     	; 0x1d98 <DIO_ReadInputValueForGroup+0xa2>
    1d4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d50:	23 30       	cpi	r18, 0x03	; 3
    1d52:	31 05       	cpc	r19, r1
    1d54:	a1 f0       	breq	.+40     	; 0x1d7e <DIO_ReadInputValueForGroup+0x88>
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5a:	84 30       	cpi	r24, 0x04	; 4
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	b1 f0       	breq	.+44     	; 0x1d8c <DIO_ReadInputValueForGroup+0x96>
    1d60:	1b c0       	rjmp	.+54     	; 0x1d98 <DIO_ReadInputValueForGroup+0xa2>
			{
			case Group_A: *InputValue=DIO_PINA;break;
    1d62:	e9 e3       	ldi	r30, 0x39	; 57
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6c:	80 83       	st	Z, r24
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <DIO_ReadInputValueForGroup+0xa2>
			case Group_B: *InputValue=DIO_PINB;break;
    1d70:	e6 e3       	ldi	r30, 0x36	; 54
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	ea 81       	ldd	r30, Y+2	; 0x02
    1d78:	fb 81       	ldd	r31, Y+3	; 0x03
    1d7a:	80 83       	st	Z, r24
    1d7c:	0d c0       	rjmp	.+26     	; 0x1d98 <DIO_ReadInputValueForGroup+0xa2>
			case Group_C: *InputValue=DIO_PINC;break;
    1d7e:	e3 e3       	ldi	r30, 0x33	; 51
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	ea 81       	ldd	r30, Y+2	; 0x02
    1d86:	fb 81       	ldd	r31, Y+3	; 0x03
    1d88:	80 83       	st	Z, r24
    1d8a:	06 c0       	rjmp	.+12     	; 0x1d98 <DIO_ReadInputValueForGroup+0xa2>
			case Group_D: *InputValue=DIO_PIND;break;
    1d8c:	e0 e3       	ldi	r30, 0x30	; 48
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	ea 81       	ldd	r30, Y+2	; 0x02
    1d94:	fb 81       	ldd	r31, Y+3	; 0x03
    1d96:	80 83       	st	Z, r24
			}
		}
	}
}
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <DIO_ControlInternalPullUpForPin>:

/*****************************************************************************************/

void DIO_ControlInternalPullUpForPin(u8 GroupName,u8 PinNumber,u8 State)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <DIO_ControlInternalPullUpForPin+0x6>
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	6a 83       	std	Y+2, r22	; 0x02
    1db8:	4b 83       	std	Y+3, r20	; 0x03
	if(State==Enable)
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	59 f4       	brne	.+22     	; 0x1dd6 <DIO_ControlInternalPullUpForPin+0x2e>
	{
		DIO_SelectDirectionForPin(GroupName,PinNumber,Input);
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	6a 81       	ldd	r22, Y+2	; 0x02
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
		DIO_SelectOutputStateForPin(GroupName,PinNumber,High);
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	6a 81       	ldd	r22, Y+2	; 0x02
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
    1dd4:	0d c0       	rjmp	.+26     	; 0x1df0 <DIO_ControlInternalPullUpForPin+0x48>
	}
	else if(State==Disable)
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	88 23       	and	r24, r24
    1dda:	51 f4       	brne	.+20     	; 0x1df0 <DIO_ControlInternalPullUpForPin+0x48>
	{
		DIO_SelectDirectionForPin(GroupName,PinNumber,Input);
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	6a 81       	ldd	r22, Y+2	; 0x02
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
		DIO_SelectOutputStateForPin(GroupName,PinNumber,Low);
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	6a 81       	ldd	r22, Y+2	; 0x02
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	}
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <DIO_ControlInternalPullUpForGroup>:

/********************************************************************/

void DIO_ControlInternalPullUpForGroup(u8 GroupName,u8 State)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <DIO_ControlInternalPullUpForGroup+0x6>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	6a 83       	std	Y+2, r22	; 0x02
	if(State<=255 && State>=0)
	{
		DIO_SelectDirectionForGroup(GroupName,State);
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	6a 81       	ldd	r22, Y+2	; 0x02
    1e0e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <DIO_SelectDirectionForGroup>
		DIO_SelectOutputStateForGroup(GroupName,~State);
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	98 2f       	mov	r25, r24
    1e16:	90 95       	com	r25
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	69 2f       	mov	r22, r25
    1e1c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <DIO_SelectOutputStateForGroup>
	}
}
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <DIO_ToggleForPin>:
/*********************************************************************************/


void DIO_ToggleForPin(u8 GroupName,u8 PinNumber)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <DIO_ToggleForPin+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <DIO_ToggleForPin+0x8>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	6a 83       	std	Y+2, r22	; 0x02
	if(GroupName<=Group_D && GroupName>=Group_A)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	85 30       	cpi	r24, 0x05	; 5
    1e3e:	08 f0       	brcs	.+2      	; 0x1e42 <DIO_ToggleForPin+0x18>
    1e40:	77 c0       	rjmp	.+238    	; 0x1f30 <DIO_ToggleForPin+0x106>
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	88 23       	and	r24, r24
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <DIO_ToggleForPin+0x20>
    1e48:	73 c0       	rjmp	.+230    	; 0x1f30 <DIO_ToggleForPin+0x106>
	{
		if(PinNumber<=Pin7 && PinNumber>=Pin0)
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	88 30       	cpi	r24, 0x08	; 8
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <DIO_ToggleForPin+0x28>
    1e50:	6f c0       	rjmp	.+222    	; 0x1f30 <DIO_ToggleForPin+0x106>
		{
			switch(GroupName)
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	3c 83       	std	Y+4, r19	; 0x04
    1e5a:	2b 83       	std	Y+3, r18	; 0x03
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	82 30       	cpi	r24, 0x02	; 2
    1e62:	91 05       	cpc	r25, r1
    1e64:	51 f1       	breq	.+84     	; 0x1eba <DIO_ToggleForPin+0x90>
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	23 30       	cpi	r18, 0x03	; 3
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	34 f4       	brge	.+12     	; 0x1e7c <DIO_ToggleForPin+0x52>
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	91 05       	cpc	r25, r1
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <DIO_ToggleForPin+0x68>
    1e7a:	5a c0       	rjmp	.+180    	; 0x1f30 <DIO_ToggleForPin+0x106>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	23 30       	cpi	r18, 0x03	; 3
    1e82:	31 05       	cpc	r19, r1
    1e84:	71 f1       	breq	.+92     	; 0x1ee2 <DIO_ToggleForPin+0xb8>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	84 30       	cpi	r24, 0x04	; 4
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	e9 f1       	breq	.+122    	; 0x1f0a <DIO_ToggleForPin+0xe0>
    1e90:	4f c0       	rjmp	.+158    	; 0x1f30 <DIO_ToggleForPin+0x106>
			{
			case Group_A: ToggleBit(DIO_PORTA,PinNumber); break;
    1e92:	ab e3       	ldi	r26, 0x3B	; 59
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	eb e3       	ldi	r30, 0x3B	; 59
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <DIO_ToggleForPin+0x86>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <DIO_ToggleForPin+0x82>
    1eb4:	84 27       	eor	r24, r20
    1eb6:	8c 93       	st	X, r24
    1eb8:	3b c0       	rjmp	.+118    	; 0x1f30 <DIO_ToggleForPin+0x106>
			case Group_B: ToggleBit(DIO_PORTB,PinNumber); break;
    1eba:	a8 e3       	ldi	r26, 0x38	; 56
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e8 e3       	ldi	r30, 0x38	; 56
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 2e       	mov	r0, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <DIO_ToggleForPin+0xae>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <DIO_ToggleForPin+0xaa>
    1edc:	84 27       	eor	r24, r20
    1ede:	8c 93       	st	X, r24
    1ee0:	27 c0       	rjmp	.+78     	; 0x1f30 <DIO_ToggleForPin+0x106>
			case Group_C: ToggleBit(DIO_PORTC,PinNumber); break;
    1ee2:	a5 e3       	ldi	r26, 0x35	; 53
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e5 e3       	ldi	r30, 0x35	; 53
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	48 2f       	mov	r20, r24
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 2e       	mov	r0, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <DIO_ToggleForPin+0xd6>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	0a 94       	dec	r0
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <DIO_ToggleForPin+0xd2>
    1f04:	84 27       	eor	r24, r20
    1f06:	8c 93       	st	X, r24
    1f08:	13 c0       	rjmp	.+38     	; 0x1f30 <DIO_ToggleForPin+0x106>
			case Group_D: ToggleBit(DIO_PORTC,PinNumber); break;
    1f0a:	a5 e3       	ldi	r26, 0x35	; 53
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e5 e3       	ldi	r30, 0x35	; 53
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	48 2f       	mov	r20, r24
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	02 2e       	mov	r0, r18
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <DIO_ToggleForPin+0xfe>
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	0a 94       	dec	r0
    1f2a:	e2 f7       	brpl	.-8      	; 0x1f24 <DIO_ToggleForPin+0xfa>
    1f2c:	84 27       	eor	r24, r20
    1f2e:	8c 93       	st	X, r24

			}
		}
	}

}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <DIO_ToggleForGroup>:
/***************************************************************************************/
void DIO_ToggleForGroup(u8 GroupName)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <DIO_ToggleForGroup+0x6>
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	89 83       	std	Y+1, r24	; 0x01
	if(GroupName<=Group_D && GroupName>=Group_A)
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	85 30       	cpi	r24, 0x05	; 5
    1f50:	08 f0       	brcs	.+2      	; 0x1f54 <DIO_ToggleForGroup+0x16>
    1f52:	43 c0       	rjmp	.+134    	; 0x1fda <DIO_ToggleForGroup+0x9c>
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	88 23       	and	r24, r24
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <DIO_ToggleForGroup+0x1e>
    1f5a:	3f c0       	rjmp	.+126    	; 0x1fda <DIO_ToggleForGroup+0x9c>
	{
		switch(GroupName)
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	3b 83       	std	Y+3, r19	; 0x03
    1f64:	2a 83       	std	Y+2, r18	; 0x02
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6a:	82 30       	cpi	r24, 0x02	; 2
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	f1 f0       	breq	.+60     	; 0x1fac <DIO_ToggleForGroup+0x6e>
    1f70:	2a 81       	ldd	r18, Y+2	; 0x02
    1f72:	3b 81       	ldd	r19, Y+3	; 0x03
    1f74:	23 30       	cpi	r18, 0x03	; 3
    1f76:	31 05       	cpc	r19, r1
    1f78:	34 f4       	brge	.+12     	; 0x1f86 <DIO_ToggleForGroup+0x48>
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	91 05       	cpc	r25, r1
    1f82:	61 f0       	breq	.+24     	; 0x1f9c <DIO_ToggleForGroup+0x5e>
    1f84:	2a c0       	rjmp	.+84     	; 0x1fda <DIO_ToggleForGroup+0x9c>
    1f86:	2a 81       	ldd	r18, Y+2	; 0x02
    1f88:	3b 81       	ldd	r19, Y+3	; 0x03
    1f8a:	23 30       	cpi	r18, 0x03	; 3
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	b1 f0       	breq	.+44     	; 0x1fbc <DIO_ToggleForGroup+0x7e>
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	9b 81       	ldd	r25, Y+3	; 0x03
    1f94:	84 30       	cpi	r24, 0x04	; 4
    1f96:	91 05       	cpc	r25, r1
    1f98:	c9 f0       	breq	.+50     	; 0x1fcc <DIO_ToggleForGroup+0x8e>
    1f9a:	1f c0       	rjmp	.+62     	; 0x1fda <DIO_ToggleForGroup+0x9c>
		{
		  case Group_A:DIO_PORTA= ~DIO_PORTA; break;
    1f9c:	ab e3       	ldi	r26, 0x3B	; 59
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	eb e3       	ldi	r30, 0x3B	; 59
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	80 95       	com	r24
    1fa8:	8c 93       	st	X, r24
    1faa:	17 c0       	rjmp	.+46     	; 0x1fda <DIO_ToggleForGroup+0x9c>
		  case Group_B:DIO_PORTB= ~DIO_PORTB; break;
    1fac:	a8 e3       	ldi	r26, 0x38	; 56
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e8 e3       	ldi	r30, 0x38	; 56
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 95       	com	r24
    1fb8:	8c 93       	st	X, r24
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <DIO_ToggleForGroup+0x9c>
		  case Group_C:DIO_PORTC= ~DIO_PORTC; break;
    1fbc:	a5 e3       	ldi	r26, 0x35	; 53
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e5 e3       	ldi	r30, 0x35	; 53
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 95       	com	r24
    1fc8:	8c 93       	st	X, r24
    1fca:	07 c0       	rjmp	.+14     	; 0x1fda <DIO_ToggleForGroup+0x9c>
		  case Group_D:DIO_PORTD= ~DIO_PORTC; break;
    1fcc:	a2 e3       	ldi	r26, 0x32	; 50
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e5 e3       	ldi	r30, 0x35	; 53
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	80 95       	com	r24
    1fd8:	8c 93       	st	X, r24
		}
	}
}
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <Ultrasonic_Init>:
static void Func_ICU();
static void TMR_OVR();

void Ultrasonic_Init()

{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
	Servo_Init();
    1fee:	0e 94 44 12 	call	0x2488	; 0x2488 <Servo_Init>
	DIO_SelectDirectionForPin(Group_B,Pin0,Output);
    1ff2:	82 e0       	ldi	r24, 0x02	; 2
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
	T1_ICU_SetCallBack(Func_ICU);
    1ffc:	84 ef       	ldi	r24, 0xF4	; 244
    1ffe:	91 e1       	ldi	r25, 0x11	; 17
    2000:	0e 94 df 08 	call	0x11be	; 0x11be <T1_ICU_SetCallBack>
	T1_SetCallBack_COMPA(TMR_OVR);
    2004:	84 e3       	ldi	r24, 0x34	; 52
    2006:	92 e1       	ldi	r25, 0x12	; 18
    2008:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <T1_SetCallBack_COMPA>


}
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <UltrasonicReadDistance>:
u16 UltrasonicReadDistance()
{
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	e3 97       	sbiw	r28, 0x33	; 51
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
	u8 distance=0;
    202a:	1b aa       	std	Y+51, r1	; 0x33
	u16 time=0;
    202c:	1a aa       	std	Y+50, r1	; 0x32
    202e:	19 aa       	std	Y+49, r1	; 0x31
	c=0;
    2030:	10 92 7e 00 	sts	0x007E, r1
    2034:	10 92 7d 00 	sts	0x007D, r1
	uflag=0;
    2038:	10 92 7c 00 	sts	0x007C, r1
    203c:	10 92 7b 00 	sts	0x007B, r1
	T1_TCNT1=0;
    2040:	ec e4       	ldi	r30, 0x4C	; 76
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	11 82       	std	Z+1, r1	; 0x01
    2046:	10 82       	st	Z, r1

	DIO_SelectOutputStateForPin(Group_B,Pin0,Low);
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	b0 e4       	ldi	r27, 0x40	; 64
    205a:	8d a7       	std	Y+45, r24	; 0x2d
    205c:	9e a7       	std	Y+46, r25	; 0x2e
    205e:	af a7       	std	Y+47, r26	; 0x2f
    2060:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2062:	6d a5       	ldd	r22, Y+45	; 0x2d
    2064:	7e a5       	ldd	r23, Y+46	; 0x2e
    2066:	8f a5       	ldd	r24, Y+47	; 0x2f
    2068:	98 a9       	ldd	r25, Y+48	; 0x30
    206a:	2b ea       	ldi	r18, 0xAB	; 171
    206c:	3a ea       	ldi	r19, 0xAA	; 170
    206e:	4a e2       	ldi	r20, 0x2A	; 42
    2070:	50 e4       	ldi	r21, 0x40	; 64
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	89 a7       	std	Y+41, r24	; 0x29
    207c:	9a a7       	std	Y+42, r25	; 0x2a
    207e:	ab a7       	std	Y+43, r26	; 0x2b
    2080:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2082:	69 a5       	ldd	r22, Y+41	; 0x29
    2084:	7a a5       	ldd	r23, Y+42	; 0x2a
    2086:	8b a5       	ldd	r24, Y+43	; 0x2b
    2088:	9c a5       	ldd	r25, Y+44	; 0x2c
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	1c f4       	brge	.+6      	; 0x20a0 <UltrasonicReadDistance+0x8e>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	88 a7       	std	Y+40, r24	; 0x28
    209e:	91 c0       	rjmp	.+290    	; 0x21c2 <UltrasonicReadDistance+0x1b0>
	else if (__tmp > 255)
    20a0:	69 a5       	ldd	r22, Y+41	; 0x29
    20a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    20a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	53 e4       	ldi	r21, 0x43	; 67
    20b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	0c f0       	brlt	.+2      	; 0x20ba <UltrasonicReadDistance+0xa8>
    20b8:	7b c0       	rjmp	.+246    	; 0x21b0 <UltrasonicReadDistance+0x19e>
	{
		_delay_ms(__us / 1000.0);
    20ba:	6d a5       	ldd	r22, Y+45	; 0x2d
    20bc:	7e a5       	ldd	r23, Y+46	; 0x2e
    20be:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c0:	98 a9       	ldd	r25, Y+48	; 0x30
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	4a e7       	ldi	r20, 0x7A	; 122
    20c8:	54 e4       	ldi	r21, 0x44	; 68
    20ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	8c a3       	std	Y+36, r24	; 0x24
    20d4:	9d a3       	std	Y+37, r25	; 0x25
    20d6:	ae a3       	std	Y+38, r26	; 0x26
    20d8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20da:	6c a1       	ldd	r22, Y+36	; 0x24
    20dc:	7d a1       	ldd	r23, Y+37	; 0x25
    20de:	8e a1       	ldd	r24, Y+38	; 0x26
    20e0:	9f a1       	ldd	r25, Y+39	; 0x27
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a ef       	ldi	r20, 0xFA	; 250
    20e8:	54 e4       	ldi	r21, 0x44	; 68
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	88 a3       	std	Y+32, r24	; 0x20
    20f4:	99 a3       	std	Y+33, r25	; 0x21
    20f6:	aa a3       	std	Y+34, r26	; 0x22
    20f8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    20fa:	68 a1       	ldd	r22, Y+32	; 0x20
    20fc:	79 a1       	ldd	r23, Y+33	; 0x21
    20fe:	8a a1       	ldd	r24, Y+34	; 0x22
    2100:	9b a1       	ldd	r25, Y+35	; 0x23
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <UltrasonicReadDistance+0x10a>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9f 8f       	std	Y+31, r25	; 0x1f
    2118:	8e 8f       	std	Y+30, r24	; 0x1e
    211a:	3f c0       	rjmp	.+126    	; 0x219a <UltrasonicReadDistance+0x188>
	else if (__tmp > 65535)
    211c:	68 a1       	ldd	r22, Y+32	; 0x20
    211e:	79 a1       	ldd	r23, Y+33	; 0x21
    2120:	8a a1       	ldd	r24, Y+34	; 0x22
    2122:	9b a1       	ldd	r25, Y+35	; 0x23
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	4c f5       	brge	.+82     	; 0x2186 <UltrasonicReadDistance+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2134:	6c a1       	ldd	r22, Y+36	; 0x24
    2136:	7d a1       	ldd	r23, Y+37	; 0x25
    2138:	8e a1       	ldd	r24, Y+38	; 0x26
    213a:	9f a1       	ldd	r25, Y+39	; 0x27
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e2       	ldi	r20, 0x20	; 32
    2142:	51 e4       	ldi	r21, 0x41	; 65
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9f 8f       	std	Y+31, r25	; 0x1f
    215a:	8e 8f       	std	Y+30, r24	; 0x1e
    215c:	0f c0       	rjmp	.+30     	; 0x217c <UltrasonicReadDistance+0x16a>
    215e:	88 ec       	ldi	r24, 0xC8	; 200
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9d 8f       	std	Y+29, r25	; 0x1d
    2164:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2166:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2168:	9d 8d       	ldd	r25, Y+29	; 0x1d
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <UltrasonicReadDistance+0x158>
    216e:	9d 8f       	std	Y+29, r25	; 0x1d
    2170:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2174:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9f 8f       	std	Y+31, r25	; 0x1f
    217a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    217e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	69 f7       	brne	.-38     	; 0x215e <UltrasonicReadDistance+0x14c>
    2184:	24 c0       	rjmp	.+72     	; 0x21ce <UltrasonicReadDistance+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	68 a1       	ldd	r22, Y+32	; 0x20
    2188:	79 a1       	ldd	r23, Y+33	; 0x21
    218a:	8a a1       	ldd	r24, Y+34	; 0x22
    218c:	9b a1       	ldd	r25, Y+35	; 0x23
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9f 8f       	std	Y+31, r25	; 0x1f
    2198:	8e 8f       	std	Y+30, r24	; 0x1e
    219a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    219c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    219e:	9b 8f       	std	Y+27, r25	; 0x1b
    21a0:	8a 8f       	std	Y+26, r24	; 0x1a
    21a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <UltrasonicReadDistance+0x194>
    21aa:	9b 8f       	std	Y+27, r25	; 0x1b
    21ac:	8a 8f       	std	Y+26, r24	; 0x1a
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <UltrasonicReadDistance+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21b0:	69 a5       	ldd	r22, Y+41	; 0x29
    21b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    21b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	88 a7       	std	Y+40, r24	; 0x28
    21c2:	88 a5       	ldd	r24, Y+40	; 0x28
    21c4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21c6:	89 8d       	ldd	r24, Y+25	; 0x19
    21c8:	8a 95       	dec	r24
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <UltrasonicReadDistance+0x1b6>
    21cc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	DIO_SelectOutputStateForPin(Group_B,Pin0,High);
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e2       	ldi	r26, 0x20	; 32
    21de:	b1 e4       	ldi	r27, 0x41	; 65
    21e0:	8d 8b       	std	Y+21, r24	; 0x15
    21e2:	9e 8b       	std	Y+22, r25	; 0x16
    21e4:	af 8b       	std	Y+23, r26	; 0x17
    21e6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21e8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ea:	7e 89       	ldd	r23, Y+22	; 0x16
    21ec:	8f 89       	ldd	r24, Y+23	; 0x17
    21ee:	98 8d       	ldd	r25, Y+24	; 0x18
    21f0:	2b ea       	ldi	r18, 0xAB	; 171
    21f2:	3a ea       	ldi	r19, 0xAA	; 170
    21f4:	4a e2       	ldi	r20, 0x2A	; 42
    21f6:	50 e4       	ldi	r21, 0x40	; 64
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	89 8b       	std	Y+17, r24	; 0x11
    2202:	9a 8b       	std	Y+18, r25	; 0x12
    2204:	ab 8b       	std	Y+19, r26	; 0x13
    2206:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2208:	69 89       	ldd	r22, Y+17	; 0x11
    220a:	7a 89       	ldd	r23, Y+18	; 0x12
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	1c f4       	brge	.+6      	; 0x2226 <UltrasonicReadDistance+0x214>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	88 8b       	std	Y+16, r24	; 0x10
    2224:	91 c0       	rjmp	.+290    	; 0x2348 <UltrasonicReadDistance+0x336>
	else if (__tmp > 255)
    2226:	69 89       	ldd	r22, Y+17	; 0x11
    2228:	7a 89       	ldd	r23, Y+18	; 0x12
    222a:	8b 89       	ldd	r24, Y+19	; 0x13
    222c:	9c 89       	ldd	r25, Y+20	; 0x14
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	53 e4       	ldi	r21, 0x43	; 67
    2236:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	0c f0       	brlt	.+2      	; 0x2240 <UltrasonicReadDistance+0x22e>
    223e:	7b c0       	rjmp	.+246    	; 0x2336 <UltrasonicReadDistance+0x324>
	{
		_delay_ms(__us / 1000.0);
    2240:	6d 89       	ldd	r22, Y+21	; 0x15
    2242:	7e 89       	ldd	r23, Y+22	; 0x16
    2244:	8f 89       	ldd	r24, Y+23	; 0x17
    2246:	98 8d       	ldd	r25, Y+24	; 0x18
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4a e7       	ldi	r20, 0x7A	; 122
    224e:	54 e4       	ldi	r21, 0x44	; 68
    2250:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8c 87       	std	Y+12, r24	; 0x0c
    225a:	9d 87       	std	Y+13, r25	; 0x0d
    225c:	ae 87       	std	Y+14, r26	; 0x0e
    225e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2260:	6c 85       	ldd	r22, Y+12	; 0x0c
    2262:	7d 85       	ldd	r23, Y+13	; 0x0d
    2264:	8e 85       	ldd	r24, Y+14	; 0x0e
    2266:	9f 85       	ldd	r25, Y+15	; 0x0f
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a ef       	ldi	r20, 0xFA	; 250
    226e:	54 e4       	ldi	r21, 0x44	; 68
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	88 87       	std	Y+8, r24	; 0x08
    227a:	99 87       	std	Y+9, r25	; 0x09
    227c:	aa 87       	std	Y+10, r26	; 0x0a
    227e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2280:	68 85       	ldd	r22, Y+8	; 0x08
    2282:	79 85       	ldd	r23, Y+9	; 0x09
    2284:	8a 85       	ldd	r24, Y+10	; 0x0a
    2286:	9b 85       	ldd	r25, Y+11	; 0x0b
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2294:	88 23       	and	r24, r24
    2296:	2c f4       	brge	.+10     	; 0x22a2 <UltrasonicReadDistance+0x290>
		__ticks = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9f 83       	std	Y+7, r25	; 0x07
    229e:	8e 83       	std	Y+6, r24	; 0x06
    22a0:	3f c0       	rjmp	.+126    	; 0x2320 <UltrasonicReadDistance+0x30e>
	else if (__tmp > 65535)
    22a2:	68 85       	ldd	r22, Y+8	; 0x08
    22a4:	79 85       	ldd	r23, Y+9	; 0x09
    22a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b6:	18 16       	cp	r1, r24
    22b8:	4c f5       	brge	.+82     	; 0x230c <UltrasonicReadDistance+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    22bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    22be:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e2       	ldi	r20, 0x20	; 32
    22c8:	51 e4       	ldi	r21, 0x41	; 65
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9f 83       	std	Y+7, r25	; 0x07
    22e0:	8e 83       	std	Y+6, r24	; 0x06
    22e2:	0f c0       	rjmp	.+30     	; 0x2302 <UltrasonicReadDistance+0x2f0>
    22e4:	88 ec       	ldi	r24, 0xC8	; 200
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9d 83       	std	Y+5, r25	; 0x05
    22ea:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ec:	8c 81       	ldd	r24, Y+4	; 0x04
    22ee:	9d 81       	ldd	r25, Y+5	; 0x05
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <UltrasonicReadDistance+0x2de>
    22f4:	9d 83       	std	Y+5, r25	; 0x05
    22f6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f8:	8e 81       	ldd	r24, Y+6	; 0x06
    22fa:	9f 81       	ldd	r25, Y+7	; 0x07
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	9f 83       	std	Y+7, r25	; 0x07
    2300:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	8e 81       	ldd	r24, Y+6	; 0x06
    2304:	9f 81       	ldd	r25, Y+7	; 0x07
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	69 f7       	brne	.-38     	; 0x22e4 <UltrasonicReadDistance+0x2d2>
    230a:	24 c0       	rjmp	.+72     	; 0x2354 <UltrasonicReadDistance+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230c:	68 85       	ldd	r22, Y+8	; 0x08
    230e:	79 85       	ldd	r23, Y+9	; 0x09
    2310:	8a 85       	ldd	r24, Y+10	; 0x0a
    2312:	9b 85       	ldd	r25, Y+11	; 0x0b
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9f 83       	std	Y+7, r25	; 0x07
    231e:	8e 83       	std	Y+6, r24	; 0x06
    2320:	8e 81       	ldd	r24, Y+6	; 0x06
    2322:	9f 81       	ldd	r25, Y+7	; 0x07
    2324:	9b 83       	std	Y+3, r25	; 0x03
    2326:	8a 83       	std	Y+2, r24	; 0x02
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <UltrasonicReadDistance+0x31a>
    2330:	9b 83       	std	Y+3, r25	; 0x03
    2332:	8a 83       	std	Y+2, r24	; 0x02
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <UltrasonicReadDistance+0x342>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2336:	69 89       	ldd	r22, Y+17	; 0x11
    2338:	7a 89       	ldd	r23, Y+18	; 0x12
    233a:	8b 89       	ldd	r24, Y+19	; 0x13
    233c:	9c 89       	ldd	r25, Y+20	; 0x14
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	88 8b       	std	Y+16, r24	; 0x10
    2348:	88 89       	ldd	r24, Y+16	; 0x10
    234a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	8a 95       	dec	r24
    2350:	f1 f7       	brne	.-4      	; 0x234e <UltrasonicReadDistance+0x33c>
    2352:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_SelectOutputStateForPin(Group_B,Pin0,Low);
    2354:	82 e0       	ldi	r24, 0x02	; 2
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

	T1_InputCpetureEdge(RISING_EDGE);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	0e 94 03 09 	call	0x1206	; 0x1206 <T1_InputCpetureEdge>
	T1_ICU_InterruptEnable();
    2364:	0e 94 22 09 	call	0x1244	; 0x1244 <T1_ICU_InterruptEnable>
	while(uflag<2);
    2368:	80 91 7b 00 	lds	r24, 0x007B
    236c:	90 91 7c 00 	lds	r25, 0x007C
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	91 05       	cpc	r25, r1
    2374:	c8 f3       	brcs	.-14     	; 0x2368 <UltrasonicReadDistance+0x356>
	time=ut2-ut1 + ((u32) 65535*c);
    2376:	20 91 79 00 	lds	r18, 0x0079
    237a:	30 91 7a 00 	lds	r19, 0x007A
    237e:	80 91 77 00 	lds	r24, 0x0077
    2382:	90 91 78 00 	lds	r25, 0x0078
    2386:	89 01       	movw	r16, r18
    2388:	08 1b       	sub	r16, r24
    238a:	19 0b       	sbc	r17, r25
    238c:	80 91 7d 00 	lds	r24, 0x007D
    2390:	90 91 7e 00 	lds	r25, 0x007E
    2394:	cc 01       	movw	r24, r24
    2396:	a0 e0       	ldi	r26, 0x00	; 0
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	2f ef       	ldi	r18, 0xFF	; 255
    239c:	3f ef       	ldi	r19, 0xFF	; 255
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 a4 22 	call	0x4548	; 0x4548 <__mulsi3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	80 0f       	add	r24, r16
    23b0:	91 1f       	adc	r25, r17
    23b2:	9a ab       	std	Y+50, r25	; 0x32
    23b4:	89 ab       	std	Y+49, r24	; 0x31
	distance=time/58;
    23b6:	89 a9       	ldd	r24, Y+49	; 0x31
    23b8:	9a a9       	ldd	r25, Y+50	; 0x32
    23ba:	2a e3       	ldi	r18, 0x3A	; 58
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	b9 01       	movw	r22, r18
    23c0:	0e 94 c3 22 	call	0x4586	; 0x4586 <__udivmodhi4>
    23c4:	cb 01       	movw	r24, r22
    23c6:	8b ab       	std	Y+51, r24	; 0x33
	T1_ICU_InterruptDisnable();
    23c8:	0e 94 30 09 	call	0x1260	; 0x1260 <T1_ICU_InterruptDisnable>
	return distance;
    23cc:	8b a9       	ldd	r24, Y+51	; 0x33
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
}
    23d2:	e3 96       	adiw	r28, 0x33	; 51
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	08 95       	ret

000023e8 <Func_ICU>:
static void Func_ICU()
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
	if(uflag==0)
    23f0:	80 91 7b 00 	lds	r24, 0x007B
    23f4:	90 91 7c 00 	lds	r25, 0x007C
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	b1 f4       	brne	.+44     	; 0x2428 <Func_ICU+0x40>
	{
		c=0;
    23fc:	10 92 7e 00 	sts	0x007E, r1
    2400:	10 92 7d 00 	sts	0x007D, r1
		ut1=T1_ICR1;
    2404:	e6 e4       	ldi	r30, 0x46	; 70
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	91 81       	ldd	r25, Z+1	; 0x01
    240c:	90 93 78 00 	sts	0x0078, r25
    2410:	80 93 77 00 	sts	0x0077, r24
		uflag=1;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	90 93 7c 00 	sts	0x007C, r25
    241c:	80 93 7b 00 	sts	0x007B, r24
		T1_InputCpetureEdge(FALLING_EDGE);
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	0e 94 03 09 	call	0x1206	; 0x1206 <T1_InputCpetureEdge>
    2426:	1d c0       	rjmp	.+58     	; 0x2462 <Func_ICU+0x7a>

	}
	else if(uflag == 1)
    2428:	80 91 7b 00 	lds	r24, 0x007B
    242c:	90 91 7c 00 	lds	r25, 0x007C
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	91 05       	cpc	r25, r1
    2434:	b1 f4       	brne	.+44     	; 0x2462 <Func_ICU+0x7a>
	{
		ut2=T1_ICR1;
    2436:	e6 e4       	ldi	r30, 0x46	; 70
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	90 93 7a 00 	sts	0x007A, r25
    2442:	80 93 79 00 	sts	0x0079, r24
		uflag=2;
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	90 93 7c 00 	sts	0x007C, r25
    244e:	80 93 7b 00 	sts	0x007B, r24
		T1_InputCpetureEdge(RISING_EDGE);
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	0e 94 03 09 	call	0x1206	; 0x1206 <T1_InputCpetureEdge>
		T1_ICU_InterruptDisnable();
    2458:	0e 94 30 09 	call	0x1260	; 0x1260 <T1_ICU_InterruptDisnable>
		T1_OutputCompareInterruptDisable(UnitA);
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <T1_OutputCompareInterruptDisable>

	}
}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <TMR_OVR>:
static void TMR_OVR()
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
	c++;
    2470:	80 91 7d 00 	lds	r24, 0x007D
    2474:	90 91 7e 00 	lds	r25, 0x007E
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	90 93 7e 00 	sts	0x007E, r25
    247e:	80 93 7d 00 	sts	0x007D, r24
}
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	08 95       	ret

00002488 <Servo_Init>:
 *      Author: DELL
 */

#include "../Header/Servo_Interface.h"
void Servo_Init(void)
{
    2488:	df 93       	push	r29
    248a:	cf 93       	push	r28
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
	        time = 1/50 hz = 20msec =20000usec
	        so setting value of ICR1 to be 19999 cause it takes another step from 19999 to 0
	        By varing the duty cycle between 999 to 1999 we get 0 to 180

	 */
	DIO_SelectDirectionForPin(Group_D,Pin4,Output);
    2490:	84 e0       	ldi	r24, 0x04	; 4
    2492:	64 e0       	ldi	r22, 0x04	; 4
    2494:	41 e0       	ldi	r20, 0x01	; 1
    2496:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
	T1_Init(FastPWM_Top_OCR1A,T1_Prescaller8,noninverting);
    249a:	84 e0       	ldi	r24, 0x04	; 4
    249c:	62 e0       	ldi	r22, 0x02	; 2
    249e:	41 e0       	ldi	r20, 0x01	; 1
    24a0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <T1_Init>
	T1_OutputCompareInterruptEnable(Both);
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	0e 94 35 08 	call	0x106a	; 0x106a <T1_OutputCompareInterruptEnable>
	T1_OCR1A=19999;
    24aa:	ea e4       	ldi	r30, 0x4A	; 74
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	8f e1       	ldi	r24, 0x1F	; 31
    24b0:	9e e4       	ldi	r25, 0x4E	; 78
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
	//T1_OCR1B=999;


}
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <Servo_SetAngle>:
void Servo_SetAngle(u8 Angle)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <Servo_SetAngle+0x6>
    24c2:	0f 92       	push	r0
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	8b 83       	std	Y+3, r24	; 0x03
//	u16 OCRAValue = (((u32)Angle * 2000) / 180) + 599;
//	T1_OCR1B= OCRAValue;

	u16 OCRAValue = (((u32)Angle * 1000) / 180) + 999;
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a0 e0       	ldi	r26, 0x00	; 0
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	28 ee       	ldi	r18, 0xE8	; 232
    24d6:	33 e0       	ldi	r19, 0x03	; 3
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 a4 22 	call	0x4548	; 0x4548 <__mulsi3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	24 eb       	ldi	r18, 0xB4	; 180
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 d7 22 	call	0x45ae	; 0x45ae <__udivmodsi4>
    24f8:	da 01       	movw	r26, r20
    24fa:	c9 01       	movw	r24, r18
    24fc:	89 51       	subi	r24, 0x19	; 25
    24fe:	9c 4f       	sbci	r25, 0xFC	; 252
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
	T1_OCR1B= OCRAValue;
    2504:	e8 e4       	ldi	r30, 0x48	; 72
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
}
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <MotorDriver_Init>:
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Motor_Interface.h"


void MotorDriver_Init(void)
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
	// set directions and select pins for motor
	DIO_SelectDirectionForPin(Group_A, Pin0, Output);
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	41 e0       	ldi	r20, 0x01	; 1
    252a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
	DIO_SelectDirectionForPin(Group_A, Pin1, Output);
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	61 e0       	ldi	r22, 0x01	; 1
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
	DIO_SelectDirectionForPin(Group_A, Pin2, Output);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	62 e0       	ldi	r22, 0x02	; 2
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
	DIO_SelectDirectionForPin(Group_A, Pin3, Output);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	63 e0       	ldi	r22, 0x03	; 3
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
}
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <MotorDriver_MoveForward>:

void MotorDriver_MoveForward(void)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
	// for motor in right side
	DIO_SelectOutputStateForPin(Group_A, Pin0, High);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin1, Low);
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	61 e0       	ldi	r22, 0x01	; 1
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

	// for motor in left side
	DIO_SelectOutputStateForPin(Group_A, Pin2, High);
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	62 e0       	ldi	r22, 0x02	; 2
    2572:	41 e0       	ldi	r20, 0x01	; 1
    2574:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin3, Low);
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	63 e0       	ldi	r22, 0x03	; 3
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

}
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <MotorDriver_MoveBackward>:


void MotorDriver_MoveBackward(void)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
	// for motor in right side
	DIO_SelectOutputStateForPin(Group_A, Pin0, Low);
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin1, High);
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	41 e0       	ldi	r20, 0x01	; 1
    25a0:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

	// for motor in left side
	DIO_SelectOutputStateForPin(Group_A, Pin2, Low);
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	62 e0       	ldi	r22, 0x02	; 2
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin3, High);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	63 e0       	ldi	r22, 0x03	; 3
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

}
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <MotorDriver_MoveForwardRight>:


void MotorDriver_MoveForwardRight(void)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
	// for motor in right side
	DIO_SelectOutputStateForPin(Group_A, Pin0, Low);
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	60 e0       	ldi	r22, 0x00	; 0
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin1, Low);
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	61 e0       	ldi	r22, 0x01	; 1
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

	// for motor in left side
	DIO_SelectOutputStateForPin(Group_A, Pin2, High);
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	62 e0       	ldi	r22, 0x02	; 2
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin3, Low);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	63 e0       	ldi	r22, 0x03	; 3
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>


}
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <MotorDriver_MoveForwardLeft>:

void MotorDriver_MoveForwardLeft(void)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
	// for motor in right side
	DIO_SelectOutputStateForPin(Group_A, Pin0, High);
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin1, Low);
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

	// for motor in left side
	DIO_SelectOutputStateForPin(Group_A, Pin2, Low);
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	62 e0       	ldi	r22, 0x02	; 2
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin3, Low);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	63 e0       	ldi	r22, 0x03	; 3
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>


}
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <MotorDriver_MoveBackwardRight>:

void MotorDriver_MoveBackwardRight(void)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
	// for motor in right side
	DIO_SelectOutputStateForPin(Group_A, Pin0, Low);
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin1, High);
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	61 e0       	ldi	r22, 0x01	; 1
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

	// for motor in left side
	DIO_SelectOutputStateForPin(Group_A, Pin2, Low);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	62 e0       	ldi	r22, 0x02	; 2
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin3, Low);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	63 e0       	ldi	r22, 0x03	; 3
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

}
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <MotorDriver_MoveBackwardLeft>:
void MotorDriver_MoveBackwardLeft(void)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
	// for motor in right side
	DIO_SelectOutputStateForPin(Group_A, Pin0, Low);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin1, Low);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	61 e0       	ldi	r22, 0x01	; 1
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

	// for motor in left side
	DIO_SelectOutputStateForPin(Group_A, Pin2, Low);
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	62 e0       	ldi	r22, 0x02	; 2
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin3, High);
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	63 e0       	ldi	r22, 0x03	; 3
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

}
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <MotorDriver_Stop>:


void MotorDriver_Stop(void)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
	// for motor in right side
	DIO_SelectOutputStateForPin(Group_A, Pin0, Low);
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin1, Low);
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

	// for motor in left side
	DIO_SelectOutputStateForPin(Group_A, Pin2, Low);
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	62 e0       	ldi	r22, 0x02	; 2
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>
	DIO_SelectOutputStateForPin(Group_A, Pin3, Low);
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	63 e0       	ldi	r22, 0x03	; 3
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_SelectOutputStateForPin>

		// for motor in write side
		DIO_WritePin('A',2,1);
		DIO_WritePin('A',3,1);
		 * */
}
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <IR_Init>:
#include "../../../MCAL/DIO/Header/DIO_Interface.h"



void IR_Init(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
	DIO_SelectDirectionForPin(Group_C, Pin0, Input);
    26d4:	83 e0       	ldi	r24, 0x03	; 3
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
	DIO_SelectDirectionForPin(Group_C, Pin1, Input);
    26de:	83 e0       	ldi	r24, 0x03	; 3
    26e0:	61 e0       	ldi	r22, 0x01	; 1
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_SelectDirectionForPin>
}
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <IR_Read_RightIR>:

u8 IR_Read_RightIR(void)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	0f 92       	push	r0
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	u8 state =1 ;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	89 83       	std	Y+1, r24	; 0x01
	if(state!=NULL)
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	88 2f       	mov	r24, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	41 f0       	breq	.+16     	; 0x2716 <IR_Read_RightIR+0x28>
	{
		DIO_ReadInputValueForPin(Group_C, Pin0 , &state);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	9e 01       	movw	r18, r28
    270c:	2f 5f       	subi	r18, 0xFF	; 255
    270e:	3f 4f       	sbci	r19, 0xFF	; 255
    2710:	a9 01       	movw	r20, r18
    2712:	0e 94 56 0d 	call	0x1aac	; 0x1aac <DIO_ReadInputValueForPin>

	}
	return state ;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
}
    2718:	0f 90       	pop	r0
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <IR_Read_LeftIR>:
u8 IR_Read_LeftIR(void)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	0f 92       	push	r0
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
	u8 state =1 ;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	89 83       	std	Y+1, r24	; 0x01
	if(state!=NULL)
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	88 2f       	mov	r24, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	41 f0       	breq	.+16     	; 0x2748 <IR_Read_LeftIR+0x28>
	{
		DIO_ReadInputValueForPin(Group_C, Pin1 , &state);
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	61 e0       	ldi	r22, 0x01	; 1
    273c:	9e 01       	movw	r18, r28
    273e:	2f 5f       	subi	r18, 0xFF	; 255
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	a9 01       	movw	r20, r18
    2744:	0e 94 56 0d 	call	0x1aac	; 0x1aac <DIO_ReadInputValueForPin>


	}
	return state ;
    2748:	89 81       	ldd	r24, Y+1	; 0x01
}
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <main>:
u8 dis;
u8 dis_right=0;
u8 dis_left=0;

int main()
{
    2752:	0f 93       	push	r16
    2754:	1f 93       	push	r17
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	c4 53       	subi	r28, 0x34	; 52
    2760:	d1 40       	sbci	r29, 0x01	; 1
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
	GIE_Enable();
    276c:	0e 94 48 0a 	call	0x1490	; 0x1490 <GIE_Enable>
	IR_Init();
    2770:	0e 94 66 13 	call	0x26cc	; 0x26cc <IR_Init>
	MotorDriver_Init();
    2774:	0e 94 8e 12 	call	0x251c	; 0x251c <MotorDriver_Init>
	Ultrasonic_Init();
    2778:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <Ultrasonic_Init>


	while(1)
	{

		if (IR_Read_LeftIR()==WHITE && IR_Read_RightIR()==WHITE)
    277c:	0e 94 90 13 	call	0x2720	; 0x2720 <IR_Read_LeftIR>
    2780:	88 23       	and	r24, r24
    2782:	11 f0       	breq	.+4      	; 0x2788 <main+0x36>
    2784:	0c 94 0f 22 	jmp	0x441e	; 0x441e <main+0x1ccc>
    2788:	0e 94 77 13 	call	0x26ee	; 0x26ee <IR_Read_RightIR>
    278c:	88 23       	and	r24, r24
    278e:	11 f0       	breq	.+4      	; 0x2794 <main+0x42>
    2790:	0c 94 0f 22 	jmp	0x441e	; 0x441e <main+0x1ccc>
		{
			dis=UltrasonicReadDistance();
    2794:	0e 94 09 10 	call	0x2012	; 0x2012 <UltrasonicReadDistance>
    2798:	80 93 81 00 	sts	0x0081, r24
			if(dis > STOP_DISTANCE)
    279c:	80 91 81 00 	lds	r24, 0x0081
    27a0:	8f 31       	cpi	r24, 0x1F	; 31
    27a2:	20 f0       	brcs	.+8      	; 0x27ac <main+0x5a>
			{
				MotorDriver_MoveForward();
    27a4:	0e 94 a9 12 	call	0x2552	; 0x2552 <MotorDriver_MoveForward>
    27a8:	0c 94 2f 22 	jmp	0x445e	; 0x445e <main+0x1d0c>
				//_delay_ms(1500);
			}
			else if(dis < STOP_DISTANCE)
    27ac:	80 91 81 00 	lds	r24, 0x0081
    27b0:	8e 31       	cpi	r24, 0x1E	; 30
    27b2:	10 f0       	brcs	.+4      	; 0x27b8 <main+0x66>
    27b4:	0c 94 2f 22 	jmp	0x445e	; 0x445e <main+0x1d0c>
			{
				MotorDriver_Stop();
    27b8:	0e 94 4b 13 	call	0x2696	; 0x2696 <MotorDriver_Stop>
    27bc:	fe 01       	movw	r30, r28
    27be:	ef 5c       	subi	r30, 0xCF	; 207
    27c0:	fe 4f       	sbci	r31, 0xFE	; 254
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	aa ef       	ldi	r26, 0xFA	; 250
    27c8:	b4 e4       	ldi	r27, 0x44	; 68
    27ca:	80 83       	st	Z, r24
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	a2 83       	std	Z+2, r26	; 0x02
    27d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	8e 01       	movw	r16, r28
    27d4:	03 5d       	subi	r16, 0xD3	; 211
    27d6:	1e 4f       	sbci	r17, 0xFE	; 254
    27d8:	fe 01       	movw	r30, r28
    27da:	ef 5c       	subi	r30, 0xCF	; 207
    27dc:	fe 4f       	sbci	r31, 0xFE	; 254
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	4a ef       	ldi	r20, 0xFA	; 250
    27ec:	54 e4       	ldi	r21, 0x44	; 68
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	f8 01       	movw	r30, r16
    27f8:	80 83       	st	Z, r24
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	a2 83       	std	Z+2, r26	; 0x02
    27fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2800:	fe 01       	movw	r30, r28
    2802:	e3 5d       	subi	r30, 0xD3	; 211
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e8       	ldi	r20, 0x80	; 128
    2814:	5f e3       	ldi	r21, 0x3F	; 63
    2816:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281a:	88 23       	and	r24, r24
    281c:	44 f4       	brge	.+16     	; 0x282e <main+0xdc>
		__ticks = 1;
    281e:	fe 01       	movw	r30, r28
    2820:	e5 5d       	subi	r30, 0xD5	; 213
    2822:	fe 4f       	sbci	r31, 0xFE	; 254
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
    282c:	64 c0       	rjmp	.+200    	; 0x28f6 <main+0x1a4>
	else if (__tmp > 65535)
    282e:	fe 01       	movw	r30, r28
    2830:	e3 5d       	subi	r30, 0xD3	; 211
    2832:	fe 4f       	sbci	r31, 0xFE	; 254
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	0c f0       	brlt	.+2      	; 0x284e <main+0xfc>
    284c:	43 c0       	rjmp	.+134    	; 0x28d4 <main+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	fe 01       	movw	r30, r28
    2850:	ef 5c       	subi	r30, 0xCF	; 207
    2852:	fe 4f       	sbci	r31, 0xFE	; 254
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	8e 01       	movw	r16, r28
    286e:	05 5d       	subi	r16, 0xD5	; 213
    2870:	1e 4f       	sbci	r17, 0xFE	; 254
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	f8 01       	movw	r30, r16
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
    2884:	1f c0       	rjmp	.+62     	; 0x28c4 <main+0x172>
    2886:	fe 01       	movw	r30, r28
    2888:	e7 5d       	subi	r30, 0xD7	; 215
    288a:	fe 4f       	sbci	r31, 0xFE	; 254
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2894:	fe 01       	movw	r30, r28
    2896:	e7 5d       	subi	r30, 0xD7	; 215
    2898:	fe 4f       	sbci	r31, 0xFE	; 254
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0x14c>
    28a2:	fe 01       	movw	r30, r28
    28a4:	e7 5d       	subi	r30, 0xD7	; 215
    28a6:	fe 4f       	sbci	r31, 0xFE	; 254
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	de 01       	movw	r26, r28
    28ae:	a5 5d       	subi	r26, 0xD5	; 213
    28b0:	be 4f       	sbci	r27, 0xFE	; 254
    28b2:	fe 01       	movw	r30, r28
    28b4:	e5 5d       	subi	r30, 0xD5	; 213
    28b6:	fe 4f       	sbci	r31, 0xFE	; 254
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	11 96       	adiw	r26, 0x01	; 1
    28c0:	9c 93       	st	X, r25
    28c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	fe 01       	movw	r30, r28
    28c6:	e5 5d       	subi	r30, 0xD5	; 213
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	80 81       	ld	r24, Z
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	d1 f6       	brne	.-76     	; 0x2886 <main+0x134>
    28d2:	27 c0       	rjmp	.+78     	; 0x2922 <main+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d4:	8e 01       	movw	r16, r28
    28d6:	05 5d       	subi	r16, 0xD5	; 213
    28d8:	1e 4f       	sbci	r17, 0xFE	; 254
    28da:	fe 01       	movw	r30, r28
    28dc:	e3 5d       	subi	r30, 0xD3	; 211
    28de:	fe 4f       	sbci	r31, 0xFE	; 254
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	f8 01       	movw	r30, r16
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
    28f6:	de 01       	movw	r26, r28
    28f8:	a9 5d       	subi	r26, 0xD9	; 217
    28fa:	be 4f       	sbci	r27, 0xFE	; 254
    28fc:	fe 01       	movw	r30, r28
    28fe:	e5 5d       	subi	r30, 0xD5	; 213
    2900:	fe 4f       	sbci	r31, 0xFE	; 254
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	8d 93       	st	X+, r24
    2908:	9c 93       	st	X, r25
    290a:	fe 01       	movw	r30, r28
    290c:	e9 5d       	subi	r30, 0xD9	; 217
    290e:	fe 4f       	sbci	r31, 0xFE	; 254
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <main+0x1c2>
    2918:	fe 01       	movw	r30, r28
    291a:	e9 5d       	subi	r30, 0xD9	; 217
    291c:	fe 4f       	sbci	r31, 0xFE	; 254
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
				_delay_ms(2000);
				dis=UltrasonicReadDistance();
    2922:	0e 94 09 10 	call	0x2012	; 0x2012 <UltrasonicReadDistance>
    2926:	80 93 81 00 	sts	0x0081, r24
				if(dis > STOP_DISTANCE)
    292a:	80 91 81 00 	lds	r24, 0x0081
    292e:	8f 31       	cpi	r24, 0x1F	; 31
    2930:	20 f0       	brcs	.+8      	; 0x293a <main+0x1e8>
				{
					MotorDriver_MoveForward();
    2932:	0e 94 a9 12 	call	0x2552	; 0x2552 <MotorDriver_MoveForward>
    2936:	0c 94 2f 22 	jmp	0x445e	; 0x445e <main+0x1d0c>

				}
				else
				{
					Servo_SetAngle(0);
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <Servo_SetAngle>
    2940:	fe 01       	movw	r30, r28
    2942:	ed 5d       	subi	r30, 0xDD	; 221
    2944:	fe 4f       	sbci	r31, 0xFE	; 254
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a6 e9       	ldi	r26, 0x96	; 150
    294c:	b3 e4       	ldi	r27, 0x43	; 67
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	a2 83       	std	Z+2, r26	; 0x02
    2954:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2956:	8e 01       	movw	r16, r28
    2958:	01 5e       	subi	r16, 0xE1	; 225
    295a:	1e 4f       	sbci	r17, 0xFE	; 254
    295c:	fe 01       	movw	r30, r28
    295e:	ed 5d       	subi	r30, 0xDD	; 221
    2960:	fe 4f       	sbci	r31, 0xFE	; 254
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a ef       	ldi	r20, 0xFA	; 250
    2970:	54 e4       	ldi	r21, 0x44	; 68
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	f8 01       	movw	r30, r16
    297c:	80 83       	st	Z, r24
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	a2 83       	std	Z+2, r26	; 0x02
    2982:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2984:	fe 01       	movw	r30, r28
    2986:	e1 5e       	subi	r30, 0xE1	; 225
    2988:	fe 4f       	sbci	r31, 0xFE	; 254
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	5f e3       	ldi	r21, 0x3F	; 63
    299a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    299e:	88 23       	and	r24, r24
    29a0:	44 f4       	brge	.+16     	; 0x29b2 <main+0x260>
		__ticks = 1;
    29a2:	fe 01       	movw	r30, r28
    29a4:	e3 5e       	subi	r30, 0xE3	; 227
    29a6:	fe 4f       	sbci	r31, 0xFE	; 254
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	64 c0       	rjmp	.+200    	; 0x2a7a <main+0x328>
	else if (__tmp > 65535)
    29b2:	fe 01       	movw	r30, r28
    29b4:	e1 5e       	subi	r30, 0xE1	; 225
    29b6:	fe 4f       	sbci	r31, 0xFE	; 254
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	3f ef       	ldi	r19, 0xFF	; 255
    29c4:	4f e7       	ldi	r20, 0x7F	; 127
    29c6:	57 e4       	ldi	r21, 0x47	; 71
    29c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29cc:	18 16       	cp	r1, r24
    29ce:	0c f0       	brlt	.+2      	; 0x29d2 <main+0x280>
    29d0:	43 c0       	rjmp	.+134    	; 0x2a58 <main+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d2:	fe 01       	movw	r30, r28
    29d4:	ed 5d       	subi	r30, 0xDD	; 221
    29d6:	fe 4f       	sbci	r31, 0xFE	; 254
    29d8:	60 81       	ld	r22, Z
    29da:	71 81       	ldd	r23, Z+1	; 0x01
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	8e 01       	movw	r16, r28
    29f2:	03 5e       	subi	r16, 0xE3	; 227
    29f4:	1e 4f       	sbci	r17, 0xFE	; 254
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	f8 01       	movw	r30, r16
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	1f c0       	rjmp	.+62     	; 0x2a48 <main+0x2f6>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e5 5e       	subi	r30, 0xE5	; 229
    2a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a10:	88 ec       	ldi	r24, 0xC8	; 200
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e5 5e       	subi	r30, 0xE5	; 229
    2a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <main+0x2d0>
    2a26:	fe 01       	movw	r30, r28
    2a28:	e5 5e       	subi	r30, 0xE5	; 229
    2a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a30:	de 01       	movw	r26, r28
    2a32:	a3 5e       	subi	r26, 0xE3	; 227
    2a34:	be 4f       	sbci	r27, 0xFE	; 254
    2a36:	fe 01       	movw	r30, r28
    2a38:	e3 5e       	subi	r30, 0xE3	; 227
    2a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	11 96       	adiw	r26, 0x01	; 1
    2a44:	9c 93       	st	X, r25
    2a46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e3 5e       	subi	r30, 0xE3	; 227
    2a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4e:	80 81       	ld	r24, Z
    2a50:	91 81       	ldd	r25, Z+1	; 0x01
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	d1 f6       	brne	.-76     	; 0x2a0a <main+0x2b8>
    2a56:	27 c0       	rjmp	.+78     	; 0x2aa6 <main+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	8e 01       	movw	r16, r28
    2a5a:	03 5e       	subi	r16, 0xE3	; 227
    2a5c:	1e 4f       	sbci	r17, 0xFE	; 254
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e1 5e       	subi	r30, 0xE1	; 225
    2a62:	fe 4f       	sbci	r31, 0xFE	; 254
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	93 81       	ldd	r25, Z+3	; 0x03
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	f8 01       	movw	r30, r16
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	de 01       	movw	r26, r28
    2a7c:	a7 5e       	subi	r26, 0xE7	; 231
    2a7e:	be 4f       	sbci	r27, 0xFE	; 254
    2a80:	fe 01       	movw	r30, r28
    2a82:	e3 5e       	subi	r30, 0xE3	; 227
    2a84:	fe 4f       	sbci	r31, 0xFE	; 254
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	8d 93       	st	X+, r24
    2a8c:	9c 93       	st	X, r25
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e7 5e       	subi	r30, 0xE7	; 231
    2a92:	fe 4f       	sbci	r31, 0xFE	; 254
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <main+0x346>
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e7 5e       	subi	r30, 0xE7	; 231
    2aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
					_delay_ms(300);
					dis_right=UltrasonicReadDistance();
    2aa6:	0e 94 09 10 	call	0x2012	; 0x2012 <UltrasonicReadDistance>
    2aaa:	80 93 7f 00 	sts	0x007F, r24
    2aae:	fe 01       	movw	r30, r28
    2ab0:	eb 5e       	subi	r30, 0xEB	; 235
    2ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	a6 e9       	ldi	r26, 0x96	; 150
    2aba:	b3 e4       	ldi	r27, 0x43	; 67
    2abc:	80 83       	st	Z, r24
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	a2 83       	std	Z+2, r26	; 0x02
    2ac2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac4:	8e 01       	movw	r16, r28
    2ac6:	0f 5e       	subi	r16, 0xEF	; 239
    2ac8:	1e 4f       	sbci	r17, 0xFE	; 254
    2aca:	fe 01       	movw	r30, r28
    2acc:	eb 5e       	subi	r30, 0xEB	; 235
    2ace:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad0:	60 81       	ld	r22, Z
    2ad2:	71 81       	ldd	r23, Z+1	; 0x01
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	4a ef       	ldi	r20, 0xFA	; 250
    2ade:	54 e4       	ldi	r21, 0x44	; 68
    2ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	f8 01       	movw	r30, r16
    2aea:	80 83       	st	Z, r24
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	a2 83       	std	Z+2, r26	; 0x02
    2af0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2af2:	fe 01       	movw	r30, r28
    2af4:	ef 5e       	subi	r30, 0xEF	; 239
    2af6:	fe 4f       	sbci	r31, 0xFE	; 254
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e8       	ldi	r20, 0x80	; 128
    2b06:	5f e3       	ldi	r21, 0x3F	; 63
    2b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b0c:	88 23       	and	r24, r24
    2b0e:	44 f4       	brge	.+16     	; 0x2b20 <main+0x3ce>
		__ticks = 1;
    2b10:	fe 01       	movw	r30, r28
    2b12:	e1 5f       	subi	r30, 0xF1	; 241
    2b14:	fe 4f       	sbci	r31, 0xFE	; 254
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
    2b1e:	64 c0       	rjmp	.+200    	; 0x2be8 <main+0x496>
	else if (__tmp > 65535)
    2b20:	fe 01       	movw	r30, r28
    2b22:	ef 5e       	subi	r30, 0xEF	; 239
    2b24:	fe 4f       	sbci	r31, 0xFE	; 254
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	3f ef       	ldi	r19, 0xFF	; 255
    2b32:	4f e7       	ldi	r20, 0x7F	; 127
    2b34:	57 e4       	ldi	r21, 0x47	; 71
    2b36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b3a:	18 16       	cp	r1, r24
    2b3c:	0c f0       	brlt	.+2      	; 0x2b40 <main+0x3ee>
    2b3e:	43 c0       	rjmp	.+134    	; 0x2bc6 <main+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b40:	fe 01       	movw	r30, r28
    2b42:	eb 5e       	subi	r30, 0xEB	; 235
    2b44:	fe 4f       	sbci	r31, 0xFE	; 254
    2b46:	60 81       	ld	r22, Z
    2b48:	71 81       	ldd	r23, Z+1	; 0x01
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e2       	ldi	r20, 0x20	; 32
    2b54:	51 e4       	ldi	r21, 0x41	; 65
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	8e 01       	movw	r16, r28
    2b60:	01 5f       	subi	r16, 0xF1	; 241
    2b62:	1e 4f       	sbci	r17, 0xFE	; 254
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	f8 01       	movw	r30, r16
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	80 83       	st	Z, r24
    2b76:	1f c0       	rjmp	.+62     	; 0x2bb6 <main+0x464>
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e3 5f       	subi	r30, 0xF3	; 243
    2b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b7e:	88 ec       	ldi	r24, 0xC8	; 200
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	91 83       	std	Z+1, r25	; 0x01
    2b84:	80 83       	st	Z, r24
    2b86:	fe 01       	movw	r30, r28
    2b88:	e3 5f       	subi	r30, 0xF3	; 243
    2b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8c:	80 81       	ld	r24, Z
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <main+0x43e>
    2b94:	fe 01       	movw	r30, r28
    2b96:	e3 5f       	subi	r30, 0xF3	; 243
    2b98:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9e:	de 01       	movw	r26, r28
    2ba0:	a1 5f       	subi	r26, 0xF1	; 241
    2ba2:	be 4f       	sbci	r27, 0xFE	; 254
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e1 5f       	subi	r30, 0xF1	; 241
    2ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	11 96       	adiw	r26, 0x01	; 1
    2bb2:	9c 93       	st	X, r25
    2bb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e1 5f       	subi	r30, 0xF1	; 241
    2bba:	fe 4f       	sbci	r31, 0xFE	; 254
    2bbc:	80 81       	ld	r24, Z
    2bbe:	91 81       	ldd	r25, Z+1	; 0x01
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	d1 f6       	brne	.-76     	; 0x2b78 <main+0x426>
    2bc4:	27 c0       	rjmp	.+78     	; 0x2c14 <main+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc6:	8e 01       	movw	r16, r28
    2bc8:	01 5f       	subi	r16, 0xF1	; 241
    2bca:	1e 4f       	sbci	r17, 0xFE	; 254
    2bcc:	fe 01       	movw	r30, r28
    2bce:	ef 5e       	subi	r30, 0xEF	; 239
    2bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	93 81       	ldd	r25, Z+3	; 0x03
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	f8 01       	movw	r30, r16
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	80 83       	st	Z, r24
    2be8:	de 01       	movw	r26, r28
    2bea:	a5 5f       	subi	r26, 0xF5	; 245
    2bec:	be 4f       	sbci	r27, 0xFE	; 254
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e1 5f       	subi	r30, 0xF1	; 241
    2bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf4:	80 81       	ld	r24, Z
    2bf6:	91 81       	ldd	r25, Z+1	; 0x01
    2bf8:	8d 93       	st	X+, r24
    2bfa:	9c 93       	st	X, r25
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e5 5f       	subi	r30, 0xF5	; 245
    2c00:	fe 4f       	sbci	r31, 0xFE	; 254
    2c02:	80 81       	ld	r24, Z
    2c04:	91 81       	ldd	r25, Z+1	; 0x01
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <main+0x4b4>
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e5 5f       	subi	r30, 0xF5	; 245
    2c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c10:	91 83       	std	Z+1, r25	; 0x01
    2c12:	80 83       	st	Z, r24
					_delay_ms(300);
					Servo_SetAngle(180);
    2c14:	84 eb       	ldi	r24, 0xB4	; 180
    2c16:	0e 94 5e 12 	call	0x24bc	; 0x24bc <Servo_SetAngle>
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e9 5f       	subi	r30, 0xF9	; 249
    2c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a6 e9       	ldi	r26, 0x96	; 150
    2c26:	b3 e4       	ldi	r27, 0x43	; 67
    2c28:	80 83       	st	Z, r24
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	a2 83       	std	Z+2, r26	; 0x02
    2c2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c30:	8e 01       	movw	r16, r28
    2c32:	0d 5f       	subi	r16, 0xFD	; 253
    2c34:	1e 4f       	sbci	r17, 0xFE	; 254
    2c36:	fe 01       	movw	r30, r28
    2c38:	e9 5f       	subi	r30, 0xF9	; 249
    2c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	4a ef       	ldi	r20, 0xFA	; 250
    2c4a:	54 e4       	ldi	r21, 0x44	; 68
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	f8 01       	movw	r30, r16
    2c56:	80 83       	st	Z, r24
    2c58:	91 83       	std	Z+1, r25	; 0x01
    2c5a:	a2 83       	std	Z+2, r26	; 0x02
    2c5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c5e:	fe 01       	movw	r30, r28
    2c60:	ed 5f       	subi	r30, 0xFD	; 253
    2c62:	fe 4f       	sbci	r31, 0xFE	; 254
    2c64:	60 81       	ld	r22, Z
    2c66:	71 81       	ldd	r23, Z+1	; 0x01
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	93 81       	ldd	r25, Z+3	; 0x03
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e8       	ldi	r20, 0x80	; 128
    2c72:	5f e3       	ldi	r21, 0x3F	; 63
    2c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c78:	88 23       	and	r24, r24
    2c7a:	44 f4       	brge	.+16     	; 0x2c8c <main+0x53a>
		__ticks = 1;
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ef 5f       	subi	r30, 0xFF	; 255
    2c80:	fe 4f       	sbci	r31, 0xFE	; 254
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	80 83       	st	Z, r24
    2c8a:	64 c0       	rjmp	.+200    	; 0x2d54 <main+0x602>
	else if (__tmp > 65535)
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ed 5f       	subi	r30, 0xFD	; 253
    2c90:	fe 4f       	sbci	r31, 0xFE	; 254
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	3f ef       	ldi	r19, 0xFF	; 255
    2c9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ca0:	57 e4       	ldi	r21, 0x47	; 71
    2ca2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca6:	18 16       	cp	r1, r24
    2ca8:	0c f0       	brlt	.+2      	; 0x2cac <main+0x55a>
    2caa:	43 c0       	rjmp	.+134    	; 0x2d32 <main+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cac:	fe 01       	movw	r30, r28
    2cae:	e9 5f       	subi	r30, 0xF9	; 249
    2cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e2       	ldi	r20, 0x20	; 32
    2cc0:	51 e4       	ldi	r21, 0x41	; 65
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	8e 01       	movw	r16, r28
    2ccc:	0f 5f       	subi	r16, 0xFF	; 255
    2cce:	1e 4f       	sbci	r17, 0xFE	; 254
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	f8 01       	movw	r30, r16
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
    2ce2:	1f c0       	rjmp	.+62     	; 0x2d22 <main+0x5d0>
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	e1 50       	subi	r30, 0x01	; 1
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	88 ec       	ldi	r24, 0xC8	; 200
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e1 50       	subi	r30, 0x01	; 1
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <main+0x5aa>
    2d00:	fe 01       	movw	r30, r28
    2d02:	e1 50       	subi	r30, 0x01	; 1
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	91 83       	std	Z+1, r25	; 0x01
    2d08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	de 01       	movw	r26, r28
    2d0c:	af 5f       	subi	r26, 0xFF	; 255
    2d0e:	be 4f       	sbci	r27, 0xFE	; 254
    2d10:	fe 01       	movw	r30, r28
    2d12:	ef 5f       	subi	r30, 0xFF	; 255
    2d14:	fe 4f       	sbci	r31, 0xFE	; 254
    2d16:	80 81       	ld	r24, Z
    2d18:	91 81       	ldd	r25, Z+1	; 0x01
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	11 96       	adiw	r26, 0x01	; 1
    2d1e:	9c 93       	st	X, r25
    2d20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d22:	fe 01       	movw	r30, r28
    2d24:	ef 5f       	subi	r30, 0xFF	; 255
    2d26:	fe 4f       	sbci	r31, 0xFE	; 254
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	d1 f6       	brne	.-76     	; 0x2ce4 <main+0x592>
    2d30:	27 c0       	rjmp	.+78     	; 0x2d80 <main+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d32:	8e 01       	movw	r16, r28
    2d34:	0f 5f       	subi	r16, 0xFF	; 255
    2d36:	1e 4f       	sbci	r17, 0xFE	; 254
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ed 5f       	subi	r30, 0xFD	; 253
    2d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	f8 01       	movw	r30, r16
    2d50:	91 83       	std	Z+1, r25	; 0x01
    2d52:	80 83       	st	Z, r24
    2d54:	de 01       	movw	r26, r28
    2d56:	a3 50       	subi	r26, 0x03	; 3
    2d58:	bf 4f       	sbci	r27, 0xFF	; 255
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	ef 5f       	subi	r30, 0xFF	; 255
    2d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d60:	80 81       	ld	r24, Z
    2d62:	91 81       	ldd	r25, Z+1	; 0x01
    2d64:	8d 93       	st	X+, r24
    2d66:	9c 93       	st	X, r25
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e3 50       	subi	r30, 0x03	; 3
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <main+0x620>
    2d76:	fe 01       	movw	r30, r28
    2d78:	e3 50       	subi	r30, 0x03	; 3
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	80 83       	st	Z, r24
					_delay_ms(300);
					dis_left=UltrasonicReadDistance();
    2d80:	0e 94 09 10 	call	0x2012	; 0x2012 <UltrasonicReadDistance>
    2d84:	80 93 80 00 	sts	0x0080, r24
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e7 50       	subi	r30, 0x07	; 7
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	a6 e9       	ldi	r26, 0x96	; 150
    2d94:	b3 e4       	ldi	r27, 0x43	; 67
    2d96:	80 83       	st	Z, r24
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	a2 83       	std	Z+2, r26	; 0x02
    2d9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9e:	8e 01       	movw	r16, r28
    2da0:	0b 50       	subi	r16, 0x0B	; 11
    2da2:	1f 4f       	sbci	r17, 0xFF	; 255
    2da4:	fe 01       	movw	r30, r28
    2da6:	e7 50       	subi	r30, 0x07	; 7
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	60 81       	ld	r22, Z
    2dac:	71 81       	ldd	r23, Z+1	; 0x01
    2dae:	82 81       	ldd	r24, Z+2	; 0x02
    2db0:	93 81       	ldd	r25, Z+3	; 0x03
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	4a ef       	ldi	r20, 0xFA	; 250
    2db8:	54 e4       	ldi	r21, 0x44	; 68
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	80 83       	st	Z, r24
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	a2 83       	std	Z+2, r26	; 0x02
    2dca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dcc:	fe 01       	movw	r30, r28
    2dce:	eb 50       	subi	r30, 0x0B	; 11
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	60 81       	ld	r22, Z
    2dd4:	71 81       	ldd	r23, Z+1	; 0x01
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e8       	ldi	r20, 0x80	; 128
    2de0:	5f e3       	ldi	r21, 0x3F	; 63
    2de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de6:	88 23       	and	r24, r24
    2de8:	44 f4       	brge	.+16     	; 0x2dfa <main+0x6a8>
		__ticks = 1;
    2dea:	fe 01       	movw	r30, r28
    2dec:	ed 50       	subi	r30, 0x0D	; 13
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
    2df8:	64 c0       	rjmp	.+200    	; 0x2ec2 <main+0x770>
	else if (__tmp > 65535)
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	eb 50       	subi	r30, 0x0B	; 11
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	3f ef       	ldi	r19, 0xFF	; 255
    2e0c:	4f e7       	ldi	r20, 0x7F	; 127
    2e0e:	57 e4       	ldi	r21, 0x47	; 71
    2e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e14:	18 16       	cp	r1, r24
    2e16:	0c f0       	brlt	.+2      	; 0x2e1a <main+0x6c8>
    2e18:	43 c0       	rjmp	.+134    	; 0x2ea0 <main+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e7 50       	subi	r30, 0x07	; 7
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e2       	ldi	r20, 0x20	; 32
    2e2e:	51 e4       	ldi	r21, 0x41	; 65
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	8e 01       	movw	r16, r28
    2e3a:	0d 50       	subi	r16, 0x0D	; 13
    2e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3e:	bc 01       	movw	r22, r24
    2e40:	cd 01       	movw	r24, r26
    2e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	f8 01       	movw	r30, r16
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	80 83       	st	Z, r24
    2e50:	1f c0       	rjmp	.+62     	; 0x2e90 <main+0x73e>
    2e52:	fe 01       	movw	r30, r28
    2e54:	ef 50       	subi	r30, 0x0F	; 15
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	88 ec       	ldi	r24, 0xC8	; 200
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	80 83       	st	Z, r24
    2e60:	fe 01       	movw	r30, r28
    2e62:	ef 50       	subi	r30, 0x0F	; 15
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <main+0x718>
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ef 50       	subi	r30, 0x0F	; 15
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e78:	de 01       	movw	r26, r28
    2e7a:	ad 50       	subi	r26, 0x0D	; 13
    2e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e7e:	fe 01       	movw	r30, r28
    2e80:	ed 50       	subi	r30, 0x0D	; 13
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	11 96       	adiw	r26, 0x01	; 1
    2e8c:	9c 93       	st	X, r25
    2e8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e90:	fe 01       	movw	r30, r28
    2e92:	ed 50       	subi	r30, 0x0D	; 13
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	d1 f6       	brne	.-76     	; 0x2e52 <main+0x700>
    2e9e:	27 c0       	rjmp	.+78     	; 0x2eee <main+0x79c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea0:	8e 01       	movw	r16, r28
    2ea2:	0d 50       	subi	r16, 0x0D	; 13
    2ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	eb 50       	subi	r30, 0x0B	; 11
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	80 83       	st	Z, r24
    2ec2:	de 01       	movw	r26, r28
    2ec4:	a1 51       	subi	r26, 0x11	; 17
    2ec6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec8:	fe 01       	movw	r30, r28
    2eca:	ed 50       	subi	r30, 0x0D	; 13
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	91 81       	ldd	r25, Z+1	; 0x01
    2ed2:	8d 93       	st	X+, r24
    2ed4:	9c 93       	st	X, r25
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e1 51       	subi	r30, 0x11	; 17
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <main+0x78e>
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e1 51       	subi	r30, 0x11	; 17
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	91 83       	std	Z+1, r25	; 0x01
    2eec:	80 83       	st	Z, r24
					_delay_ms(300);
					Servo_SetAngle(90);
    2eee:	8a e5       	ldi	r24, 0x5A	; 90
    2ef0:	0e 94 5e 12 	call	0x24bc	; 0x24bc <Servo_SetAngle>
					if(dis_right>dis_left && dis_right>STOP_DISTANCE  )
    2ef4:	90 91 7f 00 	lds	r25, 0x007F
    2ef8:	80 91 80 00 	lds	r24, 0x0080
    2efc:	89 17       	cp	r24, r25
    2efe:	08 f0       	brcs	.+2      	; 0x2f02 <main+0x7b0>
    2f00:	90 c3       	rjmp	.+1824   	; 0x3622 <main+0xed0>
    2f02:	80 91 7f 00 	lds	r24, 0x007F
    2f06:	8f 31       	cpi	r24, 0x1F	; 31
    2f08:	08 f4       	brcc	.+2      	; 0x2f0c <main+0x7ba>
    2f0a:	8b c3       	rjmp	.+1814   	; 0x3622 <main+0xed0>
					{
						MotorDriver_MoveForwardRight();
    2f0c:	0e 94 df 12 	call	0x25be	; 0x25be <MotorDriver_MoveForwardRight>
    2f10:	fe 01       	movw	r30, r28
    2f12:	e5 51       	subi	r30, 0x15	; 21
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	aa ef       	ldi	r26, 0xFA	; 250
    2f1c:	b3 e4       	ldi	r27, 0x43	; 67
    2f1e:	80 83       	st	Z, r24
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	a2 83       	std	Z+2, r26	; 0x02
    2f24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f26:	8e 01       	movw	r16, r28
    2f28:	09 51       	subi	r16, 0x19	; 25
    2f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e5 51       	subi	r30, 0x15	; 21
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a ef       	ldi	r20, 0xFA	; 250
    2f40:	54 e4       	ldi	r21, 0x44	; 68
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	80 83       	st	Z, r24
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	a2 83       	std	Z+2, r26	; 0x02
    2f52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f54:	fe 01       	movw	r30, r28
    2f56:	e9 51       	subi	r30, 0x19	; 25
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	5f e3       	ldi	r21, 0x3F	; 63
    2f6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f6e:	88 23       	and	r24, r24
    2f70:	44 f4       	brge	.+16     	; 0x2f82 <main+0x830>
		__ticks = 1;
    2f72:	fe 01       	movw	r30, r28
    2f74:	eb 51       	subi	r30, 0x1B	; 27
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	80 83       	st	Z, r24
    2f80:	64 c0       	rjmp	.+200    	; 0x304a <main+0x8f8>
	else if (__tmp > 65535)
    2f82:	fe 01       	movw	r30, r28
    2f84:	e9 51       	subi	r30, 0x19	; 25
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	60 81       	ld	r22, Z
    2f8a:	71 81       	ldd	r23, Z+1	; 0x01
    2f8c:	82 81       	ldd	r24, Z+2	; 0x02
    2f8e:	93 81       	ldd	r25, Z+3	; 0x03
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	3f ef       	ldi	r19, 0xFF	; 255
    2f94:	4f e7       	ldi	r20, 0x7F	; 127
    2f96:	57 e4       	ldi	r21, 0x47	; 71
    2f98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9c:	18 16       	cp	r1, r24
    2f9e:	0c f0       	brlt	.+2      	; 0x2fa2 <main+0x850>
    2fa0:	43 c0       	rjmp	.+134    	; 0x3028 <main+0x8d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e5 51       	subi	r30, 0x15	; 21
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	60 81       	ld	r22, Z
    2faa:	71 81       	ldd	r23, Z+1	; 0x01
    2fac:	82 81       	ldd	r24, Z+2	; 0x02
    2fae:	93 81       	ldd	r25, Z+3	; 0x03
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e2       	ldi	r20, 0x20	; 32
    2fb6:	51 e4       	ldi	r21, 0x41	; 65
    2fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8e 01       	movw	r16, r28
    2fc2:	0b 51       	subi	r16, 0x1B	; 27
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	f8 01       	movw	r30, r16
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
    2fd8:	1f c0       	rjmp	.+62     	; 0x3018 <main+0x8c6>
    2fda:	fe 01       	movw	r30, r28
    2fdc:	ed 51       	subi	r30, 0x1D	; 29
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	88 ec       	ldi	r24, 0xC8	; 200
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	80 83       	st	Z, r24
    2fe8:	fe 01       	movw	r30, r28
    2fea:	ed 51       	subi	r30, 0x1D	; 29
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <main+0x8a0>
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	ed 51       	subi	r30, 0x1D	; 29
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3000:	de 01       	movw	r26, r28
    3002:	ab 51       	subi	r26, 0x1B	; 27
    3004:	bf 4f       	sbci	r27, 0xFF	; 255
    3006:	fe 01       	movw	r30, r28
    3008:	eb 51       	subi	r30, 0x1B	; 27
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	80 81       	ld	r24, Z
    300e:	91 81       	ldd	r25, Z+1	; 0x01
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	11 96       	adiw	r26, 0x01	; 1
    3014:	9c 93       	st	X, r25
    3016:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3018:	fe 01       	movw	r30, r28
    301a:	eb 51       	subi	r30, 0x1B	; 27
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	d1 f6       	brne	.-76     	; 0x2fda <main+0x888>
    3026:	27 c0       	rjmp	.+78     	; 0x3076 <main+0x924>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3028:	8e 01       	movw	r16, r28
    302a:	0b 51       	subi	r16, 0x1B	; 27
    302c:	1f 4f       	sbci	r17, 0xFF	; 255
    302e:	fe 01       	movw	r30, r28
    3030:	e9 51       	subi	r30, 0x19	; 25
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	60 81       	ld	r22, Z
    3036:	71 81       	ldd	r23, Z+1	; 0x01
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	93 81       	ldd	r25, Z+3	; 0x03
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	f8 01       	movw	r30, r16
    3046:	91 83       	std	Z+1, r25	; 0x01
    3048:	80 83       	st	Z, r24
    304a:	de 01       	movw	r26, r28
    304c:	af 51       	subi	r26, 0x1F	; 31
    304e:	bf 4f       	sbci	r27, 0xFF	; 255
    3050:	fe 01       	movw	r30, r28
    3052:	eb 51       	subi	r30, 0x1B	; 27
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	91 81       	ldd	r25, Z+1	; 0x01
    305a:	8d 93       	st	X+, r24
    305c:	9c 93       	st	X, r25
    305e:	fe 01       	movw	r30, r28
    3060:	ef 51       	subi	r30, 0x1F	; 31
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	f1 f7       	brne	.-4      	; 0x3068 <main+0x916>
    306c:	fe 01       	movw	r30, r28
    306e:	ef 51       	subi	r30, 0x1F	; 31
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	80 83       	st	Z, r24
						_delay_ms(500);
						MotorDriver_MoveForward();
    3076:	0e 94 a9 12 	call	0x2552	; 0x2552 <MotorDriver_MoveForward>
    307a:	fe 01       	movw	r30, r28
    307c:	e3 52       	subi	r30, 0x23	; 35
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a6 e1       	ldi	r26, 0x16	; 22
    3086:	b4 e4       	ldi	r27, 0x44	; 68
    3088:	80 83       	st	Z, r24
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	a2 83       	std	Z+2, r26	; 0x02
    308e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3090:	8e 01       	movw	r16, r28
    3092:	07 52       	subi	r16, 0x27	; 39
    3094:	1f 4f       	sbci	r17, 0xFF	; 255
    3096:	fe 01       	movw	r30, r28
    3098:	e3 52       	subi	r30, 0x23	; 35
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	60 81       	ld	r22, Z
    309e:	71 81       	ldd	r23, Z+1	; 0x01
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	4a ef       	ldi	r20, 0xFA	; 250
    30aa:	54 e4       	ldi	r21, 0x44	; 68
    30ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	f8 01       	movw	r30, r16
    30b6:	80 83       	st	Z, r24
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	a2 83       	std	Z+2, r26	; 0x02
    30bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30be:	fe 01       	movw	r30, r28
    30c0:	e7 52       	subi	r30, 0x27	; 39
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	44 f4       	brge	.+16     	; 0x30ec <main+0x99a>
		__ticks = 1;
    30dc:	fe 01       	movw	r30, r28
    30de:	e9 52       	subi	r30, 0x29	; 41
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	91 83       	std	Z+1, r25	; 0x01
    30e8:	80 83       	st	Z, r24
    30ea:	64 c0       	rjmp	.+200    	; 0x31b4 <main+0xa62>
	else if (__tmp > 65535)
    30ec:	fe 01       	movw	r30, r28
    30ee:	e7 52       	subi	r30, 0x27	; 39
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	60 81       	ld	r22, Z
    30f4:	71 81       	ldd	r23, Z+1	; 0x01
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	57 e4       	ldi	r21, 0x47	; 71
    3102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	0c f0       	brlt	.+2      	; 0x310c <main+0x9ba>
    310a:	43 c0       	rjmp	.+134    	; 0x3192 <main+0xa40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310c:	fe 01       	movw	r30, r28
    310e:	e3 52       	subi	r30, 0x23	; 35
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	60 81       	ld	r22, Z
    3114:	71 81       	ldd	r23, Z+1	; 0x01
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e2       	ldi	r20, 0x20	; 32
    3120:	51 e4       	ldi	r21, 0x41	; 65
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	8e 01       	movw	r16, r28
    312c:	09 52       	subi	r16, 0x29	; 41
    312e:	1f 4f       	sbci	r17, 0xFF	; 255
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	f8 01       	movw	r30, r16
    313e:	91 83       	std	Z+1, r25	; 0x01
    3140:	80 83       	st	Z, r24
    3142:	1f c0       	rjmp	.+62     	; 0x3182 <main+0xa30>
    3144:	fe 01       	movw	r30, r28
    3146:	eb 52       	subi	r30, 0x2B	; 43
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	88 ec       	ldi	r24, 0xC8	; 200
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	80 83       	st	Z, r24
    3152:	fe 01       	movw	r30, r28
    3154:	eb 52       	subi	r30, 0x2B	; 43
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <main+0xa0a>
    3160:	fe 01       	movw	r30, r28
    3162:	eb 52       	subi	r30, 0x2B	; 43
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	de 01       	movw	r26, r28
    316c:	a9 52       	subi	r26, 0x29	; 41
    316e:	bf 4f       	sbci	r27, 0xFF	; 255
    3170:	fe 01       	movw	r30, r28
    3172:	e9 52       	subi	r30, 0x29	; 41
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	80 81       	ld	r24, Z
    3178:	91 81       	ldd	r25, Z+1	; 0x01
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	11 96       	adiw	r26, 0x01	; 1
    317e:	9c 93       	st	X, r25
    3180:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	fe 01       	movw	r30, r28
    3184:	e9 52       	subi	r30, 0x29	; 41
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	d1 f6       	brne	.-76     	; 0x3144 <main+0x9f2>
    3190:	27 c0       	rjmp	.+78     	; 0x31e0 <main+0xa8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3192:	8e 01       	movw	r16, r28
    3194:	09 52       	subi	r16, 0x29	; 41
    3196:	1f 4f       	sbci	r17, 0xFF	; 255
    3198:	fe 01       	movw	r30, r28
    319a:	e7 52       	subi	r30, 0x27	; 39
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	f8 01       	movw	r30, r16
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	80 83       	st	Z, r24
    31b4:	de 01       	movw	r26, r28
    31b6:	ad 52       	subi	r26, 0x2D	; 45
    31b8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ba:	fe 01       	movw	r30, r28
    31bc:	e9 52       	subi	r30, 0x29	; 41
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 81       	ld	r24, Z
    31c2:	91 81       	ldd	r25, Z+1	; 0x01
    31c4:	8d 93       	st	X+, r24
    31c6:	9c 93       	st	X, r25
    31c8:	fe 01       	movw	r30, r28
    31ca:	ed 52       	subi	r30, 0x2D	; 45
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <main+0xa80>
    31d6:	fe 01       	movw	r30, r28
    31d8:	ed 52       	subi	r30, 0x2D	; 45
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	91 83       	std	Z+1, r25	; 0x01
    31de:	80 83       	st	Z, r24
						_delay_ms(600);
						MotorDriver_MoveForwardLeft();
    31e0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <MotorDriver_MoveForwardLeft>
    31e4:	fe 01       	movw	r30, r28
    31e6:	e1 53       	subi	r30, 0x31	; 49
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	aa ef       	ldi	r26, 0xFA	; 250
    31f0:	b3 e4       	ldi	r27, 0x43	; 67
    31f2:	80 83       	st	Z, r24
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	a2 83       	std	Z+2, r26	; 0x02
    31f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fa:	8e 01       	movw	r16, r28
    31fc:	05 53       	subi	r16, 0x35	; 53
    31fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3200:	fe 01       	movw	r30, r28
    3202:	e1 53       	subi	r30, 0x31	; 49
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	4a ef       	ldi	r20, 0xFA	; 250
    3214:	54 e4       	ldi	r21, 0x44	; 68
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	f8 01       	movw	r30, r16
    3220:	80 83       	st	Z, r24
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	a2 83       	std	Z+2, r26	; 0x02
    3226:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3228:	fe 01       	movw	r30, r28
    322a:	e5 53       	subi	r30, 0x35	; 53
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	60 81       	ld	r22, Z
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e8       	ldi	r20, 0x80	; 128
    323c:	5f e3       	ldi	r21, 0x3F	; 63
    323e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3242:	88 23       	and	r24, r24
    3244:	44 f4       	brge	.+16     	; 0x3256 <main+0xb04>
		__ticks = 1;
    3246:	fe 01       	movw	r30, r28
    3248:	e7 53       	subi	r30, 0x37	; 55
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	91 83       	std	Z+1, r25	; 0x01
    3252:	80 83       	st	Z, r24
    3254:	64 c0       	rjmp	.+200    	; 0x331e <main+0xbcc>
	else if (__tmp > 65535)
    3256:	fe 01       	movw	r30, r28
    3258:	e5 53       	subi	r30, 0x35	; 53
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	3f ef       	ldi	r19, 0xFF	; 255
    3268:	4f e7       	ldi	r20, 0x7F	; 127
    326a:	57 e4       	ldi	r21, 0x47	; 71
    326c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3270:	18 16       	cp	r1, r24
    3272:	0c f0       	brlt	.+2      	; 0x3276 <main+0xb24>
    3274:	43 c0       	rjmp	.+134    	; 0x32fc <main+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3276:	fe 01       	movw	r30, r28
    3278:	e1 53       	subi	r30, 0x31	; 49
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	60 81       	ld	r22, Z
    327e:	71 81       	ldd	r23, Z+1	; 0x01
    3280:	82 81       	ldd	r24, Z+2	; 0x02
    3282:	93 81       	ldd	r25, Z+3	; 0x03
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e2       	ldi	r20, 0x20	; 32
    328a:	51 e4       	ldi	r21, 0x41	; 65
    328c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	8e 01       	movw	r16, r28
    3296:	07 53       	subi	r16, 0x37	; 55
    3298:	1f 4f       	sbci	r17, 0xFF	; 255
    329a:	bc 01       	movw	r22, r24
    329c:	cd 01       	movw	r24, r26
    329e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	f8 01       	movw	r30, r16
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	80 83       	st	Z, r24
    32ac:	1f c0       	rjmp	.+62     	; 0x32ec <main+0xb9a>
    32ae:	fe 01       	movw	r30, r28
    32b0:	e9 53       	subi	r30, 0x39	; 57
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	88 ec       	ldi	r24, 0xC8	; 200
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	80 83       	st	Z, r24
    32bc:	fe 01       	movw	r30, r28
    32be:	e9 53       	subi	r30, 0x39	; 57
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	80 81       	ld	r24, Z
    32c4:	91 81       	ldd	r25, Z+1	; 0x01
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <main+0xb74>
    32ca:	fe 01       	movw	r30, r28
    32cc:	e9 53       	subi	r30, 0x39	; 57
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	91 83       	std	Z+1, r25	; 0x01
    32d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d4:	de 01       	movw	r26, r28
    32d6:	a7 53       	subi	r26, 0x37	; 55
    32d8:	bf 4f       	sbci	r27, 0xFF	; 255
    32da:	fe 01       	movw	r30, r28
    32dc:	e7 53       	subi	r30, 0x37	; 55
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	80 81       	ld	r24, Z
    32e2:	91 81       	ldd	r25, Z+1	; 0x01
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	11 96       	adiw	r26, 0x01	; 1
    32e8:	9c 93       	st	X, r25
    32ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ec:	fe 01       	movw	r30, r28
    32ee:	e7 53       	subi	r30, 0x37	; 55
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	00 97       	sbiw	r24, 0x00	; 0
    32f8:	d1 f6       	brne	.-76     	; 0x32ae <main+0xb5c>
    32fa:	27 c0       	rjmp	.+78     	; 0x334a <main+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fc:	8e 01       	movw	r16, r28
    32fe:	07 53       	subi	r16, 0x37	; 55
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	fe 01       	movw	r30, r28
    3304:	e5 53       	subi	r30, 0x35	; 53
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	60 81       	ld	r22, Z
    330a:	71 81       	ldd	r23, Z+1	; 0x01
    330c:	82 81       	ldd	r24, Z+2	; 0x02
    330e:	93 81       	ldd	r25, Z+3	; 0x03
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	f8 01       	movw	r30, r16
    331a:	91 83       	std	Z+1, r25	; 0x01
    331c:	80 83       	st	Z, r24
    331e:	de 01       	movw	r26, r28
    3320:	ab 53       	subi	r26, 0x3B	; 59
    3322:	bf 4f       	sbci	r27, 0xFF	; 255
    3324:	fe 01       	movw	r30, r28
    3326:	e7 53       	subi	r30, 0x37	; 55
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	8d 93       	st	X+, r24
    3330:	9c 93       	st	X, r25
    3332:	fe 01       	movw	r30, r28
    3334:	eb 53       	subi	r30, 0x3B	; 59
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	80 81       	ld	r24, Z
    333a:	91 81       	ldd	r25, Z+1	; 0x01
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <main+0xbea>
    3340:	fe 01       	movw	r30, r28
    3342:	eb 53       	subi	r30, 0x3B	; 59
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	80 83       	st	Z, r24
						_delay_ms(500);
						MotorDriver_MoveForward();
    334a:	0e 94 a9 12 	call	0x2552	; 0x2552 <MotorDriver_MoveForward>
    334e:	fe 01       	movw	r30, r28
    3350:	ef 53       	subi	r30, 0x3F	; 63
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	a6 e1       	ldi	r26, 0x16	; 22
    335a:	b4 e4       	ldi	r27, 0x44	; 68
    335c:	80 83       	st	Z, r24
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	a2 83       	std	Z+2, r26	; 0x02
    3362:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3364:	8e 01       	movw	r16, r28
    3366:	03 54       	subi	r16, 0x43	; 67
    3368:	1f 4f       	sbci	r17, 0xFF	; 255
    336a:	fe 01       	movw	r30, r28
    336c:	ef 53       	subi	r30, 0x3F	; 63
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	4a ef       	ldi	r20, 0xFA	; 250
    337e:	54 e4       	ldi	r21, 0x44	; 68
    3380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	f8 01       	movw	r30, r16
    338a:	80 83       	st	Z, r24
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	a2 83       	std	Z+2, r26	; 0x02
    3390:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3392:	fe 01       	movw	r30, r28
    3394:	e3 54       	subi	r30, 0x43	; 67
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	60 81       	ld	r22, Z
    339a:	71 81       	ldd	r23, Z+1	; 0x01
    339c:	82 81       	ldd	r24, Z+2	; 0x02
    339e:	93 81       	ldd	r25, Z+3	; 0x03
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e8       	ldi	r20, 0x80	; 128
    33a6:	5f e3       	ldi	r21, 0x3F	; 63
    33a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ac:	88 23       	and	r24, r24
    33ae:	44 f4       	brge	.+16     	; 0x33c0 <main+0xc6e>
		__ticks = 1;
    33b0:	fe 01       	movw	r30, r28
    33b2:	e5 54       	subi	r30, 0x45	; 69
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	91 83       	std	Z+1, r25	; 0x01
    33bc:	80 83       	st	Z, r24
    33be:	64 c0       	rjmp	.+200    	; 0x3488 <main+0xd36>
	else if (__tmp > 65535)
    33c0:	fe 01       	movw	r30, r28
    33c2:	e3 54       	subi	r30, 0x43	; 67
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	60 81       	ld	r22, Z
    33c8:	71 81       	ldd	r23, Z+1	; 0x01
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	93 81       	ldd	r25, Z+3	; 0x03
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	3f ef       	ldi	r19, 0xFF	; 255
    33d2:	4f e7       	ldi	r20, 0x7F	; 127
    33d4:	57 e4       	ldi	r21, 0x47	; 71
    33d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33da:	18 16       	cp	r1, r24
    33dc:	0c f0       	brlt	.+2      	; 0x33e0 <main+0xc8e>
    33de:	43 c0       	rjmp	.+134    	; 0x3466 <main+0xd14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e0:	fe 01       	movw	r30, r28
    33e2:	ef 53       	subi	r30, 0x3F	; 63
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	60 81       	ld	r22, Z
    33e8:	71 81       	ldd	r23, Z+1	; 0x01
    33ea:	82 81       	ldd	r24, Z+2	; 0x02
    33ec:	93 81       	ldd	r25, Z+3	; 0x03
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e2       	ldi	r20, 0x20	; 32
    33f4:	51 e4       	ldi	r21, 0x41	; 65
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	8e 01       	movw	r16, r28
    3400:	05 54       	subi	r16, 0x45	; 69
    3402:	1f 4f       	sbci	r17, 0xFF	; 255
    3404:	bc 01       	movw	r22, r24
    3406:	cd 01       	movw	r24, r26
    3408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	f8 01       	movw	r30, r16
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	80 83       	st	Z, r24
    3416:	1f c0       	rjmp	.+62     	; 0x3456 <main+0xd04>
    3418:	fe 01       	movw	r30, r28
    341a:	e7 54       	subi	r30, 0x47	; 71
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	88 ec       	ldi	r24, 0xC8	; 200
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	80 83       	st	Z, r24
    3426:	fe 01       	movw	r30, r28
    3428:	e7 54       	subi	r30, 0x47	; 71
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	80 81       	ld	r24, Z
    342e:	91 81       	ldd	r25, Z+1	; 0x01
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <main+0xcde>
    3434:	fe 01       	movw	r30, r28
    3436:	e7 54       	subi	r30, 0x47	; 71
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343e:	de 01       	movw	r26, r28
    3440:	a5 54       	subi	r26, 0x45	; 69
    3442:	bf 4f       	sbci	r27, 0xFF	; 255
    3444:	fe 01       	movw	r30, r28
    3446:	e5 54       	subi	r30, 0x45	; 69
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	11 96       	adiw	r26, 0x01	; 1
    3452:	9c 93       	st	X, r25
    3454:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	fe 01       	movw	r30, r28
    3458:	e5 54       	subi	r30, 0x45	; 69
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	d1 f6       	brne	.-76     	; 0x3418 <main+0xcc6>
    3464:	27 c0       	rjmp	.+78     	; 0x34b4 <main+0xd62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3466:	8e 01       	movw	r16, r28
    3468:	05 54       	subi	r16, 0x45	; 69
    346a:	1f 4f       	sbci	r17, 0xFF	; 255
    346c:	fe 01       	movw	r30, r28
    346e:	e3 54       	subi	r30, 0x43	; 67
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	f8 01       	movw	r30, r16
    3484:	91 83       	std	Z+1, r25	; 0x01
    3486:	80 83       	st	Z, r24
    3488:	de 01       	movw	r26, r28
    348a:	a9 54       	subi	r26, 0x49	; 73
    348c:	bf 4f       	sbci	r27, 0xFF	; 255
    348e:	fe 01       	movw	r30, r28
    3490:	e5 54       	subi	r30, 0x45	; 69
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	80 81       	ld	r24, Z
    3496:	91 81       	ldd	r25, Z+1	; 0x01
    3498:	8d 93       	st	X+, r24
    349a:	9c 93       	st	X, r25
    349c:	fe 01       	movw	r30, r28
    349e:	e9 54       	subi	r30, 0x49	; 73
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	80 81       	ld	r24, Z
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <main+0xd54>
    34aa:	fe 01       	movw	r30, r28
    34ac:	e9 54       	subi	r30, 0x49	; 73
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
						_delay_ms(600);
						MotorDriver_MoveForwardLeft();
    34b4:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <MotorDriver_MoveForwardLeft>
    34b8:	fe 01       	movw	r30, r28
    34ba:	ed 54       	subi	r30, 0x4D	; 77
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	a8 ec       	ldi	r26, 0xC8	; 200
    34c4:	b3 e4       	ldi	r27, 0x43	; 67
    34c6:	80 83       	st	Z, r24
    34c8:	91 83       	std	Z+1, r25	; 0x01
    34ca:	a2 83       	std	Z+2, r26	; 0x02
    34cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ce:	8e 01       	movw	r16, r28
    34d0:	01 55       	subi	r16, 0x51	; 81
    34d2:	1f 4f       	sbci	r17, 0xFF	; 255
    34d4:	fe 01       	movw	r30, r28
    34d6:	ed 54       	subi	r30, 0x4D	; 77
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	60 81       	ld	r22, Z
    34dc:	71 81       	ldd	r23, Z+1	; 0x01
    34de:	82 81       	ldd	r24, Z+2	; 0x02
    34e0:	93 81       	ldd	r25, Z+3	; 0x03
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	4a ef       	ldi	r20, 0xFA	; 250
    34e8:	54 e4       	ldi	r21, 0x44	; 68
    34ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	f8 01       	movw	r30, r16
    34f4:	80 83       	st	Z, r24
    34f6:	91 83       	std	Z+1, r25	; 0x01
    34f8:	a2 83       	std	Z+2, r26	; 0x02
    34fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34fc:	fe 01       	movw	r30, r28
    34fe:	e1 55       	subi	r30, 0x51	; 81
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	60 81       	ld	r22, Z
    3504:	71 81       	ldd	r23, Z+1	; 0x01
    3506:	82 81       	ldd	r24, Z+2	; 0x02
    3508:	93 81       	ldd	r25, Z+3	; 0x03
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e8       	ldi	r20, 0x80	; 128
    3510:	5f e3       	ldi	r21, 0x3F	; 63
    3512:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3516:	88 23       	and	r24, r24
    3518:	44 f4       	brge	.+16     	; 0x352a <main+0xdd8>
		__ticks = 1;
    351a:	fe 01       	movw	r30, r28
    351c:	e3 55       	subi	r30, 0x53	; 83
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	91 83       	std	Z+1, r25	; 0x01
    3526:	80 83       	st	Z, r24
    3528:	64 c0       	rjmp	.+200    	; 0x35f2 <main+0xea0>
	else if (__tmp > 65535)
    352a:	fe 01       	movw	r30, r28
    352c:	e1 55       	subi	r30, 0x51	; 81
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	60 81       	ld	r22, Z
    3532:	71 81       	ldd	r23, Z+1	; 0x01
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	93 81       	ldd	r25, Z+3	; 0x03
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	3f ef       	ldi	r19, 0xFF	; 255
    353c:	4f e7       	ldi	r20, 0x7F	; 127
    353e:	57 e4       	ldi	r21, 0x47	; 71
    3540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3544:	18 16       	cp	r1, r24
    3546:	0c f0       	brlt	.+2      	; 0x354a <main+0xdf8>
    3548:	43 c0       	rjmp	.+134    	; 0x35d0 <main+0xe7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354a:	fe 01       	movw	r30, r28
    354c:	ed 54       	subi	r30, 0x4D	; 77
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e2       	ldi	r20, 0x20	; 32
    355e:	51 e4       	ldi	r21, 0x41	; 65
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	8e 01       	movw	r16, r28
    356a:	03 55       	subi	r16, 0x53	; 83
    356c:	1f 4f       	sbci	r17, 0xFF	; 255
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	f8 01       	movw	r30, r16
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	80 83       	st	Z, r24
    3580:	1f c0       	rjmp	.+62     	; 0x35c0 <main+0xe6e>
    3582:	fe 01       	movw	r30, r28
    3584:	e5 55       	subi	r30, 0x55	; 85
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	88 ec       	ldi	r24, 0xC8	; 200
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	91 83       	std	Z+1, r25	; 0x01
    358e:	80 83       	st	Z, r24
    3590:	fe 01       	movw	r30, r28
    3592:	e5 55       	subi	r30, 0x55	; 85
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <main+0xe48>
    359e:	fe 01       	movw	r30, r28
    35a0:	e5 55       	subi	r30, 0x55	; 85
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a8:	de 01       	movw	r26, r28
    35aa:	a3 55       	subi	r26, 0x53	; 83
    35ac:	bf 4f       	sbci	r27, 0xFF	; 255
    35ae:	fe 01       	movw	r30, r28
    35b0:	e3 55       	subi	r30, 0x53	; 83
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	80 81       	ld	r24, Z
    35b6:	91 81       	ldd	r25, Z+1	; 0x01
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	11 96       	adiw	r26, 0x01	; 1
    35bc:	9c 93       	st	X, r25
    35be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c0:	fe 01       	movw	r30, r28
    35c2:	e3 55       	subi	r30, 0x53	; 83
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	d1 f6       	brne	.-76     	; 0x3582 <main+0xe30>
    35ce:	47 c7       	rjmp	.+3726   	; 0x445e <main+0x1d0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d0:	8e 01       	movw	r16, r28
    35d2:	03 55       	subi	r16, 0x53	; 83
    35d4:	1f 4f       	sbci	r17, 0xFF	; 255
    35d6:	fe 01       	movw	r30, r28
    35d8:	e1 55       	subi	r30, 0x51	; 81
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	60 81       	ld	r22, Z
    35de:	71 81       	ldd	r23, Z+1	; 0x01
    35e0:	82 81       	ldd	r24, Z+2	; 0x02
    35e2:	93 81       	ldd	r25, Z+3	; 0x03
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	f8 01       	movw	r30, r16
    35ee:	91 83       	std	Z+1, r25	; 0x01
    35f0:	80 83       	st	Z, r24
    35f2:	de 01       	movw	r26, r28
    35f4:	a7 55       	subi	r26, 0x57	; 87
    35f6:	bf 4f       	sbci	r27, 0xFF	; 255
    35f8:	fe 01       	movw	r30, r28
    35fa:	e3 55       	subi	r30, 0x53	; 83
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 81       	ld	r24, Z
    3600:	91 81       	ldd	r25, Z+1	; 0x01
    3602:	11 96       	adiw	r26, 0x01	; 1
    3604:	9c 93       	st	X, r25
    3606:	8e 93       	st	-X, r24
    3608:	fe 01       	movw	r30, r28
    360a:	e7 55       	subi	r30, 0x57	; 87
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <main+0xec0>
    3616:	fe 01       	movw	r30, r28
    3618:	e7 55       	subi	r30, 0x57	; 87
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	91 83       	std	Z+1, r25	; 0x01
    361e:	80 83       	st	Z, r24
    3620:	1e c7       	rjmp	.+3644   	; 0x445e <main+0x1d0c>
						_delay_ms(400);
					}
					else if(dis_right<dis_left && dis_left >STOP_DISTANCE  )
    3622:	90 91 7f 00 	lds	r25, 0x007F
    3626:	80 91 80 00 	lds	r24, 0x0080
    362a:	98 17       	cp	r25, r24
    362c:	08 f0       	brcs	.+2      	; 0x3630 <main+0xede>
    362e:	90 c3       	rjmp	.+1824   	; 0x3d50 <main+0x15fe>
    3630:	80 91 80 00 	lds	r24, 0x0080
    3634:	8f 31       	cpi	r24, 0x1F	; 31
    3636:	08 f4       	brcc	.+2      	; 0x363a <main+0xee8>
    3638:	8b c3       	rjmp	.+1814   	; 0x3d50 <main+0x15fe>
					{
						MotorDriver_MoveForwardLeft();
    363a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <MotorDriver_MoveForwardLeft>
    363e:	fe 01       	movw	r30, r28
    3640:	eb 55       	subi	r30, 0x5B	; 91
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	aa ef       	ldi	r26, 0xFA	; 250
    364a:	b3 e4       	ldi	r27, 0x43	; 67
    364c:	80 83       	st	Z, r24
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	a2 83       	std	Z+2, r26	; 0x02
    3652:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3654:	8e 01       	movw	r16, r28
    3656:	0f 55       	subi	r16, 0x5F	; 95
    3658:	1f 4f       	sbci	r17, 0xFF	; 255
    365a:	fe 01       	movw	r30, r28
    365c:	eb 55       	subi	r30, 0x5B	; 91
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	60 81       	ld	r22, Z
    3662:	71 81       	ldd	r23, Z+1	; 0x01
    3664:	82 81       	ldd	r24, Z+2	; 0x02
    3666:	93 81       	ldd	r25, Z+3	; 0x03
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	4a ef       	ldi	r20, 0xFA	; 250
    366e:	54 e4       	ldi	r21, 0x44	; 68
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	f8 01       	movw	r30, r16
    367a:	80 83       	st	Z, r24
    367c:	91 83       	std	Z+1, r25	; 0x01
    367e:	a2 83       	std	Z+2, r26	; 0x02
    3680:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3682:	fe 01       	movw	r30, r28
    3684:	ef 55       	subi	r30, 0x5F	; 95
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	60 81       	ld	r22, Z
    368a:	71 81       	ldd	r23, Z+1	; 0x01
    368c:	82 81       	ldd	r24, Z+2	; 0x02
    368e:	93 81       	ldd	r25, Z+3	; 0x03
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	40 e8       	ldi	r20, 0x80	; 128
    3696:	5f e3       	ldi	r21, 0x3F	; 63
    3698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    369c:	88 23       	and	r24, r24
    369e:	44 f4       	brge	.+16     	; 0x36b0 <main+0xf5e>
		__ticks = 1;
    36a0:	fe 01       	movw	r30, r28
    36a2:	e1 56       	subi	r30, 0x61	; 97
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	80 83       	st	Z, r24
    36ae:	64 c0       	rjmp	.+200    	; 0x3778 <main+0x1026>
	else if (__tmp > 65535)
    36b0:	fe 01       	movw	r30, r28
    36b2:	ef 55       	subi	r30, 0x5F	; 95
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	60 81       	ld	r22, Z
    36b8:	71 81       	ldd	r23, Z+1	; 0x01
    36ba:	82 81       	ldd	r24, Z+2	; 0x02
    36bc:	93 81       	ldd	r25, Z+3	; 0x03
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	3f ef       	ldi	r19, 0xFF	; 255
    36c2:	4f e7       	ldi	r20, 0x7F	; 127
    36c4:	57 e4       	ldi	r21, 0x47	; 71
    36c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ca:	18 16       	cp	r1, r24
    36cc:	0c f0       	brlt	.+2      	; 0x36d0 <main+0xf7e>
    36ce:	43 c0       	rjmp	.+134    	; 0x3756 <main+0x1004>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d0:	fe 01       	movw	r30, r28
    36d2:	eb 55       	subi	r30, 0x5B	; 91
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	60 81       	ld	r22, Z
    36d8:	71 81       	ldd	r23, Z+1	; 0x01
    36da:	82 81       	ldd	r24, Z+2	; 0x02
    36dc:	93 81       	ldd	r25, Z+3	; 0x03
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	40 e2       	ldi	r20, 0x20	; 32
    36e4:	51 e4       	ldi	r21, 0x41	; 65
    36e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	8e 01       	movw	r16, r28
    36f0:	01 56       	subi	r16, 0x61	; 97
    36f2:	1f 4f       	sbci	r17, 0xFF	; 255
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	f8 01       	movw	r30, r16
    3702:	91 83       	std	Z+1, r25	; 0x01
    3704:	80 83       	st	Z, r24
    3706:	1f c0       	rjmp	.+62     	; 0x3746 <main+0xff4>
    3708:	fe 01       	movw	r30, r28
    370a:	e3 56       	subi	r30, 0x63	; 99
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	88 ec       	ldi	r24, 0xC8	; 200
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	91 83       	std	Z+1, r25	; 0x01
    3714:	80 83       	st	Z, r24
    3716:	fe 01       	movw	r30, r28
    3718:	e3 56       	subi	r30, 0x63	; 99
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	80 81       	ld	r24, Z
    371e:	91 81       	ldd	r25, Z+1	; 0x01
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	f1 f7       	brne	.-4      	; 0x3720 <main+0xfce>
    3724:	fe 01       	movw	r30, r28
    3726:	e3 56       	subi	r30, 0x63	; 99
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372e:	de 01       	movw	r26, r28
    3730:	a1 56       	subi	r26, 0x61	; 97
    3732:	bf 4f       	sbci	r27, 0xFF	; 255
    3734:	fe 01       	movw	r30, r28
    3736:	e1 56       	subi	r30, 0x61	; 97
    3738:	ff 4f       	sbci	r31, 0xFF	; 255
    373a:	80 81       	ld	r24, Z
    373c:	91 81       	ldd	r25, Z+1	; 0x01
    373e:	01 97       	sbiw	r24, 0x01	; 1
    3740:	11 96       	adiw	r26, 0x01	; 1
    3742:	9c 93       	st	X, r25
    3744:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3746:	fe 01       	movw	r30, r28
    3748:	e1 56       	subi	r30, 0x61	; 97
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	80 81       	ld	r24, Z
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	00 97       	sbiw	r24, 0x00	; 0
    3752:	d1 f6       	brne	.-76     	; 0x3708 <main+0xfb6>
    3754:	27 c0       	rjmp	.+78     	; 0x37a4 <main+0x1052>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3756:	8e 01       	movw	r16, r28
    3758:	01 56       	subi	r16, 0x61	; 97
    375a:	1f 4f       	sbci	r17, 0xFF	; 255
    375c:	fe 01       	movw	r30, r28
    375e:	ef 55       	subi	r30, 0x5F	; 95
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	60 81       	ld	r22, Z
    3764:	71 81       	ldd	r23, Z+1	; 0x01
    3766:	82 81       	ldd	r24, Z+2	; 0x02
    3768:	93 81       	ldd	r25, Z+3	; 0x03
    376a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	f8 01       	movw	r30, r16
    3774:	91 83       	std	Z+1, r25	; 0x01
    3776:	80 83       	st	Z, r24
    3778:	de 01       	movw	r26, r28
    377a:	a5 56       	subi	r26, 0x65	; 101
    377c:	bf 4f       	sbci	r27, 0xFF	; 255
    377e:	fe 01       	movw	r30, r28
    3780:	e1 56       	subi	r30, 0x61	; 97
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	80 81       	ld	r24, Z
    3786:	91 81       	ldd	r25, Z+1	; 0x01
    3788:	8d 93       	st	X+, r24
    378a:	9c 93       	st	X, r25
    378c:	fe 01       	movw	r30, r28
    378e:	e5 56       	subi	r30, 0x65	; 101
    3790:	ff 4f       	sbci	r31, 0xFF	; 255
    3792:	80 81       	ld	r24, Z
    3794:	91 81       	ldd	r25, Z+1	; 0x01
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <main+0x1044>
    379a:	fe 01       	movw	r30, r28
    379c:	e5 56       	subi	r30, 0x65	; 101
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	91 83       	std	Z+1, r25	; 0x01
    37a2:	80 83       	st	Z, r24
						_delay_ms(500);
						MotorDriver_MoveForward();
    37a4:	0e 94 a9 12 	call	0x2552	; 0x2552 <MotorDriver_MoveForward>
    37a8:	fe 01       	movw	r30, r28
    37aa:	e9 56       	subi	r30, 0x69	; 105
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	a6 e1       	ldi	r26, 0x16	; 22
    37b4:	b4 e4       	ldi	r27, 0x44	; 68
    37b6:	80 83       	st	Z, r24
    37b8:	91 83       	std	Z+1, r25	; 0x01
    37ba:	a2 83       	std	Z+2, r26	; 0x02
    37bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37be:	8e 01       	movw	r16, r28
    37c0:	0d 56       	subi	r16, 0x6D	; 109
    37c2:	1f 4f       	sbci	r17, 0xFF	; 255
    37c4:	fe 01       	movw	r30, r28
    37c6:	e9 56       	subi	r30, 0x69	; 105
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	60 81       	ld	r22, Z
    37cc:	71 81       	ldd	r23, Z+1	; 0x01
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	93 81       	ldd	r25, Z+3	; 0x03
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	4a ef       	ldi	r20, 0xFA	; 250
    37d8:	54 e4       	ldi	r21, 0x44	; 68
    37da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	f8 01       	movw	r30, r16
    37e4:	80 83       	st	Z, r24
    37e6:	91 83       	std	Z+1, r25	; 0x01
    37e8:	a2 83       	std	Z+2, r26	; 0x02
    37ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37ec:	fe 01       	movw	r30, r28
    37ee:	ed 56       	subi	r30, 0x6D	; 109
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	60 81       	ld	r22, Z
    37f4:	71 81       	ldd	r23, Z+1	; 0x01
    37f6:	82 81       	ldd	r24, Z+2	; 0x02
    37f8:	93 81       	ldd	r25, Z+3	; 0x03
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e8       	ldi	r20, 0x80	; 128
    3800:	5f e3       	ldi	r21, 0x3F	; 63
    3802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3806:	88 23       	and	r24, r24
    3808:	44 f4       	brge	.+16     	; 0x381a <main+0x10c8>
		__ticks = 1;
    380a:	fe 01       	movw	r30, r28
    380c:	ef 56       	subi	r30, 0x6F	; 111
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
    3818:	64 c0       	rjmp	.+200    	; 0x38e2 <main+0x1190>
	else if (__tmp > 65535)
    381a:	fe 01       	movw	r30, r28
    381c:	ed 56       	subi	r30, 0x6D	; 109
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	60 81       	ld	r22, Z
    3822:	71 81       	ldd	r23, Z+1	; 0x01
    3824:	82 81       	ldd	r24, Z+2	; 0x02
    3826:	93 81       	ldd	r25, Z+3	; 0x03
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	3f ef       	ldi	r19, 0xFF	; 255
    382c:	4f e7       	ldi	r20, 0x7F	; 127
    382e:	57 e4       	ldi	r21, 0x47	; 71
    3830:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3834:	18 16       	cp	r1, r24
    3836:	0c f0       	brlt	.+2      	; 0x383a <main+0x10e8>
    3838:	43 c0       	rjmp	.+134    	; 0x38c0 <main+0x116e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383a:	fe 01       	movw	r30, r28
    383c:	e9 56       	subi	r30, 0x69	; 105
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	60 81       	ld	r22, Z
    3842:	71 81       	ldd	r23, Z+1	; 0x01
    3844:	82 81       	ldd	r24, Z+2	; 0x02
    3846:	93 81       	ldd	r25, Z+3	; 0x03
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	40 e2       	ldi	r20, 0x20	; 32
    384e:	51 e4       	ldi	r21, 0x41	; 65
    3850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	8e 01       	movw	r16, r28
    385a:	0f 56       	subi	r16, 0x6F	; 111
    385c:	1f 4f       	sbci	r17, 0xFF	; 255
    385e:	bc 01       	movw	r22, r24
    3860:	cd 01       	movw	r24, r26
    3862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	f8 01       	movw	r30, r16
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	80 83       	st	Z, r24
    3870:	1f c0       	rjmp	.+62     	; 0x38b0 <main+0x115e>
    3872:	fe 01       	movw	r30, r28
    3874:	e1 57       	subi	r30, 0x71	; 113
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	88 ec       	ldi	r24, 0xC8	; 200
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	91 83       	std	Z+1, r25	; 0x01
    387e:	80 83       	st	Z, r24
    3880:	fe 01       	movw	r30, r28
    3882:	e1 57       	subi	r30, 0x71	; 113
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 81       	ld	r24, Z
    3888:	91 81       	ldd	r25, Z+1	; 0x01
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <main+0x1138>
    388e:	fe 01       	movw	r30, r28
    3890:	e1 57       	subi	r30, 0x71	; 113
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3898:	de 01       	movw	r26, r28
    389a:	af 56       	subi	r26, 0x6F	; 111
    389c:	bf 4f       	sbci	r27, 0xFF	; 255
    389e:	fe 01       	movw	r30, r28
    38a0:	ef 56       	subi	r30, 0x6F	; 111
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	11 96       	adiw	r26, 0x01	; 1
    38ac:	9c 93       	st	X, r25
    38ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b0:	fe 01       	movw	r30, r28
    38b2:	ef 56       	subi	r30, 0x6F	; 111
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	d1 f6       	brne	.-76     	; 0x3872 <main+0x1120>
    38be:	27 c0       	rjmp	.+78     	; 0x390e <main+0x11bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c0:	8e 01       	movw	r16, r28
    38c2:	0f 56       	subi	r16, 0x6F	; 111
    38c4:	1f 4f       	sbci	r17, 0xFF	; 255
    38c6:	fe 01       	movw	r30, r28
    38c8:	ed 56       	subi	r30, 0x6D	; 109
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	60 81       	ld	r22, Z
    38ce:	71 81       	ldd	r23, Z+1	; 0x01
    38d0:	82 81       	ldd	r24, Z+2	; 0x02
    38d2:	93 81       	ldd	r25, Z+3	; 0x03
    38d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	f8 01       	movw	r30, r16
    38de:	91 83       	std	Z+1, r25	; 0x01
    38e0:	80 83       	st	Z, r24
    38e2:	de 01       	movw	r26, r28
    38e4:	a3 57       	subi	r26, 0x73	; 115
    38e6:	bf 4f       	sbci	r27, 0xFF	; 255
    38e8:	fe 01       	movw	r30, r28
    38ea:	ef 56       	subi	r30, 0x6F	; 111
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	80 81       	ld	r24, Z
    38f0:	91 81       	ldd	r25, Z+1	; 0x01
    38f2:	8d 93       	st	X+, r24
    38f4:	9c 93       	st	X, r25
    38f6:	fe 01       	movw	r30, r28
    38f8:	e3 57       	subi	r30, 0x73	; 115
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	80 81       	ld	r24, Z
    38fe:	91 81       	ldd	r25, Z+1	; 0x01
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	f1 f7       	brne	.-4      	; 0x3900 <main+0x11ae>
    3904:	fe 01       	movw	r30, r28
    3906:	e3 57       	subi	r30, 0x73	; 115
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	91 83       	std	Z+1, r25	; 0x01
    390c:	80 83       	st	Z, r24
						_delay_ms(600);
						MotorDriver_MoveForwardRight();
    390e:	0e 94 df 12 	call	0x25be	; 0x25be <MotorDriver_MoveForwardRight>
    3912:	fe 01       	movw	r30, r28
    3914:	e7 57       	subi	r30, 0x77	; 119
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	aa ef       	ldi	r26, 0xFA	; 250
    391e:	b3 e4       	ldi	r27, 0x43	; 67
    3920:	80 83       	st	Z, r24
    3922:	91 83       	std	Z+1, r25	; 0x01
    3924:	a2 83       	std	Z+2, r26	; 0x02
    3926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3928:	8e 01       	movw	r16, r28
    392a:	0b 57       	subi	r16, 0x7B	; 123
    392c:	1f 4f       	sbci	r17, 0xFF	; 255
    392e:	fe 01       	movw	r30, r28
    3930:	e7 57       	subi	r30, 0x77	; 119
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	60 81       	ld	r22, Z
    3936:	71 81       	ldd	r23, Z+1	; 0x01
    3938:	82 81       	ldd	r24, Z+2	; 0x02
    393a:	93 81       	ldd	r25, Z+3	; 0x03
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	4a ef       	ldi	r20, 0xFA	; 250
    3942:	54 e4       	ldi	r21, 0x44	; 68
    3944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	f8 01       	movw	r30, r16
    394e:	80 83       	st	Z, r24
    3950:	91 83       	std	Z+1, r25	; 0x01
    3952:	a2 83       	std	Z+2, r26	; 0x02
    3954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3956:	fe 01       	movw	r30, r28
    3958:	eb 57       	subi	r30, 0x7B	; 123
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3970:	88 23       	and	r24, r24
    3972:	44 f4       	brge	.+16     	; 0x3984 <main+0x1232>
		__ticks = 1;
    3974:	fe 01       	movw	r30, r28
    3976:	ed 57       	subi	r30, 0x7D	; 125
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	91 83       	std	Z+1, r25	; 0x01
    3980:	80 83       	st	Z, r24
    3982:	64 c0       	rjmp	.+200    	; 0x3a4c <main+0x12fa>
	else if (__tmp > 65535)
    3984:	fe 01       	movw	r30, r28
    3986:	eb 57       	subi	r30, 0x7B	; 123
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	60 81       	ld	r22, Z
    398c:	71 81       	ldd	r23, Z+1	; 0x01
    398e:	82 81       	ldd	r24, Z+2	; 0x02
    3990:	93 81       	ldd	r25, Z+3	; 0x03
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	4f e7       	ldi	r20, 0x7F	; 127
    3998:	57 e4       	ldi	r21, 0x47	; 71
    399a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    399e:	18 16       	cp	r1, r24
    39a0:	0c f0       	brlt	.+2      	; 0x39a4 <main+0x1252>
    39a2:	43 c0       	rjmp	.+134    	; 0x3a2a <main+0x12d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a4:	fe 01       	movw	r30, r28
    39a6:	e7 57       	subi	r30, 0x77	; 119
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	60 81       	ld	r22, Z
    39ac:	71 81       	ldd	r23, Z+1	; 0x01
    39ae:	82 81       	ldd	r24, Z+2	; 0x02
    39b0:	93 81       	ldd	r25, Z+3	; 0x03
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e2       	ldi	r20, 0x20	; 32
    39b8:	51 e4       	ldi	r21, 0x41	; 65
    39ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	8e 01       	movw	r16, r28
    39c4:	0d 57       	subi	r16, 0x7D	; 125
    39c6:	1f 4f       	sbci	r17, 0xFF	; 255
    39c8:	bc 01       	movw	r22, r24
    39ca:	cd 01       	movw	r24, r26
    39cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	f8 01       	movw	r30, r16
    39d6:	91 83       	std	Z+1, r25	; 0x01
    39d8:	80 83       	st	Z, r24
    39da:	1f c0       	rjmp	.+62     	; 0x3a1a <main+0x12c8>
    39dc:	fe 01       	movw	r30, r28
    39de:	ef 57       	subi	r30, 0x7F	; 127
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	88 ec       	ldi	r24, 0xC8	; 200
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	80 83       	st	Z, r24
    39ea:	fe 01       	movw	r30, r28
    39ec:	ef 57       	subi	r30, 0x7F	; 127
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	80 81       	ld	r24, Z
    39f2:	91 81       	ldd	r25, Z+1	; 0x01
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	f1 f7       	brne	.-4      	; 0x39f4 <main+0x12a2>
    39f8:	fe 01       	movw	r30, r28
    39fa:	ef 57       	subi	r30, 0x7F	; 127
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	91 83       	std	Z+1, r25	; 0x01
    3a00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a02:	de 01       	movw	r26, r28
    3a04:	ad 57       	subi	r26, 0x7D	; 125
    3a06:	bf 4f       	sbci	r27, 0xFF	; 255
    3a08:	fe 01       	movw	r30, r28
    3a0a:	ed 57       	subi	r30, 0x7D	; 125
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	80 81       	ld	r24, Z
    3a10:	91 81       	ldd	r25, Z+1	; 0x01
    3a12:	01 97       	sbiw	r24, 0x01	; 1
    3a14:	11 96       	adiw	r26, 0x01	; 1
    3a16:	9c 93       	st	X, r25
    3a18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	ed 57       	subi	r30, 0x7D	; 125
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 81       	ld	r24, Z
    3a22:	91 81       	ldd	r25, Z+1	; 0x01
    3a24:	00 97       	sbiw	r24, 0x00	; 0
    3a26:	d1 f6       	brne	.-76     	; 0x39dc <main+0x128a>
    3a28:	27 c0       	rjmp	.+78     	; 0x3a78 <main+0x1326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a2a:	8e 01       	movw	r16, r28
    3a2c:	0d 57       	subi	r16, 0x7D	; 125
    3a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a30:	fe 01       	movw	r30, r28
    3a32:	eb 57       	subi	r30, 0x7B	; 123
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	60 81       	ld	r22, Z
    3a38:	71 81       	ldd	r23, Z+1	; 0x01
    3a3a:	82 81       	ldd	r24, Z+2	; 0x02
    3a3c:	93 81       	ldd	r25, Z+3	; 0x03
    3a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	f8 01       	movw	r30, r16
    3a48:	91 83       	std	Z+1, r25	; 0x01
    3a4a:	80 83       	st	Z, r24
    3a4c:	de 01       	movw	r26, r28
    3a4e:	a1 58       	subi	r26, 0x81	; 129
    3a50:	bf 4f       	sbci	r27, 0xFF	; 255
    3a52:	fe 01       	movw	r30, r28
    3a54:	ed 57       	subi	r30, 0x7D	; 125
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	80 81       	ld	r24, Z
    3a5a:	91 81       	ldd	r25, Z+1	; 0x01
    3a5c:	8d 93       	st	X+, r24
    3a5e:	9c 93       	st	X, r25
    3a60:	fe 01       	movw	r30, r28
    3a62:	e1 58       	subi	r30, 0x81	; 129
    3a64:	ff 4f       	sbci	r31, 0xFF	; 255
    3a66:	80 81       	ld	r24, Z
    3a68:	91 81       	ldd	r25, Z+1	; 0x01
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	f1 f7       	brne	.-4      	; 0x3a6a <main+0x1318>
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e1 58       	subi	r30, 0x81	; 129
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	91 83       	std	Z+1, r25	; 0x01
    3a76:	80 83       	st	Z, r24
						_delay_ms(500);
						MotorDriver_MoveForward();
    3a78:	0e 94 a9 12 	call	0x2552	; 0x2552 <MotorDriver_MoveForward>
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e5 58       	subi	r30, 0x85	; 133
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	a6 e1       	ldi	r26, 0x16	; 22
    3a88:	b4 e4       	ldi	r27, 0x44	; 68
    3a8a:	80 83       	st	Z, r24
    3a8c:	91 83       	std	Z+1, r25	; 0x01
    3a8e:	a2 83       	std	Z+2, r26	; 0x02
    3a90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a92:	8e 01       	movw	r16, r28
    3a94:	09 58       	subi	r16, 0x89	; 137
    3a96:	1f 4f       	sbci	r17, 0xFF	; 255
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e5 58       	subi	r30, 0x85	; 133
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	4a ef       	ldi	r20, 0xFA	; 250
    3aac:	54 e4       	ldi	r21, 0x44	; 68
    3aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	f8 01       	movw	r30, r16
    3ab8:	80 83       	st	Z, r24
    3aba:	91 83       	std	Z+1, r25	; 0x01
    3abc:	a2 83       	std	Z+2, r26	; 0x02
    3abe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	e9 58       	subi	r30, 0x89	; 137
    3ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac6:	60 81       	ld	r22, Z
    3ac8:	71 81       	ldd	r23, Z+1	; 0x01
    3aca:	82 81       	ldd	r24, Z+2	; 0x02
    3acc:	93 81       	ldd	r25, Z+3	; 0x03
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e8       	ldi	r20, 0x80	; 128
    3ad4:	5f e3       	ldi	r21, 0x3F	; 63
    3ad6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ada:	88 23       	and	r24, r24
    3adc:	44 f4       	brge	.+16     	; 0x3aee <main+0x139c>
		__ticks = 1;
    3ade:	fe 01       	movw	r30, r28
    3ae0:	eb 58       	subi	r30, 0x8B	; 139
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	80 83       	st	Z, r24
    3aec:	64 c0       	rjmp	.+200    	; 0x3bb6 <main+0x1464>
	else if (__tmp > 65535)
    3aee:	fe 01       	movw	r30, r28
    3af0:	e9 58       	subi	r30, 0x89	; 137
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	60 81       	ld	r22, Z
    3af6:	71 81       	ldd	r23, Z+1	; 0x01
    3af8:	82 81       	ldd	r24, Z+2	; 0x02
    3afa:	93 81       	ldd	r25, Z+3	; 0x03
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	3f ef       	ldi	r19, 0xFF	; 255
    3b00:	4f e7       	ldi	r20, 0x7F	; 127
    3b02:	57 e4       	ldi	r21, 0x47	; 71
    3b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b08:	18 16       	cp	r1, r24
    3b0a:	0c f0       	brlt	.+2      	; 0x3b0e <main+0x13bc>
    3b0c:	43 c0       	rjmp	.+134    	; 0x3b94 <main+0x1442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b0e:	fe 01       	movw	r30, r28
    3b10:	e5 58       	subi	r30, 0x85	; 133
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	60 81       	ld	r22, Z
    3b16:	71 81       	ldd	r23, Z+1	; 0x01
    3b18:	82 81       	ldd	r24, Z+2	; 0x02
    3b1a:	93 81       	ldd	r25, Z+3	; 0x03
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	40 e2       	ldi	r20, 0x20	; 32
    3b22:	51 e4       	ldi	r21, 0x41	; 65
    3b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	8e 01       	movw	r16, r28
    3b2e:	0b 58       	subi	r16, 0x8B	; 139
    3b30:	1f 4f       	sbci	r17, 0xFF	; 255
    3b32:	bc 01       	movw	r22, r24
    3b34:	cd 01       	movw	r24, r26
    3b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	f8 01       	movw	r30, r16
    3b40:	91 83       	std	Z+1, r25	; 0x01
    3b42:	80 83       	st	Z, r24
    3b44:	1f c0       	rjmp	.+62     	; 0x3b84 <main+0x1432>
    3b46:	fe 01       	movw	r30, r28
    3b48:	ed 58       	subi	r30, 0x8D	; 141
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	88 ec       	ldi	r24, 0xC8	; 200
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	80 83       	st	Z, r24
    3b54:	fe 01       	movw	r30, r28
    3b56:	ed 58       	subi	r30, 0x8D	; 141
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	80 81       	ld	r24, Z
    3b5c:	91 81       	ldd	r25, Z+1	; 0x01
    3b5e:	01 97       	sbiw	r24, 0x01	; 1
    3b60:	f1 f7       	brne	.-4      	; 0x3b5e <main+0x140c>
    3b62:	fe 01       	movw	r30, r28
    3b64:	ed 58       	subi	r30, 0x8D	; 141
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	91 83       	std	Z+1, r25	; 0x01
    3b6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b6c:	de 01       	movw	r26, r28
    3b6e:	ab 58       	subi	r26, 0x8B	; 139
    3b70:	bf 4f       	sbci	r27, 0xFF	; 255
    3b72:	fe 01       	movw	r30, r28
    3b74:	eb 58       	subi	r30, 0x8B	; 139
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	80 81       	ld	r24, Z
    3b7a:	91 81       	ldd	r25, Z+1	; 0x01
    3b7c:	01 97       	sbiw	r24, 0x01	; 1
    3b7e:	11 96       	adiw	r26, 0x01	; 1
    3b80:	9c 93       	st	X, r25
    3b82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b84:	fe 01       	movw	r30, r28
    3b86:	eb 58       	subi	r30, 0x8B	; 139
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	80 81       	ld	r24, Z
    3b8c:	91 81       	ldd	r25, Z+1	; 0x01
    3b8e:	00 97       	sbiw	r24, 0x00	; 0
    3b90:	d1 f6       	brne	.-76     	; 0x3b46 <main+0x13f4>
    3b92:	27 c0       	rjmp	.+78     	; 0x3be2 <main+0x1490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b94:	8e 01       	movw	r16, r28
    3b96:	0b 58       	subi	r16, 0x8B	; 139
    3b98:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	e9 58       	subi	r30, 0x89	; 137
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	60 81       	ld	r22, Z
    3ba2:	71 81       	ldd	r23, Z+1	; 0x01
    3ba4:	82 81       	ldd	r24, Z+2	; 0x02
    3ba6:	93 81       	ldd	r25, Z+3	; 0x03
    3ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	f8 01       	movw	r30, r16
    3bb2:	91 83       	std	Z+1, r25	; 0x01
    3bb4:	80 83       	st	Z, r24
    3bb6:	de 01       	movw	r26, r28
    3bb8:	af 58       	subi	r26, 0x8F	; 143
    3bba:	bf 4f       	sbci	r27, 0xFF	; 255
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	eb 58       	subi	r30, 0x8B	; 139
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	80 81       	ld	r24, Z
    3bc4:	91 81       	ldd	r25, Z+1	; 0x01
    3bc6:	8d 93       	st	X+, r24
    3bc8:	9c 93       	st	X, r25
    3bca:	fe 01       	movw	r30, r28
    3bcc:	ef 58       	subi	r30, 0x8F	; 143
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	80 81       	ld	r24, Z
    3bd2:	91 81       	ldd	r25, Z+1	; 0x01
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <main+0x1482>
    3bd8:	fe 01       	movw	r30, r28
    3bda:	ef 58       	subi	r30, 0x8F	; 143
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	91 83       	std	Z+1, r25	; 0x01
    3be0:	80 83       	st	Z, r24
						_delay_ms(600);
						MotorDriver_MoveForwardRight();
    3be2:	0e 94 df 12 	call	0x25be	; 0x25be <MotorDriver_MoveForwardRight>
    3be6:	fe 01       	movw	r30, r28
    3be8:	e3 59       	subi	r30, 0x93	; 147
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	a8 ec       	ldi	r26, 0xC8	; 200
    3bf2:	b3 e4       	ldi	r27, 0x43	; 67
    3bf4:	80 83       	st	Z, r24
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	a2 83       	std	Z+2, r26	; 0x02
    3bfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bfc:	8e 01       	movw	r16, r28
    3bfe:	07 59       	subi	r16, 0x97	; 151
    3c00:	1f 4f       	sbci	r17, 0xFF	; 255
    3c02:	fe 01       	movw	r30, r28
    3c04:	e3 59       	subi	r30, 0x93	; 147
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	60 81       	ld	r22, Z
    3c0a:	71 81       	ldd	r23, Z+1	; 0x01
    3c0c:	82 81       	ldd	r24, Z+2	; 0x02
    3c0e:	93 81       	ldd	r25, Z+3	; 0x03
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	4a ef       	ldi	r20, 0xFA	; 250
    3c16:	54 e4       	ldi	r21, 0x44	; 68
    3c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	f8 01       	movw	r30, r16
    3c22:	80 83       	st	Z, r24
    3c24:	91 83       	std	Z+1, r25	; 0x01
    3c26:	a2 83       	std	Z+2, r26	; 0x02
    3c28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e7 59       	subi	r30, 0x97	; 151
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	60 81       	ld	r22, Z
    3c32:	71 81       	ldd	r23, Z+1	; 0x01
    3c34:	82 81       	ldd	r24, Z+2	; 0x02
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	40 e8       	ldi	r20, 0x80	; 128
    3c3e:	5f e3       	ldi	r21, 0x3F	; 63
    3c40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c44:	88 23       	and	r24, r24
    3c46:	44 f4       	brge	.+16     	; 0x3c58 <main+0x1506>
		__ticks = 1;
    3c48:	fe 01       	movw	r30, r28
    3c4a:	e9 59       	subi	r30, 0x99	; 153
    3c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	91 83       	std	Z+1, r25	; 0x01
    3c54:	80 83       	st	Z, r24
    3c56:	64 c0       	rjmp	.+200    	; 0x3d20 <main+0x15ce>
	else if (__tmp > 65535)
    3c58:	fe 01       	movw	r30, r28
    3c5a:	e7 59       	subi	r30, 0x97	; 151
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	60 81       	ld	r22, Z
    3c60:	71 81       	ldd	r23, Z+1	; 0x01
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	3f ef       	ldi	r19, 0xFF	; 255
    3c6a:	4f e7       	ldi	r20, 0x7F	; 127
    3c6c:	57 e4       	ldi	r21, 0x47	; 71
    3c6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c72:	18 16       	cp	r1, r24
    3c74:	0c f0       	brlt	.+2      	; 0x3c78 <main+0x1526>
    3c76:	43 c0       	rjmp	.+134    	; 0x3cfe <main+0x15ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e3 59       	subi	r30, 0x93	; 147
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	60 81       	ld	r22, Z
    3c80:	71 81       	ldd	r23, Z+1	; 0x01
    3c82:	82 81       	ldd	r24, Z+2	; 0x02
    3c84:	93 81       	ldd	r25, Z+3	; 0x03
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	40 e2       	ldi	r20, 0x20	; 32
    3c8c:	51 e4       	ldi	r21, 0x41	; 65
    3c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	8e 01       	movw	r16, r28
    3c98:	09 59       	subi	r16, 0x99	; 153
    3c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9c:	bc 01       	movw	r22, r24
    3c9e:	cd 01       	movw	r24, r26
    3ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	f8 01       	movw	r30, r16
    3caa:	91 83       	std	Z+1, r25	; 0x01
    3cac:	80 83       	st	Z, r24
    3cae:	1f c0       	rjmp	.+62     	; 0x3cee <main+0x159c>
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	eb 59       	subi	r30, 0x9B	; 155
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	88 ec       	ldi	r24, 0xC8	; 200
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	91 83       	std	Z+1, r25	; 0x01
    3cbc:	80 83       	st	Z, r24
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	eb 59       	subi	r30, 0x9B	; 155
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	80 81       	ld	r24, Z
    3cc6:	91 81       	ldd	r25, Z+1	; 0x01
    3cc8:	01 97       	sbiw	r24, 0x01	; 1
    3cca:	f1 f7       	brne	.-4      	; 0x3cc8 <main+0x1576>
    3ccc:	fe 01       	movw	r30, r28
    3cce:	eb 59       	subi	r30, 0x9B	; 155
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	91 83       	std	Z+1, r25	; 0x01
    3cd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd6:	de 01       	movw	r26, r28
    3cd8:	a9 59       	subi	r26, 0x99	; 153
    3cda:	bf 4f       	sbci	r27, 0xFF	; 255
    3cdc:	fe 01       	movw	r30, r28
    3cde:	e9 59       	subi	r30, 0x99	; 153
    3ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce2:	80 81       	ld	r24, Z
    3ce4:	91 81       	ldd	r25, Z+1	; 0x01
    3ce6:	01 97       	sbiw	r24, 0x01	; 1
    3ce8:	11 96       	adiw	r26, 0x01	; 1
    3cea:	9c 93       	st	X, r25
    3cec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cee:	fe 01       	movw	r30, r28
    3cf0:	e9 59       	subi	r30, 0x99	; 153
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	80 81       	ld	r24, Z
    3cf6:	91 81       	ldd	r25, Z+1	; 0x01
    3cf8:	00 97       	sbiw	r24, 0x00	; 0
    3cfa:	d1 f6       	brne	.-76     	; 0x3cb0 <main+0x155e>
    3cfc:	b0 c3       	rjmp	.+1888   	; 0x445e <main+0x1d0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cfe:	8e 01       	movw	r16, r28
    3d00:	09 59       	subi	r16, 0x99	; 153
    3d02:	1f 4f       	sbci	r17, 0xFF	; 255
    3d04:	fe 01       	movw	r30, r28
    3d06:	e7 59       	subi	r30, 0x97	; 151
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	60 81       	ld	r22, Z
    3d0c:	71 81       	ldd	r23, Z+1	; 0x01
    3d0e:	82 81       	ldd	r24, Z+2	; 0x02
    3d10:	93 81       	ldd	r25, Z+3	; 0x03
    3d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	f8 01       	movw	r30, r16
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	80 83       	st	Z, r24
    3d20:	de 01       	movw	r26, r28
    3d22:	ad 59       	subi	r26, 0x9D	; 157
    3d24:	bf 4f       	sbci	r27, 0xFF	; 255
    3d26:	fe 01       	movw	r30, r28
    3d28:	e9 59       	subi	r30, 0x99	; 153
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	80 81       	ld	r24, Z
    3d2e:	91 81       	ldd	r25, Z+1	; 0x01
    3d30:	11 96       	adiw	r26, 0x01	; 1
    3d32:	9c 93       	st	X, r25
    3d34:	8e 93       	st	-X, r24
    3d36:	fe 01       	movw	r30, r28
    3d38:	ed 59       	subi	r30, 0x9D	; 157
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	80 81       	ld	r24, Z
    3d3e:	91 81       	ldd	r25, Z+1	; 0x01
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	f1 f7       	brne	.-4      	; 0x3d40 <main+0x15ee>
    3d44:	fe 01       	movw	r30, r28
    3d46:	ed 59       	subi	r30, 0x9D	; 157
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	91 83       	std	Z+1, r25	; 0x01
    3d4c:	80 83       	st	Z, r24
    3d4e:	87 c3       	rjmp	.+1806   	; 0x445e <main+0x1d0c>
						_delay_ms(400);

					}
					else if(dis_right==dis_left && dis_left >STOP_DISTANCE /*&& IR_Read_LeftIR()==BLACK && IR_Read_RightIR()==WHITE*/ )
    3d50:	90 91 7f 00 	lds	r25, 0x007F
    3d54:	80 91 80 00 	lds	r24, 0x0080
    3d58:	98 17       	cp	r25, r24
    3d5a:	09 f0       	breq	.+2      	; 0x3d5e <main+0x160c>
    3d5c:	df c2       	rjmp	.+1470   	; 0x431c <main+0x1bca>
    3d5e:	80 91 80 00 	lds	r24, 0x0080
    3d62:	8f 31       	cpi	r24, 0x1F	; 31
    3d64:	08 f4       	brcc	.+2      	; 0x3d68 <main+0x1616>
    3d66:	da c2       	rjmp	.+1460   	; 0x431c <main+0x1bca>
					{
						MotorDriver_MoveForwardRight();
    3d68:	0e 94 df 12 	call	0x25be	; 0x25be <MotorDriver_MoveForwardRight>
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	e1 5a       	subi	r30, 0xA1	; 161
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	aa ef       	ldi	r26, 0xFA	; 250
    3d78:	b3 e4       	ldi	r27, 0x43	; 67
    3d7a:	80 83       	st	Z, r24
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	a2 83       	std	Z+2, r26	; 0x02
    3d80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d82:	8e 01       	movw	r16, r28
    3d84:	05 5a       	subi	r16, 0xA5	; 165
    3d86:	1f 4f       	sbci	r17, 0xFF	; 255
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e1 5a       	subi	r30, 0xA1	; 161
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	60 81       	ld	r22, Z
    3d90:	71 81       	ldd	r23, Z+1	; 0x01
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	4a ef       	ldi	r20, 0xFA	; 250
    3d9c:	54 e4       	ldi	r21, 0x44	; 68
    3d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	f8 01       	movw	r30, r16
    3da8:	80 83       	st	Z, r24
    3daa:	91 83       	std	Z+1, r25	; 0x01
    3dac:	a2 83       	std	Z+2, r26	; 0x02
    3dae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3db0:	fe 01       	movw	r30, r28
    3db2:	e5 5a       	subi	r30, 0xA5	; 165
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e8       	ldi	r20, 0x80	; 128
    3dc4:	5f e3       	ldi	r21, 0x3F	; 63
    3dc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dca:	88 23       	and	r24, r24
    3dcc:	44 f4       	brge	.+16     	; 0x3dde <main+0x168c>
		__ticks = 1;
    3dce:	fe 01       	movw	r30, r28
    3dd0:	e7 5a       	subi	r30, 0xA7	; 167
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	80 83       	st	Z, r24
    3ddc:	64 c0       	rjmp	.+200    	; 0x3ea6 <main+0x1754>
	else if (__tmp > 65535)
    3dde:	fe 01       	movw	r30, r28
    3de0:	e5 5a       	subi	r30, 0xA5	; 165
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	60 81       	ld	r22, Z
    3de6:	71 81       	ldd	r23, Z+1	; 0x01
    3de8:	82 81       	ldd	r24, Z+2	; 0x02
    3dea:	93 81       	ldd	r25, Z+3	; 0x03
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	3f ef       	ldi	r19, 0xFF	; 255
    3df0:	4f e7       	ldi	r20, 0x7F	; 127
    3df2:	57 e4       	ldi	r21, 0x47	; 71
    3df4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3df8:	18 16       	cp	r1, r24
    3dfa:	0c f0       	brlt	.+2      	; 0x3dfe <main+0x16ac>
    3dfc:	43 c0       	rjmp	.+134    	; 0x3e84 <main+0x1732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e1 5a       	subi	r30, 0xA1	; 161
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	60 81       	ld	r22, Z
    3e06:	71 81       	ldd	r23, Z+1	; 0x01
    3e08:	82 81       	ldd	r24, Z+2	; 0x02
    3e0a:	93 81       	ldd	r25, Z+3	; 0x03
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	40 e2       	ldi	r20, 0x20	; 32
    3e12:	51 e4       	ldi	r21, 0x41	; 65
    3e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	8e 01       	movw	r16, r28
    3e1e:	07 5a       	subi	r16, 0xA7	; 167
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	f8 01       	movw	r30, r16
    3e30:	91 83       	std	Z+1, r25	; 0x01
    3e32:	80 83       	st	Z, r24
    3e34:	1f c0       	rjmp	.+62     	; 0x3e74 <main+0x1722>
    3e36:	fe 01       	movw	r30, r28
    3e38:	e9 5a       	subi	r30, 0xA9	; 169
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	88 ec       	ldi	r24, 0xC8	; 200
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	91 83       	std	Z+1, r25	; 0x01
    3e42:	80 83       	st	Z, r24
    3e44:	fe 01       	movw	r30, r28
    3e46:	e9 5a       	subi	r30, 0xA9	; 169
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	f1 f7       	brne	.-4      	; 0x3e4e <main+0x16fc>
    3e52:	fe 01       	movw	r30, r28
    3e54:	e9 5a       	subi	r30, 0xA9	; 169
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5c:	de 01       	movw	r26, r28
    3e5e:	a7 5a       	subi	r26, 0xA7	; 167
    3e60:	bf 4f       	sbci	r27, 0xFF	; 255
    3e62:	fe 01       	movw	r30, r28
    3e64:	e7 5a       	subi	r30, 0xA7	; 167
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	80 81       	ld	r24, Z
    3e6a:	91 81       	ldd	r25, Z+1	; 0x01
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	11 96       	adiw	r26, 0x01	; 1
    3e70:	9c 93       	st	X, r25
    3e72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e74:	fe 01       	movw	r30, r28
    3e76:	e7 5a       	subi	r30, 0xA7	; 167
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	80 81       	ld	r24, Z
    3e7c:	91 81       	ldd	r25, Z+1	; 0x01
    3e7e:	00 97       	sbiw	r24, 0x00	; 0
    3e80:	d1 f6       	brne	.-76     	; 0x3e36 <main+0x16e4>
    3e82:	27 c0       	rjmp	.+78     	; 0x3ed2 <main+0x1780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e84:	8e 01       	movw	r16, r28
    3e86:	07 5a       	subi	r16, 0xA7	; 167
    3e88:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	e5 5a       	subi	r30, 0xA5	; 165
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	60 81       	ld	r22, Z
    3e92:	71 81       	ldd	r23, Z+1	; 0x01
    3e94:	82 81       	ldd	r24, Z+2	; 0x02
    3e96:	93 81       	ldd	r25, Z+3	; 0x03
    3e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	f8 01       	movw	r30, r16
    3ea2:	91 83       	std	Z+1, r25	; 0x01
    3ea4:	80 83       	st	Z, r24
    3ea6:	de 01       	movw	r26, r28
    3ea8:	ab 5a       	subi	r26, 0xAB	; 171
    3eaa:	bf 4f       	sbci	r27, 0xFF	; 255
    3eac:	fe 01       	movw	r30, r28
    3eae:	e7 5a       	subi	r30, 0xA7	; 167
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 81       	ld	r24, Z
    3eb4:	91 81       	ldd	r25, Z+1	; 0x01
    3eb6:	8d 93       	st	X+, r24
    3eb8:	9c 93       	st	X, r25
    3eba:	fe 01       	movw	r30, r28
    3ebc:	eb 5a       	subi	r30, 0xAB	; 171
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	80 81       	ld	r24, Z
    3ec2:	91 81       	ldd	r25, Z+1	; 0x01
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	f1 f7       	brne	.-4      	; 0x3ec4 <main+0x1772>
    3ec8:	fe 01       	movw	r30, r28
    3eca:	eb 5a       	subi	r30, 0xAB	; 171
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
						_delay_ms(500);
						MotorDriver_MoveForward();
    3ed2:	0e 94 a9 12 	call	0x2552	; 0x2552 <MotorDriver_MoveForward>
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	ef 5a       	subi	r30, 0xAF	; 175
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	a6 e1       	ldi	r26, 0x16	; 22
    3ee2:	b4 e4       	ldi	r27, 0x44	; 68
    3ee4:	80 83       	st	Z, r24
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	a2 83       	std	Z+2, r26	; 0x02
    3eea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eec:	8e 01       	movw	r16, r28
    3eee:	03 5b       	subi	r16, 0xB3	; 179
    3ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	ef 5a       	subi	r30, 0xAF	; 175
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	60 81       	ld	r22, Z
    3efa:	71 81       	ldd	r23, Z+1	; 0x01
    3efc:	82 81       	ldd	r24, Z+2	; 0x02
    3efe:	93 81       	ldd	r25, Z+3	; 0x03
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	4a ef       	ldi	r20, 0xFA	; 250
    3f06:	54 e4       	ldi	r21, 0x44	; 68
    3f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	f8 01       	movw	r30, r16
    3f12:	80 83       	st	Z, r24
    3f14:	91 83       	std	Z+1, r25	; 0x01
    3f16:	a2 83       	std	Z+2, r26	; 0x02
    3f18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	e3 5b       	subi	r30, 0xB3	; 179
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	60 81       	ld	r22, Z
    3f22:	71 81       	ldd	r23, Z+1	; 0x01
    3f24:	82 81       	ldd	r24, Z+2	; 0x02
    3f26:	93 81       	ldd	r25, Z+3	; 0x03
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	40 e8       	ldi	r20, 0x80	; 128
    3f2e:	5f e3       	ldi	r21, 0x3F	; 63
    3f30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f34:	88 23       	and	r24, r24
    3f36:	44 f4       	brge	.+16     	; 0x3f48 <main+0x17f6>
		__ticks = 1;
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e5 5b       	subi	r30, 0xB5	; 181
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	91 83       	std	Z+1, r25	; 0x01
    3f44:	80 83       	st	Z, r24
    3f46:	64 c0       	rjmp	.+200    	; 0x4010 <main+0x18be>
	else if (__tmp > 65535)
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e3 5b       	subi	r30, 0xB3	; 179
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	60 81       	ld	r22, Z
    3f50:	71 81       	ldd	r23, Z+1	; 0x01
    3f52:	82 81       	ldd	r24, Z+2	; 0x02
    3f54:	93 81       	ldd	r25, Z+3	; 0x03
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	3f ef       	ldi	r19, 0xFF	; 255
    3f5a:	4f e7       	ldi	r20, 0x7F	; 127
    3f5c:	57 e4       	ldi	r21, 0x47	; 71
    3f5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f62:	18 16       	cp	r1, r24
    3f64:	0c f0       	brlt	.+2      	; 0x3f68 <main+0x1816>
    3f66:	43 c0       	rjmp	.+134    	; 0x3fee <main+0x189c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f68:	fe 01       	movw	r30, r28
    3f6a:	ef 5a       	subi	r30, 0xAF	; 175
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	60 81       	ld	r22, Z
    3f70:	71 81       	ldd	r23, Z+1	; 0x01
    3f72:	82 81       	ldd	r24, Z+2	; 0x02
    3f74:	93 81       	ldd	r25, Z+3	; 0x03
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e2       	ldi	r20, 0x20	; 32
    3f7c:	51 e4       	ldi	r21, 0x41	; 65
    3f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	8e 01       	movw	r16, r28
    3f88:	05 5b       	subi	r16, 0xB5	; 181
    3f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	f8 01       	movw	r30, r16
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
    3f9e:	1f c0       	rjmp	.+62     	; 0x3fde <main+0x188c>
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	e7 5b       	subi	r30, 0xB7	; 183
    3fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa6:	88 ec       	ldi	r24, 0xC8	; 200
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	80 83       	st	Z, r24
    3fae:	fe 01       	movw	r30, r28
    3fb0:	e7 5b       	subi	r30, 0xB7	; 183
    3fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb4:	80 81       	ld	r24, Z
    3fb6:	91 81       	ldd	r25, Z+1	; 0x01
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	f1 f7       	brne	.-4      	; 0x3fb8 <main+0x1866>
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e7 5b       	subi	r30, 0xB7	; 183
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	91 83       	std	Z+1, r25	; 0x01
    3fc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc6:	de 01       	movw	r26, r28
    3fc8:	a5 5b       	subi	r26, 0xB5	; 181
    3fca:	bf 4f       	sbci	r27, 0xFF	; 255
    3fcc:	fe 01       	movw	r30, r28
    3fce:	e5 5b       	subi	r30, 0xB5	; 181
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	11 96       	adiw	r26, 0x01	; 1
    3fda:	9c 93       	st	X, r25
    3fdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e5 5b       	subi	r30, 0xB5	; 181
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	80 81       	ld	r24, Z
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	00 97       	sbiw	r24, 0x00	; 0
    3fea:	d1 f6       	brne	.-76     	; 0x3fa0 <main+0x184e>
    3fec:	27 c0       	rjmp	.+78     	; 0x403c <main+0x18ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fee:	8e 01       	movw	r16, r28
    3ff0:	05 5b       	subi	r16, 0xB5	; 181
    3ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	e3 5b       	subi	r30, 0xB3	; 179
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	60 81       	ld	r22, Z
    3ffc:	71 81       	ldd	r23, Z+1	; 0x01
    3ffe:	82 81       	ldd	r24, Z+2	; 0x02
    4000:	93 81       	ldd	r25, Z+3	; 0x03
    4002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	f8 01       	movw	r30, r16
    400c:	91 83       	std	Z+1, r25	; 0x01
    400e:	80 83       	st	Z, r24
    4010:	de 01       	movw	r26, r28
    4012:	a9 5b       	subi	r26, 0xB9	; 185
    4014:	bf 4f       	sbci	r27, 0xFF	; 255
    4016:	fe 01       	movw	r30, r28
    4018:	e5 5b       	subi	r30, 0xB5	; 181
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	80 81       	ld	r24, Z
    401e:	91 81       	ldd	r25, Z+1	; 0x01
    4020:	8d 93       	st	X+, r24
    4022:	9c 93       	st	X, r25
    4024:	fe 01       	movw	r30, r28
    4026:	e9 5b       	subi	r30, 0xB9	; 185
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 81       	ld	r24, Z
    402c:	91 81       	ldd	r25, Z+1	; 0x01
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	f1 f7       	brne	.-4      	; 0x402e <main+0x18dc>
    4032:	fe 01       	movw	r30, r28
    4034:	e9 5b       	subi	r30, 0xB9	; 185
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	91 83       	std	Z+1, r25	; 0x01
    403a:	80 83       	st	Z, r24
						_delay_ms(600);
						MotorDriver_MoveForwardLeft();
    403c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <MotorDriver_MoveForwardLeft>
    4040:	fe 01       	movw	r30, r28
    4042:	ed 5b       	subi	r30, 0xBD	; 189
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	aa ef       	ldi	r26, 0xFA	; 250
    404c:	b3 e4       	ldi	r27, 0x43	; 67
    404e:	80 83       	st	Z, r24
    4050:	91 83       	std	Z+1, r25	; 0x01
    4052:	a2 83       	std	Z+2, r26	; 0x02
    4054:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4056:	8e 01       	movw	r16, r28
    4058:	01 5c       	subi	r16, 0xC1	; 193
    405a:	1f 4f       	sbci	r17, 0xFF	; 255
    405c:	fe 01       	movw	r30, r28
    405e:	ed 5b       	subi	r30, 0xBD	; 189
    4060:	ff 4f       	sbci	r31, 0xFF	; 255
    4062:	60 81       	ld	r22, Z
    4064:	71 81       	ldd	r23, Z+1	; 0x01
    4066:	82 81       	ldd	r24, Z+2	; 0x02
    4068:	93 81       	ldd	r25, Z+3	; 0x03
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	4a ef       	ldi	r20, 0xFA	; 250
    4070:	54 e4       	ldi	r21, 0x44	; 68
    4072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	f8 01       	movw	r30, r16
    407c:	80 83       	st	Z, r24
    407e:	91 83       	std	Z+1, r25	; 0x01
    4080:	a2 83       	std	Z+2, r26	; 0x02
    4082:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4084:	fe 01       	movw	r30, r28
    4086:	ff 96       	adiw	r30, 0x3f	; 63
    4088:	60 81       	ld	r22, Z
    408a:	71 81       	ldd	r23, Z+1	; 0x01
    408c:	82 81       	ldd	r24, Z+2	; 0x02
    408e:	93 81       	ldd	r25, Z+3	; 0x03
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	40 e8       	ldi	r20, 0x80	; 128
    4096:	5f e3       	ldi	r21, 0x3F	; 63
    4098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    409c:	88 23       	and	r24, r24
    409e:	2c f4       	brge	.+10     	; 0x40aa <main+0x1958>
		__ticks = 1;
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	9e af       	std	Y+62, r25	; 0x3e
    40a6:	8d af       	std	Y+61, r24	; 0x3d
    40a8:	46 c0       	rjmp	.+140    	; 0x4136 <main+0x19e4>
	else if (__tmp > 65535)
    40aa:	fe 01       	movw	r30, r28
    40ac:	ff 96       	adiw	r30, 0x3f	; 63
    40ae:	60 81       	ld	r22, Z
    40b0:	71 81       	ldd	r23, Z+1	; 0x01
    40b2:	82 81       	ldd	r24, Z+2	; 0x02
    40b4:	93 81       	ldd	r25, Z+3	; 0x03
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	3f ef       	ldi	r19, 0xFF	; 255
    40ba:	4f e7       	ldi	r20, 0x7F	; 127
    40bc:	57 e4       	ldi	r21, 0x47	; 71
    40be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40c2:	18 16       	cp	r1, r24
    40c4:	64 f5       	brge	.+88     	; 0x411e <main+0x19cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40c6:	fe 01       	movw	r30, r28
    40c8:	ed 5b       	subi	r30, 0xBD	; 189
    40ca:	ff 4f       	sbci	r31, 0xFF	; 255
    40cc:	60 81       	ld	r22, Z
    40ce:	71 81       	ldd	r23, Z+1	; 0x01
    40d0:	82 81       	ldd	r24, Z+2	; 0x02
    40d2:	93 81       	ldd	r25, Z+3	; 0x03
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	40 e2       	ldi	r20, 0x20	; 32
    40da:	51 e4       	ldi	r21, 0x41	; 65
    40dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	bc 01       	movw	r22, r24
    40e6:	cd 01       	movw	r24, r26
    40e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	9e af       	std	Y+62, r25	; 0x3e
    40f2:	8d af       	std	Y+61, r24	; 0x3d
    40f4:	0f c0       	rjmp	.+30     	; 0x4114 <main+0x19c2>
    40f6:	88 ec       	ldi	r24, 0xC8	; 200
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	9c af       	std	Y+60, r25	; 0x3c
    40fc:	8b af       	std	Y+59, r24	; 0x3b
    40fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    4100:	9c ad       	ldd	r25, Y+60	; 0x3c
    4102:	01 97       	sbiw	r24, 0x01	; 1
    4104:	f1 f7       	brne	.-4      	; 0x4102 <main+0x19b0>
    4106:	9c af       	std	Y+60, r25	; 0x3c
    4108:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    410a:	8d ad       	ldd	r24, Y+61	; 0x3d
    410c:	9e ad       	ldd	r25, Y+62	; 0x3e
    410e:	01 97       	sbiw	r24, 0x01	; 1
    4110:	9e af       	std	Y+62, r25	; 0x3e
    4112:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4114:	8d ad       	ldd	r24, Y+61	; 0x3d
    4116:	9e ad       	ldd	r25, Y+62	; 0x3e
    4118:	00 97       	sbiw	r24, 0x00	; 0
    411a:	69 f7       	brne	.-38     	; 0x40f6 <main+0x19a4>
    411c:	16 c0       	rjmp	.+44     	; 0x414a <main+0x19f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    411e:	fe 01       	movw	r30, r28
    4120:	ff 96       	adiw	r30, 0x3f	; 63
    4122:	60 81       	ld	r22, Z
    4124:	71 81       	ldd	r23, Z+1	; 0x01
    4126:	82 81       	ldd	r24, Z+2	; 0x02
    4128:	93 81       	ldd	r25, Z+3	; 0x03
    412a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412e:	dc 01       	movw	r26, r24
    4130:	cb 01       	movw	r24, r22
    4132:	9e af       	std	Y+62, r25	; 0x3e
    4134:	8d af       	std	Y+61, r24	; 0x3d
    4136:	8d ad       	ldd	r24, Y+61	; 0x3d
    4138:	9e ad       	ldd	r25, Y+62	; 0x3e
    413a:	9a af       	std	Y+58, r25	; 0x3a
    413c:	89 af       	std	Y+57, r24	; 0x39
    413e:	89 ad       	ldd	r24, Y+57	; 0x39
    4140:	9a ad       	ldd	r25, Y+58	; 0x3a
    4142:	01 97       	sbiw	r24, 0x01	; 1
    4144:	f1 f7       	brne	.-4      	; 0x4142 <main+0x19f0>
    4146:	9a af       	std	Y+58, r25	; 0x3a
    4148:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(500);
						MotorDriver_MoveForward();
    414a:	0e 94 a9 12 	call	0x2552	; 0x2552 <MotorDriver_MoveForward>
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	a6 e1       	ldi	r26, 0x16	; 22
    4154:	b4 e4       	ldi	r27, 0x44	; 68
    4156:	8d ab       	std	Y+53, r24	; 0x35
    4158:	9e ab       	std	Y+54, r25	; 0x36
    415a:	af ab       	std	Y+55, r26	; 0x37
    415c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415e:	6d a9       	ldd	r22, Y+53	; 0x35
    4160:	7e a9       	ldd	r23, Y+54	; 0x36
    4162:	8f a9       	ldd	r24, Y+55	; 0x37
    4164:	98 ad       	ldd	r25, Y+56	; 0x38
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4a ef       	ldi	r20, 0xFA	; 250
    416c:	54 e4       	ldi	r21, 0x44	; 68
    416e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	89 ab       	std	Y+49, r24	; 0x31
    4178:	9a ab       	std	Y+50, r25	; 0x32
    417a:	ab ab       	std	Y+51, r26	; 0x33
    417c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    417e:	69 a9       	ldd	r22, Y+49	; 0x31
    4180:	7a a9       	ldd	r23, Y+50	; 0x32
    4182:	8b a9       	ldd	r24, Y+51	; 0x33
    4184:	9c a9       	ldd	r25, Y+52	; 0x34
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e8       	ldi	r20, 0x80	; 128
    418c:	5f e3       	ldi	r21, 0x3F	; 63
    418e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4192:	88 23       	and	r24, r24
    4194:	2c f4       	brge	.+10     	; 0x41a0 <main+0x1a4e>
		__ticks = 1;
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	98 ab       	std	Y+48, r25	; 0x30
    419c:	8f a7       	std	Y+47, r24	; 0x2f
    419e:	3f c0       	rjmp	.+126    	; 0x421e <main+0x1acc>
	else if (__tmp > 65535)
    41a0:	69 a9       	ldd	r22, Y+49	; 0x31
    41a2:	7a a9       	ldd	r23, Y+50	; 0x32
    41a4:	8b a9       	ldd	r24, Y+51	; 0x33
    41a6:	9c a9       	ldd	r25, Y+52	; 0x34
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	3f ef       	ldi	r19, 0xFF	; 255
    41ac:	4f e7       	ldi	r20, 0x7F	; 127
    41ae:	57 e4       	ldi	r21, 0x47	; 71
    41b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b4:	18 16       	cp	r1, r24
    41b6:	4c f5       	brge	.+82     	; 0x420a <main+0x1ab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b8:	6d a9       	ldd	r22, Y+53	; 0x35
    41ba:	7e a9       	ldd	r23, Y+54	; 0x36
    41bc:	8f a9       	ldd	r24, Y+55	; 0x37
    41be:	98 ad       	ldd	r25, Y+56	; 0x38
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e2       	ldi	r20, 0x20	; 32
    41c6:	51 e4       	ldi	r21, 0x41	; 65
    41c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	98 ab       	std	Y+48, r25	; 0x30
    41de:	8f a7       	std	Y+47, r24	; 0x2f
    41e0:	0f c0       	rjmp	.+30     	; 0x4200 <main+0x1aae>
    41e2:	88 ec       	ldi	r24, 0xC8	; 200
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	9e a7       	std	Y+46, r25	; 0x2e
    41e8:	8d a7       	std	Y+45, r24	; 0x2d
    41ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    41ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	f1 f7       	brne	.-4      	; 0x41ee <main+0x1a9c>
    41f2:	9e a7       	std	Y+46, r25	; 0x2e
    41f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    41f8:	98 a9       	ldd	r25, Y+48	; 0x30
    41fa:	01 97       	sbiw	r24, 0x01	; 1
    41fc:	98 ab       	std	Y+48, r25	; 0x30
    41fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4200:	8f a5       	ldd	r24, Y+47	; 0x2f
    4202:	98 a9       	ldd	r25, Y+48	; 0x30
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	69 f7       	brne	.-38     	; 0x41e2 <main+0x1a90>
    4208:	14 c0       	rjmp	.+40     	; 0x4232 <main+0x1ae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420a:	69 a9       	ldd	r22, Y+49	; 0x31
    420c:	7a a9       	ldd	r23, Y+50	; 0x32
    420e:	8b a9       	ldd	r24, Y+51	; 0x33
    4210:	9c a9       	ldd	r25, Y+52	; 0x34
    4212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	98 ab       	std	Y+48, r25	; 0x30
    421c:	8f a7       	std	Y+47, r24	; 0x2f
    421e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4220:	98 a9       	ldd	r25, Y+48	; 0x30
    4222:	9c a7       	std	Y+44, r25	; 0x2c
    4224:	8b a7       	std	Y+43, r24	; 0x2b
    4226:	8b a5       	ldd	r24, Y+43	; 0x2b
    4228:	9c a5       	ldd	r25, Y+44	; 0x2c
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	f1 f7       	brne	.-4      	; 0x422a <main+0x1ad8>
    422e:	9c a7       	std	Y+44, r25	; 0x2c
    4230:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(600);
						MotorDriver_MoveForwardLeft();
    4232:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <MotorDriver_MoveForwardLeft>
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	a8 ec       	ldi	r26, 0xC8	; 200
    423c:	b3 e4       	ldi	r27, 0x43	; 67
    423e:	8f a3       	std	Y+39, r24	; 0x27
    4240:	98 a7       	std	Y+40, r25	; 0x28
    4242:	a9 a7       	std	Y+41, r26	; 0x29
    4244:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4246:	6f a1       	ldd	r22, Y+39	; 0x27
    4248:	78 a5       	ldd	r23, Y+40	; 0x28
    424a:	89 a5       	ldd	r24, Y+41	; 0x29
    424c:	9a a5       	ldd	r25, Y+42	; 0x2a
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	4a ef       	ldi	r20, 0xFA	; 250
    4254:	54 e4       	ldi	r21, 0x44	; 68
    4256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425a:	dc 01       	movw	r26, r24
    425c:	cb 01       	movw	r24, r22
    425e:	8b a3       	std	Y+35, r24	; 0x23
    4260:	9c a3       	std	Y+36, r25	; 0x24
    4262:	ad a3       	std	Y+37, r26	; 0x25
    4264:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4266:	6b a1       	ldd	r22, Y+35	; 0x23
    4268:	7c a1       	ldd	r23, Y+36	; 0x24
    426a:	8d a1       	ldd	r24, Y+37	; 0x25
    426c:	9e a1       	ldd	r25, Y+38	; 0x26
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	40 e8       	ldi	r20, 0x80	; 128
    4274:	5f e3       	ldi	r21, 0x3F	; 63
    4276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    427a:	88 23       	and	r24, r24
    427c:	2c f4       	brge	.+10     	; 0x4288 <main+0x1b36>
		__ticks = 1;
    427e:	81 e0       	ldi	r24, 0x01	; 1
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	9a a3       	std	Y+34, r25	; 0x22
    4284:	89 a3       	std	Y+33, r24	; 0x21
    4286:	3f c0       	rjmp	.+126    	; 0x4306 <main+0x1bb4>
	else if (__tmp > 65535)
    4288:	6b a1       	ldd	r22, Y+35	; 0x23
    428a:	7c a1       	ldd	r23, Y+36	; 0x24
    428c:	8d a1       	ldd	r24, Y+37	; 0x25
    428e:	9e a1       	ldd	r25, Y+38	; 0x26
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	3f ef       	ldi	r19, 0xFF	; 255
    4294:	4f e7       	ldi	r20, 0x7F	; 127
    4296:	57 e4       	ldi	r21, 0x47	; 71
    4298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    429c:	18 16       	cp	r1, r24
    429e:	4c f5       	brge	.+82     	; 0x42f2 <main+0x1ba0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a0:	6f a1       	ldd	r22, Y+39	; 0x27
    42a2:	78 a5       	ldd	r23, Y+40	; 0x28
    42a4:	89 a5       	ldd	r24, Y+41	; 0x29
    42a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    42a8:	20 e0       	ldi	r18, 0x00	; 0
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	40 e2       	ldi	r20, 0x20	; 32
    42ae:	51 e4       	ldi	r21, 0x41	; 65
    42b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	bc 01       	movw	r22, r24
    42ba:	cd 01       	movw	r24, r26
    42bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	9a a3       	std	Y+34, r25	; 0x22
    42c6:	89 a3       	std	Y+33, r24	; 0x21
    42c8:	0f c0       	rjmp	.+30     	; 0x42e8 <main+0x1b96>
    42ca:	88 ec       	ldi	r24, 0xC8	; 200
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	98 a3       	std	Y+32, r25	; 0x20
    42d0:	8f 8f       	std	Y+31, r24	; 0x1f
    42d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42d4:	98 a1       	ldd	r25, Y+32	; 0x20
    42d6:	01 97       	sbiw	r24, 0x01	; 1
    42d8:	f1 f7       	brne	.-4      	; 0x42d6 <main+0x1b84>
    42da:	98 a3       	std	Y+32, r25	; 0x20
    42dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42de:	89 a1       	ldd	r24, Y+33	; 0x21
    42e0:	9a a1       	ldd	r25, Y+34	; 0x22
    42e2:	01 97       	sbiw	r24, 0x01	; 1
    42e4:	9a a3       	std	Y+34, r25	; 0x22
    42e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e8:	89 a1       	ldd	r24, Y+33	; 0x21
    42ea:	9a a1       	ldd	r25, Y+34	; 0x22
    42ec:	00 97       	sbiw	r24, 0x00	; 0
    42ee:	69 f7       	brne	.-38     	; 0x42ca <main+0x1b78>
    42f0:	b6 c0       	rjmp	.+364    	; 0x445e <main+0x1d0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f2:	6b a1       	ldd	r22, Y+35	; 0x23
    42f4:	7c a1       	ldd	r23, Y+36	; 0x24
    42f6:	8d a1       	ldd	r24, Y+37	; 0x25
    42f8:	9e a1       	ldd	r25, Y+38	; 0x26
    42fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42fe:	dc 01       	movw	r26, r24
    4300:	cb 01       	movw	r24, r22
    4302:	9a a3       	std	Y+34, r25	; 0x22
    4304:	89 a3       	std	Y+33, r24	; 0x21
    4306:	89 a1       	ldd	r24, Y+33	; 0x21
    4308:	9a a1       	ldd	r25, Y+34	; 0x22
    430a:	9e 8f       	std	Y+30, r25	; 0x1e
    430c:	8d 8f       	std	Y+29, r24	; 0x1d
    430e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4310:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4312:	01 97       	sbiw	r24, 0x01	; 1
    4314:	f1 f7       	brne	.-4      	; 0x4312 <main+0x1bc0>
    4316:	9e 8f       	std	Y+30, r25	; 0x1e
    4318:	8d 8f       	std	Y+29, r24	; 0x1d
    431a:	a1 c0       	rjmp	.+322    	; 0x445e <main+0x1d0c>
						_delay_ms(400);
					}
					else if(dis_right==dis_left && dis_left <STOP_DISTANCE)
    431c:	90 91 7f 00 	lds	r25, 0x007F
    4320:	80 91 80 00 	lds	r24, 0x0080
    4324:	98 17       	cp	r25, r24
    4326:	09 f0       	breq	.+2      	; 0x432a <main+0x1bd8>
    4328:	9a c0       	rjmp	.+308    	; 0x445e <main+0x1d0c>
    432a:	80 91 80 00 	lds	r24, 0x0080
    432e:	8e 31       	cpi	r24, 0x1E	; 30
    4330:	08 f0       	brcs	.+2      	; 0x4334 <main+0x1be2>
    4332:	95 c0       	rjmp	.+298    	; 0x445e <main+0x1d0c>
					{

						MotorDriver_Stop();
    4334:	0e 94 4b 13 	call	0x2696	; 0x2696 <MotorDriver_Stop>
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	aa ef       	ldi	r26, 0xFA	; 250
    433e:	b3 e4       	ldi	r27, 0x43	; 67
    4340:	89 8f       	std	Y+25, r24	; 0x19
    4342:	9a 8f       	std	Y+26, r25	; 0x1a
    4344:	ab 8f       	std	Y+27, r26	; 0x1b
    4346:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4348:	69 8d       	ldd	r22, Y+25	; 0x19
    434a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    434c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    434e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	4a ef       	ldi	r20, 0xFA	; 250
    4356:	54 e4       	ldi	r21, 0x44	; 68
    4358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	8d 8b       	std	Y+21, r24	; 0x15
    4362:	9e 8b       	std	Y+22, r25	; 0x16
    4364:	af 8b       	std	Y+23, r26	; 0x17
    4366:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4368:	6d 89       	ldd	r22, Y+21	; 0x15
    436a:	7e 89       	ldd	r23, Y+22	; 0x16
    436c:	8f 89       	ldd	r24, Y+23	; 0x17
    436e:	98 8d       	ldd	r25, Y+24	; 0x18
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e8       	ldi	r20, 0x80	; 128
    4376:	5f e3       	ldi	r21, 0x3F	; 63
    4378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    437c:	88 23       	and	r24, r24
    437e:	2c f4       	brge	.+10     	; 0x438a <main+0x1c38>
		__ticks = 1;
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	9c 8b       	std	Y+20, r25	; 0x14
    4386:	8b 8b       	std	Y+19, r24	; 0x13
    4388:	3f c0       	rjmp	.+126    	; 0x4408 <main+0x1cb6>
	else if (__tmp > 65535)
    438a:	6d 89       	ldd	r22, Y+21	; 0x15
    438c:	7e 89       	ldd	r23, Y+22	; 0x16
    438e:	8f 89       	ldd	r24, Y+23	; 0x17
    4390:	98 8d       	ldd	r25, Y+24	; 0x18
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	3f ef       	ldi	r19, 0xFF	; 255
    4396:	4f e7       	ldi	r20, 0x7F	; 127
    4398:	57 e4       	ldi	r21, 0x47	; 71
    439a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    439e:	18 16       	cp	r1, r24
    43a0:	4c f5       	brge	.+82     	; 0x43f4 <main+0x1ca2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a2:	69 8d       	ldd	r22, Y+25	; 0x19
    43a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	40 e2       	ldi	r20, 0x20	; 32
    43b0:	51 e4       	ldi	r21, 0x41	; 65
    43b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	bc 01       	movw	r22, r24
    43bc:	cd 01       	movw	r24, r26
    43be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	9c 8b       	std	Y+20, r25	; 0x14
    43c8:	8b 8b       	std	Y+19, r24	; 0x13
    43ca:	0f c0       	rjmp	.+30     	; 0x43ea <main+0x1c98>
    43cc:	88 ec       	ldi	r24, 0xC8	; 200
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	9a 8b       	std	Y+18, r25	; 0x12
    43d2:	89 8b       	std	Y+17, r24	; 0x11
    43d4:	89 89       	ldd	r24, Y+17	; 0x11
    43d6:	9a 89       	ldd	r25, Y+18	; 0x12
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	f1 f7       	brne	.-4      	; 0x43d8 <main+0x1c86>
    43dc:	9a 8b       	std	Y+18, r25	; 0x12
    43de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e0:	8b 89       	ldd	r24, Y+19	; 0x13
    43e2:	9c 89       	ldd	r25, Y+20	; 0x14
    43e4:	01 97       	sbiw	r24, 0x01	; 1
    43e6:	9c 8b       	std	Y+20, r25	; 0x14
    43e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ea:	8b 89       	ldd	r24, Y+19	; 0x13
    43ec:	9c 89       	ldd	r25, Y+20	; 0x14
    43ee:	00 97       	sbiw	r24, 0x00	; 0
    43f0:	69 f7       	brne	.-38     	; 0x43cc <main+0x1c7a>
    43f2:	35 c0       	rjmp	.+106    	; 0x445e <main+0x1d0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f4:	6d 89       	ldd	r22, Y+21	; 0x15
    43f6:	7e 89       	ldd	r23, Y+22	; 0x16
    43f8:	8f 89       	ldd	r24, Y+23	; 0x17
    43fa:	98 8d       	ldd	r25, Y+24	; 0x18
    43fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4400:	dc 01       	movw	r26, r24
    4402:	cb 01       	movw	r24, r22
    4404:	9c 8b       	std	Y+20, r25	; 0x14
    4406:	8b 8b       	std	Y+19, r24	; 0x13
    4408:	8b 89       	ldd	r24, Y+19	; 0x13
    440a:	9c 89       	ldd	r25, Y+20	; 0x14
    440c:	98 8b       	std	Y+16, r25	; 0x10
    440e:	8f 87       	std	Y+15, r24	; 0x0f
    4410:	8f 85       	ldd	r24, Y+15	; 0x0f
    4412:	98 89       	ldd	r25, Y+16	; 0x10
    4414:	01 97       	sbiw	r24, 0x01	; 1
    4416:	f1 f7       	brne	.-4      	; 0x4414 <main+0x1cc2>
    4418:	98 8b       	std	Y+16, r25	; 0x10
    441a:	8f 87       	std	Y+15, r24	; 0x0f
    441c:	20 c0       	rjmp	.+64     	; 0x445e <main+0x1d0c>
				}


			}
		}
		else if (IR_Read_LeftIR()==BLACK && IR_Read_RightIR()==WHITE)
    441e:	0e 94 90 13 	call	0x2720	; 0x2720 <IR_Read_LeftIR>
    4422:	81 30       	cpi	r24, 0x01	; 1
    4424:	39 f4       	brne	.+14     	; 0x4434 <main+0x1ce2>
    4426:	0e 94 77 13 	call	0x26ee	; 0x26ee <IR_Read_RightIR>
    442a:	88 23       	and	r24, r24
    442c:	19 f4       	brne	.+6      	; 0x4434 <main+0x1ce2>
		{
			MotorDriver_MoveForwardLeft();
    442e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <MotorDriver_MoveForwardLeft>
    4432:	15 c0       	rjmp	.+42     	; 0x445e <main+0x1d0c>

		}
		else if (IR_Read_LeftIR()==WHITE && IR_Read_RightIR()==BLACK)
    4434:	0e 94 90 13 	call	0x2720	; 0x2720 <IR_Read_LeftIR>
    4438:	88 23       	and	r24, r24
    443a:	39 f4       	brne	.+14     	; 0x444a <main+0x1cf8>
    443c:	0e 94 77 13 	call	0x26ee	; 0x26ee <IR_Read_RightIR>
    4440:	81 30       	cpi	r24, 0x01	; 1
    4442:	19 f4       	brne	.+6      	; 0x444a <main+0x1cf8>
		{
			MotorDriver_MoveForwardRight();
    4444:	0e 94 df 12 	call	0x25be	; 0x25be <MotorDriver_MoveForwardRight>
    4448:	0a c0       	rjmp	.+20     	; 0x445e <main+0x1d0c>

		}

		else if (IR_Read_LeftIR()==BLACK && IR_Read_RightIR()==BLACK)
    444a:	0e 94 90 13 	call	0x2720	; 0x2720 <IR_Read_LeftIR>
    444e:	81 30       	cpi	r24, 0x01	; 1
    4450:	31 f4       	brne	.+12     	; 0x445e <main+0x1d0c>
    4452:	0e 94 77 13 	call	0x26ee	; 0x26ee <IR_Read_RightIR>
    4456:	81 30       	cpi	r24, 0x01	; 1
    4458:	11 f4       	brne	.+4      	; 0x445e <main+0x1d0c>
		{
			MotorDriver_Stop();
    445a:	0e 94 4b 13 	call	0x2696	; 0x2696 <MotorDriver_Stop>
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	a0 e2       	ldi	r26, 0x20	; 32
    4464:	b1 e4       	ldi	r27, 0x41	; 65
    4466:	8b 87       	std	Y+11, r24	; 0x0b
    4468:	9c 87       	std	Y+12, r25	; 0x0c
    446a:	ad 87       	std	Y+13, r26	; 0x0d
    446c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    446e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4470:	7c 85       	ldd	r23, Y+12	; 0x0c
    4472:	8d 85       	ldd	r24, Y+13	; 0x0d
    4474:	9e 85       	ldd	r25, Y+14	; 0x0e
    4476:	20 e0       	ldi	r18, 0x00	; 0
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	4a ef       	ldi	r20, 0xFA	; 250
    447c:	54 e4       	ldi	r21, 0x44	; 68
    447e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4482:	dc 01       	movw	r26, r24
    4484:	cb 01       	movw	r24, r22
    4486:	8f 83       	std	Y+7, r24	; 0x07
    4488:	98 87       	std	Y+8, r25	; 0x08
    448a:	a9 87       	std	Y+9, r26	; 0x09
    448c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    448e:	6f 81       	ldd	r22, Y+7	; 0x07
    4490:	78 85       	ldd	r23, Y+8	; 0x08
    4492:	89 85       	ldd	r24, Y+9	; 0x09
    4494:	9a 85       	ldd	r25, Y+10	; 0x0a
    4496:	20 e0       	ldi	r18, 0x00	; 0
    4498:	30 e0       	ldi	r19, 0x00	; 0
    449a:	40 e8       	ldi	r20, 0x80	; 128
    449c:	5f e3       	ldi	r21, 0x3F	; 63
    449e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44a2:	88 23       	and	r24, r24
    44a4:	2c f4       	brge	.+10     	; 0x44b0 <main+0x1d5e>
		__ticks = 1;
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	9e 83       	std	Y+6, r25	; 0x06
    44ac:	8d 83       	std	Y+5, r24	; 0x05
    44ae:	40 c0       	rjmp	.+128    	; 0x4530 <main+0x1dde>
	else if (__tmp > 65535)
    44b0:	6f 81       	ldd	r22, Y+7	; 0x07
    44b2:	78 85       	ldd	r23, Y+8	; 0x08
    44b4:	89 85       	ldd	r24, Y+9	; 0x09
    44b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	3f ef       	ldi	r19, 0xFF	; 255
    44bc:	4f e7       	ldi	r20, 0x7F	; 127
    44be:	57 e4       	ldi	r21, 0x47	; 71
    44c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44c4:	18 16       	cp	r1, r24
    44c6:	54 f5       	brge	.+84     	; 0x451c <main+0x1dca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    44ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    44cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	40 e2       	ldi	r20, 0x20	; 32
    44d6:	51 e4       	ldi	r21, 0x41	; 65
    44d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	bc 01       	movw	r22, r24
    44e2:	cd 01       	movw	r24, r26
    44e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	9e 83       	std	Y+6, r25	; 0x06
    44ee:	8d 83       	std	Y+5, r24	; 0x05
    44f0:	0f c0       	rjmp	.+30     	; 0x4510 <main+0x1dbe>
    44f2:	88 ec       	ldi	r24, 0xC8	; 200
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	9c 83       	std	Y+4, r25	; 0x04
    44f8:	8b 83       	std	Y+3, r24	; 0x03
    44fa:	8b 81       	ldd	r24, Y+3	; 0x03
    44fc:	9c 81       	ldd	r25, Y+4	; 0x04
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	f1 f7       	brne	.-4      	; 0x44fe <main+0x1dac>
    4502:	9c 83       	std	Y+4, r25	; 0x04
    4504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4506:	8d 81       	ldd	r24, Y+5	; 0x05
    4508:	9e 81       	ldd	r25, Y+6	; 0x06
    450a:	01 97       	sbiw	r24, 0x01	; 1
    450c:	9e 83       	std	Y+6, r25	; 0x06
    450e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4510:	8d 81       	ldd	r24, Y+5	; 0x05
    4512:	9e 81       	ldd	r25, Y+6	; 0x06
    4514:	00 97       	sbiw	r24, 0x00	; 0
    4516:	69 f7       	brne	.-38     	; 0x44f2 <main+0x1da0>
    4518:	0c 94 be 13 	jmp	0x277c	; 0x277c <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    451c:	6f 81       	ldd	r22, Y+7	; 0x07
    451e:	78 85       	ldd	r23, Y+8	; 0x08
    4520:	89 85       	ldd	r24, Y+9	; 0x09
    4522:	9a 85       	ldd	r25, Y+10	; 0x0a
    4524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	9e 83       	std	Y+6, r25	; 0x06
    452e:	8d 83       	std	Y+5, r24	; 0x05
    4530:	8d 81       	ldd	r24, Y+5	; 0x05
    4532:	9e 81       	ldd	r25, Y+6	; 0x06
    4534:	9a 83       	std	Y+2, r25	; 0x02
    4536:	89 83       	std	Y+1, r24	; 0x01
    4538:	89 81       	ldd	r24, Y+1	; 0x01
    453a:	9a 81       	ldd	r25, Y+2	; 0x02
    453c:	01 97       	sbiw	r24, 0x01	; 1
    453e:	f1 f7       	brne	.-4      	; 0x453c <main+0x1dea>
    4540:	9a 83       	std	Y+2, r25	; 0x02
    4542:	89 83       	std	Y+1, r24	; 0x01
    4544:	0c 94 be 13 	jmp	0x277c	; 0x277c <main+0x2a>

00004548 <__mulsi3>:
    4548:	62 9f       	mul	r22, r18
    454a:	d0 01       	movw	r26, r0
    454c:	73 9f       	mul	r23, r19
    454e:	f0 01       	movw	r30, r0
    4550:	82 9f       	mul	r24, r18
    4552:	e0 0d       	add	r30, r0
    4554:	f1 1d       	adc	r31, r1
    4556:	64 9f       	mul	r22, r20
    4558:	e0 0d       	add	r30, r0
    455a:	f1 1d       	adc	r31, r1
    455c:	92 9f       	mul	r25, r18
    455e:	f0 0d       	add	r31, r0
    4560:	83 9f       	mul	r24, r19
    4562:	f0 0d       	add	r31, r0
    4564:	74 9f       	mul	r23, r20
    4566:	f0 0d       	add	r31, r0
    4568:	65 9f       	mul	r22, r21
    456a:	f0 0d       	add	r31, r0
    456c:	99 27       	eor	r25, r25
    456e:	72 9f       	mul	r23, r18
    4570:	b0 0d       	add	r27, r0
    4572:	e1 1d       	adc	r30, r1
    4574:	f9 1f       	adc	r31, r25
    4576:	63 9f       	mul	r22, r19
    4578:	b0 0d       	add	r27, r0
    457a:	e1 1d       	adc	r30, r1
    457c:	f9 1f       	adc	r31, r25
    457e:	bd 01       	movw	r22, r26
    4580:	cf 01       	movw	r24, r30
    4582:	11 24       	eor	r1, r1
    4584:	08 95       	ret

00004586 <__udivmodhi4>:
    4586:	aa 1b       	sub	r26, r26
    4588:	bb 1b       	sub	r27, r27
    458a:	51 e1       	ldi	r21, 0x11	; 17
    458c:	07 c0       	rjmp	.+14     	; 0x459c <__udivmodhi4_ep>

0000458e <__udivmodhi4_loop>:
    458e:	aa 1f       	adc	r26, r26
    4590:	bb 1f       	adc	r27, r27
    4592:	a6 17       	cp	r26, r22
    4594:	b7 07       	cpc	r27, r23
    4596:	10 f0       	brcs	.+4      	; 0x459c <__udivmodhi4_ep>
    4598:	a6 1b       	sub	r26, r22
    459a:	b7 0b       	sbc	r27, r23

0000459c <__udivmodhi4_ep>:
    459c:	88 1f       	adc	r24, r24
    459e:	99 1f       	adc	r25, r25
    45a0:	5a 95       	dec	r21
    45a2:	a9 f7       	brne	.-22     	; 0x458e <__udivmodhi4_loop>
    45a4:	80 95       	com	r24
    45a6:	90 95       	com	r25
    45a8:	bc 01       	movw	r22, r24
    45aa:	cd 01       	movw	r24, r26
    45ac:	08 95       	ret

000045ae <__udivmodsi4>:
    45ae:	a1 e2       	ldi	r26, 0x21	; 33
    45b0:	1a 2e       	mov	r1, r26
    45b2:	aa 1b       	sub	r26, r26
    45b4:	bb 1b       	sub	r27, r27
    45b6:	fd 01       	movw	r30, r26
    45b8:	0d c0       	rjmp	.+26     	; 0x45d4 <__udivmodsi4_ep>

000045ba <__udivmodsi4_loop>:
    45ba:	aa 1f       	adc	r26, r26
    45bc:	bb 1f       	adc	r27, r27
    45be:	ee 1f       	adc	r30, r30
    45c0:	ff 1f       	adc	r31, r31
    45c2:	a2 17       	cp	r26, r18
    45c4:	b3 07       	cpc	r27, r19
    45c6:	e4 07       	cpc	r30, r20
    45c8:	f5 07       	cpc	r31, r21
    45ca:	20 f0       	brcs	.+8      	; 0x45d4 <__udivmodsi4_ep>
    45cc:	a2 1b       	sub	r26, r18
    45ce:	b3 0b       	sbc	r27, r19
    45d0:	e4 0b       	sbc	r30, r20
    45d2:	f5 0b       	sbc	r31, r21

000045d4 <__udivmodsi4_ep>:
    45d4:	66 1f       	adc	r22, r22
    45d6:	77 1f       	adc	r23, r23
    45d8:	88 1f       	adc	r24, r24
    45da:	99 1f       	adc	r25, r25
    45dc:	1a 94       	dec	r1
    45de:	69 f7       	brne	.-38     	; 0x45ba <__udivmodsi4_loop>
    45e0:	60 95       	com	r22
    45e2:	70 95       	com	r23
    45e4:	80 95       	com	r24
    45e6:	90 95       	com	r25
    45e8:	9b 01       	movw	r18, r22
    45ea:	ac 01       	movw	r20, r24
    45ec:	bd 01       	movw	r22, r26
    45ee:	cf 01       	movw	r24, r30
    45f0:	08 95       	ret

000045f2 <__prologue_saves__>:
    45f2:	2f 92       	push	r2
    45f4:	3f 92       	push	r3
    45f6:	4f 92       	push	r4
    45f8:	5f 92       	push	r5
    45fa:	6f 92       	push	r6
    45fc:	7f 92       	push	r7
    45fe:	8f 92       	push	r8
    4600:	9f 92       	push	r9
    4602:	af 92       	push	r10
    4604:	bf 92       	push	r11
    4606:	cf 92       	push	r12
    4608:	df 92       	push	r13
    460a:	ef 92       	push	r14
    460c:	ff 92       	push	r15
    460e:	0f 93       	push	r16
    4610:	1f 93       	push	r17
    4612:	cf 93       	push	r28
    4614:	df 93       	push	r29
    4616:	cd b7       	in	r28, 0x3d	; 61
    4618:	de b7       	in	r29, 0x3e	; 62
    461a:	ca 1b       	sub	r28, r26
    461c:	db 0b       	sbc	r29, r27
    461e:	0f b6       	in	r0, 0x3f	; 63
    4620:	f8 94       	cli
    4622:	de bf       	out	0x3e, r29	; 62
    4624:	0f be       	out	0x3f, r0	; 63
    4626:	cd bf       	out	0x3d, r28	; 61
    4628:	09 94       	ijmp

0000462a <__epilogue_restores__>:
    462a:	2a 88       	ldd	r2, Y+18	; 0x12
    462c:	39 88       	ldd	r3, Y+17	; 0x11
    462e:	48 88       	ldd	r4, Y+16	; 0x10
    4630:	5f 84       	ldd	r5, Y+15	; 0x0f
    4632:	6e 84       	ldd	r6, Y+14	; 0x0e
    4634:	7d 84       	ldd	r7, Y+13	; 0x0d
    4636:	8c 84       	ldd	r8, Y+12	; 0x0c
    4638:	9b 84       	ldd	r9, Y+11	; 0x0b
    463a:	aa 84       	ldd	r10, Y+10	; 0x0a
    463c:	b9 84       	ldd	r11, Y+9	; 0x09
    463e:	c8 84       	ldd	r12, Y+8	; 0x08
    4640:	df 80       	ldd	r13, Y+7	; 0x07
    4642:	ee 80       	ldd	r14, Y+6	; 0x06
    4644:	fd 80       	ldd	r15, Y+5	; 0x05
    4646:	0c 81       	ldd	r16, Y+4	; 0x04
    4648:	1b 81       	ldd	r17, Y+3	; 0x03
    464a:	aa 81       	ldd	r26, Y+2	; 0x02
    464c:	b9 81       	ldd	r27, Y+1	; 0x01
    464e:	ce 0f       	add	r28, r30
    4650:	d1 1d       	adc	r29, r1
    4652:	0f b6       	in	r0, 0x3f	; 63
    4654:	f8 94       	cli
    4656:	de bf       	out	0x3e, r29	; 62
    4658:	0f be       	out	0x3f, r0	; 63
    465a:	cd bf       	out	0x3d, r28	; 61
    465c:	ed 01       	movw	r28, r26
    465e:	08 95       	ret

00004660 <_exit>:
    4660:	f8 94       	cli

00004662 <__stop_program>:
    4662:	ff cf       	rjmp	.-2      	; 0x4662 <__stop_program>
